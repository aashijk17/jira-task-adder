import { AppEnvironmentType, AppPermission, AppVersionExtension, GraphQLClient, Maybe, MigrationKeys, Storage, UserError, AppVersionRolloutStatus } from '@forge/cli-shared';
import { VersionUpgrade } from '../service/version-service';
export interface AppVersionDetailsData {
    migrationKeys?: Maybe<MigrationKeys> | null;
    permissions?: Array<AppPermission> | null;
    modules: Array<AppVersionExtension | null> | null | undefined;
    environmentType: AppEnvironmentType;
    appVersion: string;
    deploymentDateTime: Date;
    requiresLicense: boolean;
    storage: Storage;
    environment: string;
}
export interface AppVersionIdentity {
    id: string;
    appVersion: string;
}
export interface AppVersionRollout {
    id: string;
    sourceVersionId: string;
    targetVersionId: string;
    status: AppVersionRolloutStatus;
    appId: string;
    completedUpgradeCount: number;
    failedUpgradeCount: number;
    pendingUpgradeCount: number;
}
export interface AppVersionRolloutDetails extends AppVersionRollout {
    environmentType: AppEnvironmentType;
    createdAt: string;
    completedAt: string;
}
export declare class MissingAppError extends UserError {
}
export declare class MissingAppVersionRolloutError extends Error {
}
export declare class EnvironmentNotFoundError extends UserError {
    constructor(environmentKey: string);
}
export declare class MissingAppVersionError extends Error {
}
export declare class AppVersionDetailsClient {
    private readonly graphqlClient;
    constructor(graphqlClient: GraphQLClient);
    getVersionDetails(appId: string, environmentKey: string, majorVersion?: number): Promise<AppVersionDetailsData>;
    getVersionList(appId: string, environmentKey: string): Promise<string[]>;
    getAppUpgradeVersionsList(appId: string, environmentKey: string): Promise<VersionUpgrade[]>;
    getAppUpgradableToList(appId: string, environmentKey: string, sourceVersionId: string): Promise<VersionUpgrade[]>;
    createAppVersionUpgradeRollout(environmentKey: string, sourceVersionId: string, targetVersionId: string, sourceVersionNumber: string, targetVersionNumber: string): Promise<string | undefined>;
    getAppVersionIdentity(appId: string, environmentKey: string, majorVersion: number): Promise<AppVersionIdentity>;
    getAppVersionRolloutsList(appId: string, environmentKey: string): Promise<AppVersionRolloutDetails[]>;
    getAppVersionRollout(appRolloutId: string): Promise<AppVersionRollout>;
    cancelAppVersionUpgradeRollout(appRolloutId: string, environmentKey: string): Promise<boolean>;
}
//# sourceMappingURL=graphql-client.d.ts.map