/// <reference types="node" />
import { AppConfigProvider, GraphQLClient, AppContainer, AppContainerRegistryLogin, AppContainerImage, AppContainerServices } from '@forge/cli-shared';
import { DockerService } from '../service/docker-service';
import { ChildProcess } from 'node:child_process';
export declare class UnexpectedAppContainerRegistryLoginError extends Error {
    constructor();
}
export declare class UnexpectedAppContainerServicesError extends Error {
    constructor();
}
export declare class ContainerCommand {
    private readonly client;
    private readonly getAppConfig;
    private readonly dockerService;
    constructor(client: GraphQLClient, getAppConfig: AppConfigProvider, dockerService: DockerService);
    createContainer(key: string): Promise<AppContainer>;
    fetchContainers(): Promise<AppContainer[]>;
    getContainerServiceDetails(environmentKey: string, serviceNames: string[]): Promise<AppContainerServices>;
    deleteContainer(key: string): Promise<void>;
    fetchLoginDetails(): Promise<AppContainerRegistryLogin>;
    fetchImages(key: string, startCursor?: string): Promise<{
        images: AppContainerImage[];
        endCursor?: string;
        hasNextPage: boolean;
    }>;
    authenticateDocker(): Promise<ChildProcess>;
}
//# sourceMappingURL=container-command.d.ts.map