"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContainerCommand = exports.UnexpectedAppContainerServicesError = exports.UnexpectedAppContainerRegistryLoginError = void 0;
const cli_shared_1 = require("@forge/cli-shared");
class UnexpectedAppContainerRegistryLoginError extends Error {
    constructor() {
        super('Unable to retrieve app container registry login details');
    }
}
exports.UnexpectedAppContainerRegistryLoginError = UnexpectedAppContainerRegistryLoginError;
class UnexpectedAppContainerServicesError extends Error {
    constructor() {
        super('Unable to retrieve app container services');
    }
}
exports.UnexpectedAppContainerServicesError = UnexpectedAppContainerServicesError;
class ContainerCommand {
    client;
    getAppConfig;
    dockerService;
    constructor(client, getAppConfig, dockerService) {
        this.client = client;
        this.getAppConfig = getAppConfig;
        this.dockerService = dockerService;
    }
    async createContainer(key) {
        const { id: appId } = await this.getAppConfig();
        const mutation = `
      mutation forge_cli_createAppContainer($input: AppContainerInput!) {
        createAppContainer(input: $input) {
          container {
            repositoryURI
          }
          success
          errors {
            message
            extensions {
              errorType
              statusCode
            }
          }
        }
      }`;
        const { response: { createAppContainer: { container, success, errors } }, requestId } = await this.client.mutate(mutation, {
            input: {
                appId,
                containerKey: key
            }
        });
        if (!success || !container) {
            const error = (0, cli_shared_1.getError)(errors);
            throw new cli_shared_1.GraphQlMutationError(`${error.message} (requestId: ${requestId || 'unknown'})`, {
                requestId,
                code: error.code,
                statusCode: error.statusCode
            });
        }
        return container;
    }
    async fetchContainers() {
        const { id: appId } = await this.getAppConfig();
        const query = `
      query forge_cli_appContainers($appId: ID!) {
        appContainers(appId: $appId) {
          key
          repositoryURI
        }
      }`;
        const { appContainers } = await this.client.query(query, {
            appId
        });
        return appContainers ?? [];
    }
    async getContainerServiceDetails(environmentKey, serviceNames) {
        const { id: appId } = await this.getAppConfig();
        const query = `
      query forge_cli_appContainerServices($appId: ID!, $environmentKey: String!, $serviceNames: [String!]!) {
        appContainerServices(appId: $appId, environmentKey: $environmentKey, serviceNames: $serviceNames) {
          services {
            key
            runningCount
            pendingCount
            maxCount
            minCount
            serviceStatus
            versionStatus
            createdAt
            updatedAt
            containers {
              key
              instances {
                id
                createdAt
                healthStatus
                containerStatus
                imageURI
              }
            }
          }
        }
      }`;
        const { appContainerServices } = await this.client.query(query, {
            appId,
            environmentKey,
            serviceNames
        });
        if (!appContainerServices) {
            throw new UnexpectedAppContainerServicesError();
        }
        return appContainerServices;
    }
    async deleteContainer(key) {
        const { id: appId } = await this.getAppConfig();
        const mutation = `
      mutation forge_cli_deleteAppContainer($input: AppContainerInput!) {
        deleteAppContainer(input: $input) {
          success
          errors {
            message
            extensions {
              errorType
              statusCode
            }
          }
        }
      }`;
        const { response: { deleteAppContainer: { success, errors } }, requestId } = await this.client.mutate(mutation, {
            input: {
                appId,
                containerKey: key
            }
        });
        if (!success) {
            const error = (0, cli_shared_1.getError)(errors);
            throw new cli_shared_1.GraphQlMutationError(`${error.message} (requestId: ${requestId || 'unknown'})`, {
                requestId,
                code: error.code,
                statusCode: error.statusCode
            });
        }
    }
    async fetchLoginDetails() {
        const { id: appId } = await this.getAppConfig();
        const query = `
      query forge_cli_appContainerRegistryLogin($appId: ID!) {
        appContainerRegistryLogin(appId: $appId) {
          username
          password
          endpoint
        }
      }`;
        const { appContainerRegistryLogin } = await this.client.query(query, {
            appId
        });
        if (!appContainerRegistryLogin) {
            throw new UnexpectedAppContainerRegistryLoginError();
        }
        return appContainerRegistryLogin;
    }
    async fetchImages(key, startCursor) {
        const { id: appId } = await this.getAppConfig();
        const query = `
      query forge_cli_appContainer($appId: ID!, $containerKey: String!, $after: ID) {
        appContainer(appId: $appId, containerKey: $containerKey) {
          images(first: 10, after: $after) {
            edges {
              node {
                digest
                sizeInBytes
                pushedAt
                lastPulledAt
                tags
              }
            }
            pageInfo {
              hasNextPage
              endCursor
            }
          }
        }
      }`;
        const { appContainer } = await this.client.query(query, {
            appId,
            containerKey: key,
            after: startCursor
        });
        return {
            images: appContainer?.images.edges.map(({ node }) => node) ?? [],
            endCursor: appContainer?.images.pageInfo.endCursor ?? undefined,
            hasNextPage: appContainer?.images.pageInfo.hasNextPage ?? false
        };
    }
    async authenticateDocker() {
        const loginDetails = await this.fetchLoginDetails();
        const args = ['--username', loginDetails.username, '--password-stdin', loginDetails.endpoint];
        const dockerProcess = this.dockerService.authenticateDocker(args);
        dockerProcess.stdin?.write(loginDetails.password + '\n');
        dockerProcess.stdin?.end();
        return dockerProcess;
    }
}
exports.ContainerCommand = ContainerCommand;
//# sourceMappingURL=container-command.js.map