import { AppConfigProvider, AppEnvironmentType } from '@forge/cli-shared';
import { AppVersionDetailsClient, AppVersionRolloutDetails } from '../version/graphql-client';
export interface VersionDetails {
    appVersion: number;
    deploymentDateTime: Date;
    environmentType: AppEnvironmentType;
    functions: {
        key: string;
        runtimeName: string;
        handler: string;
    }[];
    modules: {
        type: string;
        items: {
            key: string;
            properties: any;
        }[];
    }[];
    requiresLicense: boolean;
    egresses: {
        type: string;
        addresses: string[];
    }[];
    analytics: {
        type: string;
        addresses: string[];
        inScopeEUD: boolean;
    }[];
    scopes: string[];
    policies: {
        type: string;
        policies: string[];
    }[];
    connectKeys: {
        product: string;
        key: string;
    }[];
    remotes: {
        key: string;
        baseUrl: string;
        operations: string[];
    }[];
    environment: string;
}
export interface VersionOverview {
    version: number;
    deploymentDateTime: Date;
    environmentType: AppEnvironmentType;
    egresses: {
        type: string;
        count: number;
    }[];
    analytics: {
        type: string;
        count: number;
    }[];
    policies: {
        type: string;
        count: number;
    }[];
    scopes: string;
    connectKeys: string;
    functions: string;
    remotes: string;
    modules: {
        type: string;
        count: number;
    }[];
    requiresLicense: boolean;
}
export interface VersionUpgrade {
    version: string;
    deploymentDateTime: Date | undefined;
    installations?: number;
    upgradeableTo?: boolean;
    id: string;
}
export declare class MissingVersionUpgradeParameters extends Error {
    constructor();
}
export declare class VersionService {
    private readonly getAppConfig;
    private readonly versionDetailsClient;
    private readonly adapters;
    constructor(getAppConfig: AppConfigProvider, versionDetailsClient: AppVersionDetailsClient);
    private filterOutEmpty;
    private getEgresses;
    private getAnalytics;
    private getPolicies;
    private getConnectedKeys;
    private getFunctions;
    getAppVersionDetails(environmentKey: string, majorVersion?: number): Promise<VersionDetails>;
    private getTypeFromPermissionType;
    private getModulesGroupedByTypes;
    private removeInternalPropertiesFromObject;
    private getAppVersions;
    getAppVersionOverviewList(environmentKey: string): Promise<VersionOverview[]>;
    getAppUpgradeVersionsList(environmentKey: string): Promise<VersionUpgrade[]>;
    getUpgradableVersions(environmentKey: string, sourceVersionId: string): Promise<VersionUpgrade[]>;
    createAppVersionUpgradeRollout(environmentKey: string, sourceVersionId: string, targetVersionId: string, sourceVersionNumber: string, targetVersionNumber: string): Promise<string | undefined>;
    createAppVersionUpgradeRolloutNonInteractively(environmentKey: string, sourceMajorVersion: number | undefined, targetMajorVersion: number | undefined): Promise<string | undefined>;
    getAppVersionUpgradeRolloutsList(environmentKey: string): Promise<AppVersionRolloutDetails[]>;
    cancelAppVersionRollout(appRolloutId: string, environmentKey: string): Promise<boolean>;
    getAppVersionRollout(appRolloutId: string): Promise<import("../version/graphql-client").AppVersionRollout>;
    private applyPropertyAdapter;
    private addDefaultTypeToLegacyWebtriggerDetails;
}
//# sourceMappingURL=version-service.d.ts.map