"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildService = exports.BUILD_TAG_REGEX = exports.BUILD_TAG_MAX_LENGTH = void 0;
const cli_shared_1 = require("@forge/cli-shared");
const crypto_1 = require("crypto");
exports.BUILD_TAG_MAX_LENGTH = 64;
exports.BUILD_TAG_REGEX = /^[a-zA-Z0-9][a-zA-Z0-9-_\.]*$/;
class BuildService {
    getAppConfig;
    buildClient;
    constructor(getAppConfig, buildClient) {
        this.getAppConfig = getAppConfig;
        this.buildClient = buildClient;
    }
    generateBuildTag() {
        return (0, crypto_1.randomUUID)();
    }
    validateBuildOptions({ buildTag }) {
        if (buildTag.trim() === '') {
            throw new cli_shared_1.ValidationError(cli_shared_1.Text.build.buildTag.error.emptyBuildTag);
        }
        if (buildTag.length > exports.BUILD_TAG_MAX_LENGTH) {
            throw new cli_shared_1.ValidationError(cli_shared_1.Text.build.buildTag.error.invalidBuildTag(exports.BUILD_TAG_MAX_LENGTH));
        }
        if (!exports.BUILD_TAG_REGEX.test(buildTag)) {
            throw new cli_shared_1.ValidationError(cli_shared_1.Text.build.buildTag.error.invalidBuildTagFormat);
        }
    }
    async getBuildsByApp(limit) {
        const { id: appId } = await this.getAppConfig();
        const data = await this.buildClient.getAllBuildsByApp(appId, limit);
        return data;
    }
}
exports.BuildService = BuildService;
//# sourceMappingURL=build-service.js.map