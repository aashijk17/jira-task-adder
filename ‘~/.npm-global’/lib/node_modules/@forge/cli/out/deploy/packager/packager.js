"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppPackager = void 0;
const cli_shared_1 = require("@forge/cli-shared");
const bundler_1 = require("@forge/bundler");
class AppPackager {
    runtimeBundler;
    nativeUiBundler;
    logger;
    analyticsClient;
    constructor(runtimeBundler, nativeUiBundler, logger, analyticsClient) {
        this.runtimeBundler = runtimeBundler;
        this.nativeUiBundler = nativeUiBundler;
        this.logger = logger;
        this.analyticsClient = analyticsClient;
    }
    async package(handlers, resources, packageConfig, i18nResourceBundle, i18nConfig) {
        this.logger.info(cli_shared_1.Text.deploy.taskPackage.title);
        const runtimeBundle = await this.runtimeBundler.bundle(handlers, i18nResourceBundle, packageConfig);
        const nativeUiBundle = await this.nativeUiBundler.bundleResources(resources, i18nConfig);
        const metadata = this.getAppMetadata((0, bundler_1.mergeMetadata)(runtimeBundle.metadata, nativeUiBundle.metadata));
        await this.analyticsClient.reportAppPackaged(metadata);
        return {
            runtimeArchivePath: runtimeBundle.runtimeArchivePath,
            moduleList: runtimeBundle.metadata.modules,
            ...nativeUiBundle
        };
    }
    getAppMetadata(bundleMetadata) {
        return {
            jsFiles: bundleMetadata.jsFiles,
            tsFiles: bundleMetadata.tsFiles,
            esm: bundleMetadata.esm,
            dependencies: Array.from(bundleMetadata.dependencies),
            sdkImports: Array.from(bundleMetadata.sdkImports),
            errors: bundleMetadata.errors,
            isCI: process.env.CI === 'true',
            bundler: bundleMetadata.bundler
        };
    }
}
exports.AppPackager = AppPackager;
//# sourceMappingURL=packager.js.map