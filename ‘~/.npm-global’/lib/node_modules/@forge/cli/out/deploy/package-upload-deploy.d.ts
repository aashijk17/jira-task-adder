import { Handler, I18nResourceBundlingService, ResourceDetails, UserError } from '@forge/cli-shared';
import { App, Modules, Translations } from '@forge/manifest';
import { Deployer } from './deployer/deployer';
import { Packager } from './packager/packager';
import { ArchiveUploader } from './uploader/uploader';
import { DeploymentResult } from '../command-line/register-deployment-commands';
import { ResourcePackagingService, ResourceArchives } from '../service/resource-packaging-service';
export declare class MissingEnvironmentKeyError extends UserError {
    constructor();
}
export interface Details {
    handlers: Array<Handler>;
    environmentKey?: string;
    resources: ResourceDetails[];
    packageConfig: App['package'];
    modules?: Modules;
    majorVersion?: number;
    i18nConfig?: Translations;
    buildTag?: string;
}
export declare class PackageUploadDeployCommand {
    private readonly packager;
    private readonly archiveUploader;
    private readonly deployer;
    private readonly resourcePackagingService;
    private readonly i18nResourceBundlingService;
    constructor(packager: Packager, archiveUploader: ArchiveUploader, deployer: Deployer, resourcePackagingService: ResourcePackagingService, i18nResourceBundlingService: I18nResourceBundlingService);
    execute(details: Details): Promise<DeploymentResult>;
    packageUpload(details: Details): Promise<{
        uploadUrl: string;
        hostedResourceUploadId: string | undefined;
        resourcesArchives: ResourceArchives;
        moduleList: string[] | undefined;
    }>;
}
//# sourceMappingURL=package-upload-deploy.d.ts.map