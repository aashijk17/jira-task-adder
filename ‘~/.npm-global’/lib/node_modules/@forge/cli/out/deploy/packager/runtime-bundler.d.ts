import { Bundler, BundlerMetadata, EntryPoint } from '@forge/bundler';
import { Handler, Logger, FileSystemReader, ConfigReader, type I18nResourceBundle } from '@forge/cli-shared';
import { App } from '@forge/manifest';
import { Archiver } from './archiver';
export interface RuntimeBundleResult {
    runtimeArchivePath: string;
    metadata: BundlerMetadata;
}
export declare class RuntimeBundler {
    private readonly archiverFactory;
    private readonly logger;
    private readonly bundler;
    protected readonly fileSystemReader: FileSystemReader;
    private readonly configReader;
    constructor(archiverFactory: () => Archiver, logger: Logger, bundler: Bundler, fileSystemReader: FileSystemReader, configReader: ConfigReader);
    protected packageCode(archiver: Archiver, entryPoints: EntryPoint[], i18nResourceBundle: I18nResourceBundle): Promise<BundlerMetadata>;
    protected packageDependencies(archiver: Archiver): Promise<void>;
    protected packageAll(archiver: Archiver, handlers: Handler[], packageConfig: App['package'], i18nResourceBundle: I18nResourceBundle): Promise<BundlerMetadata>;
    protected packageI18nResources(archiver: Archiver, i18nResourceBundle: I18nResourceBundle): void;
    bundle(handlers: Handler[], i18nResourceBundle: I18nResourceBundle, packageConfig?: App['package']): Promise<RuntimeBundleResult>;
}
//# sourceMappingURL=runtime-bundler.d.ts.map