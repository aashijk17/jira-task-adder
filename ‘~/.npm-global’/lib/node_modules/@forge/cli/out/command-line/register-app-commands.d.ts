import { CreateAppCommandResult, CommandLineUI, CreateAppCommand } from '@forge/cli-shared';
import { Dependencies } from './dependency-injection';
import { DevSpaceService } from '../devspace';
export declare enum TemplateCategory {
    SHOW_ALL = "Show All",
    ROVO = "Rovo Agent and action",
    UI_KIT_2 = "UI Kit",
    CUSTOM_UI = "Custom UI",
    BACKEND = "Triggers and Validators"
}
export declare enum TemplateContext {
    SHOW_ALL = "show-all",
    AUTOMATION = "automation",
    BITBUCKET = "bitbucket",
    COMPASS = "compass",
    CONFLUENCE = "confluence",
    DASHBOARDS = "dashboards",
    JIRA = "jira",
    JIRA_SERVICE_MANAGEMENT = "jira-service-management",
    TEAMWORK_GRAPH = "teamwork-graph",
    ROVO = "rovo",
    CROSS_CONTEXT = "cross-context"
}
declare type TemplateCategoryPredicates = [TemplateCategory, (name: string) => boolean][];
export declare const PRODUCT_OPTIONS_DISPLAY: Partial<Record<TemplateContext, string>>;
export declare const CATEGORY_PREDICATES: TemplateCategoryPredicates;
export declare function formatProduct(product: string): string;
export declare function templateMatchesProduct(productName: string, templateName: string, products: (TemplateContext | string | null)[]): boolean;
export declare function directoryNameFromAppName(appName?: string): string | undefined;
export interface CreateCommandHandlerOptions {
    template?: string;
    directory?: string;
    developerSpaceId?: string;
}
export interface RegisterCommandHandlerOptions {
    developerSpaceId?: string;
}
export declare const isValidDevSpaceId: (developerSpaceId: string) => boolean;
export declare function createCommandHandler(ui: CommandLineUI, createAppCommand: CreateAppCommand, name: string, { template, directory, developerSpaceId }: CreateCommandHandlerOptions, devSpaceService: DevSpaceService, isDevSpaceSelectionEnabled: boolean): Promise<CreateAppCommandResult | void>;
export declare function filterTemplatesByProduct(templates: string[], product: string, productOptions: TemplateContext[]): string[];
export declare function registerCommands(deps: Dependencies): Promise<void>;
export {};
//# sourceMappingURL=register-app-commands.d.ts.map