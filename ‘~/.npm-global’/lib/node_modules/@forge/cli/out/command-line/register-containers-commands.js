"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerCommands = void 0;
const cli_shared_1 = require("@forge/cli-shared");
const registerCreateContainerCommand = (parent, { ui, commands: { containerCommand } }) => {
    parent
        .command('create')
        .description(cli_shared_1.Text.containers.create.cmd.desc)
        .option('-k, --key <key>', cli_shared_1.Text.containers.create.cmd.keyOption)
        .requireAppId()
        .action(async ({ key }) => {
        if (!key) {
            ui.info(cli_shared_1.Text.containers.create.prompt.overview);
            ui.emptyLine();
            key = await ui.promptForText(cli_shared_1.Text.containers.create.prompt.entry);
            ui.emptyLine();
        }
        ui.info(cli_shared_1.Text.containers.create.creatingNewContainer(key));
        ui.info(cli_shared_1.Text.ctrlC);
        ui.emptyLine();
        const container = await ui.displayProgress(() => containerCommand.createContainer(key), cli_shared_1.Text.containers.create.start, cli_shared_1.Text.containers.create.success);
        ui.emptyLine();
        ui.info(cli_shared_1.Text.containers.create.createdRepositoryURI(container.repositoryURI));
    });
};
const registerGetRepositoryLoginCommand = (parent, { ui, commands: { containerCommand } }) => {
    parent
        .command('get-login')
        .description(cli_shared_1.Text.containers.login.cmd.desc)
        .requireAppId()
        .option('--password-only', cli_shared_1.Text.containers.login.cmd.onlyPassword)
        .action(async (opts) => {
        const login = await containerCommand.fetchLoginDetails();
        if (opts.passwordOnly) {
            ui.info(login.password);
        }
        else {
            ui.table([
                ['username', 'Username'],
                ['password', 'Password'],
                ['endpoint', 'Endpoint']
            ], [
                {
                    ...login,
                    password: cli_shared_1.Text.containers.login.truncatedPassword(login.password)
                }
            ]);
        }
    });
};
const registerDeleteContainerCommand = (parent, { ui, commands: { containerCommand } }) => {
    parent
        .command('delete')
        .description(cli_shared_1.Text.containers.delete.cmd.desc)
        .option('-k, --key <key>', cli_shared_1.Text.containers.delete.cmd.keyOption)
        .requireAppId()
        .action(async ({ key }) => {
        if (!key) {
            const containers = await containerCommand.fetchContainers();
            if (!containers.length) {
                ui.info(cli_shared_1.Text.containers.delete.interactive.noContainersFound);
                return;
            }
            const selectedContainerIndex = await ui.promptForSingleChoiceTable(cli_shared_1.Text.containers.delete.interactive.desc, cli_shared_1.Text.containers.delete.interactive.progressInfo, ['Container Key', 'Repository URI'], containers.map(({ key, repositoryURI }) => ({
                names: [key, repositoryURI],
                value: key,
                primary: key
            })));
            key = containers[selectedContainerIndex].key;
            ui.emptyLine();
        }
        ui.info(cli_shared_1.Text.containers.delete.deletingContainer(key));
        ui.emptyLine();
        ui.warn(cli_shared_1.Text.containers.delete.warning);
        const confirmation = await ui.promptForText(cli_shared_1.Text.containers.delete.confirmation(key));
        if (confirmation !== key) {
            ui.info(cli_shared_1.Text.containers.delete.abortedDeletion);
            return;
        }
        ui.info(cli_shared_1.Text.ctrlC);
        ui.emptyLine();
        await ui.displayProgress(() => containerCommand.deleteContainer(key), cli_shared_1.Text.containers.delete.start, cli_shared_1.Text.containers.delete.success);
    });
};
const registerDockerLoginCommand = (parent, { ui, commands: { containerCommand } }) => {
    parent
        .command('docker-login')
        .description(cli_shared_1.Text.containers.dockerLogin.cmd.desc)
        .requireAppId()
        .action(async () => {
        await containerCommand.authenticateDocker();
    });
};
const registerCommands = (deps) => {
    const containersCmd = deps.cmd.command('containers', { hidden: true }).description(cli_shared_1.Text.containers.cmd.desc);
    registerCreateContainerCommand(containersCmd, deps);
    registerGetRepositoryLoginCommand(containersCmd, deps);
    registerDeleteContainerCommand(containersCmd, deps);
    registerDockerLoginCommand(containersCmd, deps);
};
exports.registerCommands = registerCommands;
//# sourceMappingURL=register-containers-commands.js.map