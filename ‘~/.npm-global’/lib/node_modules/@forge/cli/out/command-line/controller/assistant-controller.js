"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssistantController = void 0;
const cli_shared_1 = require("@forge/cli-shared");
class AssistantController {
    ui;
    cachedConfigService;
    constructor(ui, cachedConfigService) {
        this.ui = ui;
        this.cachedConfigService = cachedConfigService;
    }
    validateAssistantName(name) {
        const normalizedName = name.toLowerCase();
        const assistantName = Object.values(cli_shared_1.AssistantName).find((n) => n === normalizedName);
        if (!assistantName) {
            throw new Error(`Unsupported assistant name: ${name}. Supported names: ${Object.values(cli_shared_1.AssistantName).join(', ')}`);
        }
        return assistantName;
    }
    async enableAssistant(name, showConfirmation = true) {
        let assistantName;
        try {
            assistantName = this.validateAssistantName(name);
        }
        catch (error) {
            this.ui.error(error);
            return;
        }
        const currentName = this.cachedConfigService.getAssistantName();
        if (currentName !== null) {
            if (currentName === assistantName) {
                this.ui.info(`${assistantName} assistant is already enabled`);
                return;
            }
            else {
                this.ui.info(`Switching from ${currentName} to ${assistantName} assistant`);
            }
        }
        else {
            if (showConfirmation) {
                const userConfirmed = await this.ui.confirm(cli_shared_1.Text.assistant.enableConfirmation);
                if (!userConfirmed) {
                    return;
                }
            }
        }
        if (assistantName === cli_shared_1.AssistantName.ROVO) {
            const isAuthenticated = await (0, cli_shared_1.checkRovoAuthStatus)();
            if (!isAuthenticated) {
                this.ui.error(new Error("Unauthorized: use 'acli rovodev auth login' to authenticate. Then run this command again"));
                return;
            }
        }
        else if (assistantName === cli_shared_1.AssistantName.GEMINI) {
            const isAuthenticated = await (0, cli_shared_1.checkGeminiSetup)();
            if (!isAuthenticated) {
                this.ui.error(new Error('Please follow instructions at https://github.com/google-gemini/gemini-cli to set up Gemini CLI'));
                return;
            }
        }
        this.cachedConfigService.setAssistantName(assistantName);
        this.ui.info(cli_shared_1.Text.assistant.enabled(assistantName));
    }
    async disableAssistant() {
        const currentName = this.cachedConfigService.getAssistantName();
        if (currentName === null) {
            this.ui.info(cli_shared_1.Text.assistant.alreadyDisabled);
            return;
        }
        this.cachedConfigService.setAssistantName(null);
        this.ui.info(cli_shared_1.Text.assistant.disabled);
    }
}
exports.AssistantController = AssistantController;
//# sourceMappingURL=assistant-controller.js.map