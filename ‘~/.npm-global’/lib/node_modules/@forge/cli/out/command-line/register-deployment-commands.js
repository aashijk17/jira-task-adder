"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerCommands = exports.registerListDeploymentsCommand = exports.parseMajorVersion = void 0;
const cli_shared_1 = require("@forge/cli-shared");
const DEPLOY_COMMAND_NAME = 'deploy';
const LIST_COMMAND_NAME = 'list';
function parseMajorVersion(majorVersionStr) {
    if (!/^\d+$/.test(majorVersionStr)) {
        throw new cli_shared_1.ValidationError(cli_shared_1.Text.deploy.majorVersion.invalidMajorVersionError);
    }
    const majorVersion = parseInt(majorVersionStr, 10);
    if (majorVersion < 2) {
        throw new cli_shared_1.ValidationError(cli_shared_1.Text.deploy.majorVersion.invalidMajorVersionError);
    }
    return majorVersion;
}
exports.parseMajorVersion = parseMajorVersion;
const registerDeployAppCommand = ({ cmd, controllers: { deployController } }) => {
    cmd
        .requireAppId()
        .description(cli_shared_1.Text.deploy.cmd.desc)
        .option('-f, --no-verify', 'disable pre-deployment checks')
        .option('-v, --major-version [version]', cli_shared_1.Text.deploy.majorVersion.description)
        .option('-t, --tag <tag>', cli_shared_1.Text.deploy.buildTag.description)
        .environmentOption()
        .nonInteractiveOption()
        .action(async (opts) => {
        const { majorVersion, tag, ...stringOptions } = opts;
        const majorVersionInt = majorVersion ? parseMajorVersion(majorVersion) : undefined;
        await deployController.run({ ...stringOptions, majorVersion: majorVersionInt, buildTag: tag });
    });
};
const registerListDeploymentsCommand = ({ cmd, ui, services: { deploymentsService } }) => {
    cmd
        .command(LIST_COMMAND_NAME)
        .requireAppId()
        .jsonOption()
        .description(cli_shared_1.Text.deployList.cmd)
        .action(async ({ json }) => {
        const { deployments } = await deploymentsService.listAppDeployments();
        ui.table([
            ['createdAt', 'Date and Time'],
            ['createdBy', 'Contributor'],
            ['environmentKey', 'Environment name'],
            ['majorVersion', 'Major version'],
            ['status', 'Status'],
            ['buildTag', 'Build Tag']
        ], deployments.map(({ environmentKey, majorVersion, status, buildTag, createdBy, createdAt }) => ({
            createdAt,
            createdBy: createdBy?.name || 'N/A',
            environmentKey,
            majorVersion: majorVersion?.version ? majorVersion.version.split('.')[0] : 'N/A',
            status: status === 'DONE' ? 'Success' : status,
            buildTag: buildTag || 'N/A'
        })), {
            json,
            emptyMessage: cli_shared_1.Text.deployList.noDeployments,
            preMessage: cli_shared_1.Text.deployList.banner
        });
    });
};
exports.registerListDeploymentsCommand = registerListDeploymentsCommand;
const registerCommands = ({ cmd, ...deps }) => {
    const deploy = cmd.command(DEPLOY_COMMAND_NAME);
    registerDeployAppCommand({ cmd: deploy, ...deps });
    (0, exports.registerListDeploymentsCommand)({ cmd: deploy, ...deps });
};
exports.registerCommands = registerCommands;
//# sourceMappingURL=register-deployment-commands.js.map