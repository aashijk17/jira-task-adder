"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerCommands = void 0;
const tslib_1 = require("tslib");
const cli_shared_1 = require("@forge/cli-shared");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const register_build_command_helpers_1 = require("./register-build-command-helpers");
const DEFAULT_LIST_LIMIT = 25;
const BUILD_COMMAND_NAME = 'build';
const registerBuildsList = (parent, { ui, controllers: { buildController } }) => {
    parent
        .command('list')
        .option('-l, --limit <limit number>', cli_shared_1.Text.build.list.limit(DEFAULT_LIST_LIMIT))
        .jsonOption()
        .description(cli_shared_1.Text.build.list.cmd.desc)
        .requireAppId()
        .action(async (opts) => {
        const limit = opts.limit ? (0, register_build_command_helpers_1.parseLimit)(opts.limit) : DEFAULT_LIST_LIMIT;
        const builds = await buildController.listBuilds(limit);
        if (!opts.json) {
            ui.emptyLine();
            ui.info(cli_shared_1.Text.build.list.listingBuilds);
        }
        const formatCreatedBy = ({ name, email }) => {
            if (name && email)
                return `${name} (${email})`;
            return name;
        };
        ui.table([
            ['tag', chalk_1.default.bold('Tag')],
            ['createdAt', chalk_1.default.bold('Date')],
            ['createdBy', chalk_1.default.bold('Created By')]
        ], builds.map((build) => ({
            ...build,
            createdBy: formatCreatedBy(build.createdBy)
        })), {
            json: opts.json,
            emptyMessage: cli_shared_1.Text.build.list.noBuildsFound
        });
    });
};
const registerBuilds = (parent, { controllers: { buildController } }) => {
    parent
        .option('-f, --no-verify', 'disable pre-build checks')
        .option('-t, --tag <tag>', cli_shared_1.Text.build.buildTag.description)
        .nonInteractiveOption()
        .action(async ({ verify, tag }) => {
        return await buildController.run({ verify, buildTag: tag });
    });
};
const registerCommands = (deps) => {
    const buildCommands = deps.cmd.command(BUILD_COMMAND_NAME).requireAppId().description(cli_shared_1.Text.build.cmd.desc);
    registerBuilds(buildCommands, deps);
    registerBuildsList(buildCommands, deps);
};
exports.registerCommands = registerCommands;
//# sourceMappingURL=register-build-commands.js.map