"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerCommands = exports.parseMajorVersion = void 0;
const cli_shared_1 = require("@forge/cli-shared");
const command_1 = require("./command");
function parseMajorVersion(majorVersionStr, property) {
    if (!/^\d+$/.test(majorVersionStr)) {
        throw new cli_shared_1.ValidationError(cli_shared_1.Text.version.check.error.invalidMajorVersion(property));
    }
    const version = parseInt(majorVersionStr, 10);
    if (version < 1) {
        throw new cli_shared_1.ValidationError(cli_shared_1.Text.version.check.error.invalidMajorVersion(property));
    }
    return version;
}
exports.parseMajorVersion = parseMajorVersion;
const registerDetailsCommands = (parent, { controllers: { versionController } }) => {
    parent
        .command(cli_shared_1.Text.version.check.cmdName)
        .description(cli_shared_1.Text.version.check.desc)
        .requireAppId()
        .environmentOption()
        .nonInteractiveOption()
        .option('-v, --major-version <version>', cli_shared_1.Text.version.check.option.majorVersion)
        .option('--json', cli_shared_1.Text.version.check.option.json)
        .option('-f, --out-file <outFile>', cli_shared_1.Text.version.check.option.outFile)
        .action(async ({ environment, majorVersion, json, outFile, nonInteractive }) => {
        const majorVersionInt = majorVersion ? parseMajorVersion(majorVersion) : undefined;
        await versionController.getAppVersionDetails({
            environment,
            majorVersion: majorVersionInt,
            json,
            outFile,
            nonInteractive
        });
    });
};
const registerListCommands = (parent, { controllers: { versionController } }) => {
    parent
        .command(cli_shared_1.Text.version.list.cmdName)
        .description(cli_shared_1.Text.version.list.desc)
        .requireAppId()
        .environmentOption()
        .nonInteractiveOption()
        .option('--json', cli_shared_1.Text.version.list.option.json)
        .option('-f, --out-file <outFile>', cli_shared_1.Text.version.list.option.outFile)
        .action(async ({ environment, json, outFile, nonInteractive }) => {
        await versionController.getVersionList({ environment, json, outFile, nonInteractive });
    });
};
const registerUpgradeStartCommands = (parent, { controllers: { versionController } }) => {
    parent
        .command(cli_shared_1.Text.version.upgrade.start.cmdName)
        .description(cli_shared_1.Text.version.upgrade.start.desc)
        .requireAppId()
        .environmentOption()
        .nonInteractiveOption()
        .jsonOption()
        .option('-f, --out-file <outFile>', cli_shared_1.Text.version.upgrade.start.option.outFile)
        .option('--from-version <fromVersion>', cli_shared_1.Text.version.upgrade.start.option.version1)
        .option('--to-version <toVersion>', cli_shared_1.Text.version.upgrade.start.option.version2)
        .action(async ({ environment, json, outFile, nonInteractive, fromVersion, toVersion }) => {
        const fromMajorVersion = fromVersion ? parseMajorVersion(fromVersion) : undefined;
        const toMajorVersion = toVersion ? parseMajorVersion(toVersion) : undefined;
        await versionController.createVersionUpgrade({
            environment,
            json,
            outFile,
            nonInteractive,
            fromMajorVersion,
            toMajorVersion
        });
    });
};
const registerUpgradeCancelCommands = (parent, { controllers: { versionController } }) => {
    parent
        .command(cli_shared_1.Text.version.upgrade.cancel.cmdName)
        .description(cli_shared_1.Text.version.upgrade.cancel.desc)
        .environmentOption()
        .nonInteractiveOption()
        .jsonOption()
        .option('--app-upgrade-id <appUpgradeId>', cli_shared_1.Text.version.upgrade.cancel.option.appRolloutId)
        .option('-f, --out-file <outFile>', cli_shared_1.Text.version.upgrade.cancel.option.outFile)
        .action(async ({ environment, json, outFile, appUpgradeId, nonInteractive }) => {
        if (!appUpgradeId) {
            throw new Error(cli_shared_1.Text.version.upgrade.cancel.error.missingCancelVersionUpgradeParameters);
        }
        await versionController.cancelRolloutVersionUpgrade({
            environment,
            json,
            outFile,
            appUpgradeId,
            nonInteractive
        });
    });
};
const registerUpgradeListCommands = (parent, { controllers: { versionController } }) => {
    parent
        .command(cli_shared_1.Text.version.upgrade.list.cmdName)
        .description(cli_shared_1.Text.version.upgrade.list.desc)
        .requireAppId()
        .environmentOption()
        .nonInteractiveOption()
        .jsonOption()
        .option('-f, --out-file <outFile>', cli_shared_1.Text.version.upgrade.list.option.outFile)
        .action(async ({ environment, json, outFile, nonInteractive }) => {
        await versionController.listVersionUpgrades({
            environment,
            json,
            outFile,
            nonInteractive
        });
    });
};
const registerDiffCommands = (parent, { controllers: { versionController, defaultEnvironmentController } }) => {
    parent
        .command(cli_shared_1.Text.version.diff.cmdName)
        .description(cli_shared_1.Text.version.diff.desc)
        .requireAppId()
        .environmentOption()
        .nonInteractiveOption()
        .option('--version1 <version>', cli_shared_1.Text.version.diff.option.version1)
        .option('--version2 <version>', cli_shared_1.Text.version.diff.option.version2)
        .option('--environment1 <environment>', cli_shared_1.Text.version.diff.option.environment1)
        .precondition((0, command_1.environmentPrecondition)('environment1', defaultEnvironmentController))
        .option('--environment2 <environment>', cli_shared_1.Text.version.diff.option.environment2)
        .precondition((0, command_1.environmentPrecondition)('environment2', defaultEnvironmentController))
        .option('-f, --out-file <outFile>', cli_shared_1.Text.version.diff.option.outFile)
        .action(async ({ environment, version1, version2, outFile, environment1, environment2 }) => {
        if (!version1 || !version2) {
            throw new cli_shared_1.ValidationError(cli_shared_1.Text.version.diff.error.noVersionProvided);
        }
        const version1Int = parseMajorVersion(version1, '--version1');
        const version2Int = parseMajorVersion(version2, '--version2');
        await versionController.getAppVersionDiff({
            environment,
            version1: version1Int,
            version2: version2Int,
            outFile,
            environment1,
            environment2
        });
    });
};
const registerCommands = (deps) => {
    const { cmd } = deps;
    const version = cmd.command(cli_shared_1.Text.version.cmd.cmdName).description(cli_shared_1.Text.version.cmd.desc);
    const upgrade = version.command(cli_shared_1.Text.version.upgrade.cmd.cmdName).description(cli_shared_1.Text.version.upgrade.cmd.desc);
    registerDetailsCommands(version, deps);
    registerDiffCommands(version, deps);
    registerListCommands(version, deps);
    registerUpgradeStartCommands(upgrade, deps);
    registerUpgradeListCommands(upgrade, deps);
    registerUpgradeCancelCommands(upgrade, deps);
};
exports.registerCommands = registerCommands;
//# sourceMappingURL=register-version-commands.js.map