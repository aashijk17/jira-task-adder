"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerCommands = exports.parseMajorVersion = void 0;
const cli_shared_1 = require("@forge/cli-shared");
function parseMajorVersion(majorVersionStr) {
    if (!/^\d+$/.test(majorVersionStr)) {
        throw new cli_shared_1.ValidationError(cli_shared_1.Text.eligibility.cmd.error.invalidMajorVersion);
    }
    return parseInt(majorVersionStr, 10);
}
exports.parseMajorVersion = parseMajorVersion;
const registerEligibilityCommands = (parent, { controllers: { eligibilityController } }) => {
    parent
        .command(cli_shared_1.Text.eligibility.cmd.cmdName)
        .description(cli_shared_1.Text.eligibility.cmd.desc)
        .requireAppId()
        .environmentOption()
        .nonInteractiveOption('--environment')
        .option('-v, --major-version [version]', cli_shared_1.Text.eligibility.cmd.option.majorVersion)
        .action(async ({ environment, majorVersion }) => {
        const majorVersionInt = majorVersion ? parseMajorVersion(majorVersion) : undefined;
        await eligibilityController.checkRoaEligibility({ environment, majorVersion: majorVersionInt });
    });
};
const registerCommands = (deps) => {
    const { cmd } = deps;
    registerEligibilityCommands(cmd, deps);
};
exports.registerCommands = registerCommands;
//# sourceMappingURL=register-eligibility-commands.js.map