import { LintService } from '../../service/lint-service';
import { BuildView } from '../view/build-view';
import { ConfigFile, ErrorAnalytics, HiddenError } from '@forge/cli-shared';
import { PackageUploadDeployCommand } from '../../deploy';
import { BuildService } from '../../service/build-service';
interface BuildOptions {
    verify: boolean;
    buildTag?: string;
}
export declare class BuildLintFailureError extends HiddenError {
    private readonly scopes;
    constructor(scopes: string[]);
    getAttributes(): ErrorAnalytics;
    isUserError(): boolean;
}
export declare class ManifestEnvironmentVariablesError extends Error {
    constructor(message: string);
    isUserError(): boolean;
}
export declare class BuildController {
    private readonly buildView;
    private readonly lintService;
    private readonly configFile;
    private readonly nodePackageUploadDeployCommand;
    private readonly buildService;
    constructor(buildView: BuildView, lintService: LintService, configFile: ConfigFile, nodePackageUploadDeployCommand: PackageUploadDeployCommand, buildService: BuildService);
    run({ verify, buildTag }: BuildOptions): Promise<void>;
    listBuilds(limit?: number): Promise<import("../../service/build-service").BuildByApp[]>;
    private verifyPreBuild;
    private checkForUIKit1Modules;
    private checkForManifestVariables;
}
export {};
//# sourceMappingURL=build-controller.d.ts.map