"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerCommands = exports.registerListInstallationsCommand = void 0;
const cli_shared_1 = require("@forge/cli-shared");
const shared_1 = require("../installations/shared");
const uninstall_command_helpers_1 = require("./uninstall-command-helpers");
const semver_1 = require("semver");
const COMMAND_NAME = 'install';
const registerInstallAppCommand = ({ cmd, controllers: { installController } }) => {
    cmd
        .requireAppId()
        .environmentOption()
        .contextOption()
        .option('--upgrade', cli_shared_1.Text.install.optionUpgrade, false)
        .option('--confirm-scopes', cli_shared_1.Text.install.optionConfirmScopes, false)
        .option('-l, --license [license]', cli_shared_1.Text.install.optionLicense)
        .option('--license-modes [licenseModes...]', cli_shared_1.Text.install.optionLicenseModes)
        .option('--users-with-access [user...]', cli_shared_1.Text.install.optionUsersWithAccess)
        .option('--major-version <majorVersion>', cli_shared_1.Text.install.optionMajorVersion)
        .nonInteractiveOption('--site', '--product', '--environment')
        .description(cli_shared_1.Text.install.cmd.description)
        .action(async ({ environment, site, product, upgrade, confirmScopes, license, licenseModes, usersWithAccess, nonInteractive, majorVersion }) => {
        await installController.run({
            environment,
            site,
            products: product ? [product] : [],
            upgrade,
            confirmScopes,
            license,
            licenseModes,
            usersWithAccess,
            nonInteractive,
            majorVersion
        });
    });
};
const LIST_COMMAND_NAME = 'list';
const registerListInstallationsCommand = ({ cmd, ui, services: { installationsService } }) => {
    cmd
        .command(LIST_COMMAND_NAME)
        .requireAppId()
        .jsonOption()
        .description(cli_shared_1.Text.installList.cmd)
        .action(async ({ json }) => {
        const { installations } = await installationsService.listAppInstallations();
        ui.table([
            ['id', 'Installation ID'],
            ['environment', 'Environment'],
            ['site', 'Site'],
            ['product', 'Atlassian apps'],
            ['majorVersion', 'Major Version']
        ], installations.map(({ id, environmentKey, product, secondaryProducts, site, version: { isLatest, version } }) => ({
            id,
            environment: (0, cli_shared_1.environmentToOption)(environmentKey),
            site,
            product: (0, cli_shared_1.productsDisplayName)(product, secondaryProducts),
            majorVersion: `${(0, semver_1.major)(version).toString()} ${cli_shared_1.Text.install.booleanToScope(isLatest)}`
        })), {
            json,
            emptyMessage: cli_shared_1.Text.installList.noInstallations,
            preMessage: cli_shared_1.Text.installList.banner
        });
    });
};
exports.registerListInstallationsCommand = registerListInstallationsCommand;
const registerUninstallCommand = (deps) => {
    const { cmd, ui, services: { installationsService } } = deps;
    cmd
        .command('uninstall')
        .contextOption()
        .environmentOption()
        .requireAppId()
        .description(cli_shared_1.Text.uninstall.cmd.desc)
        .action(async ({ site, environment, product }) => {
        if (site && product) {
            const installation = await installationsService.findOnlyMatchingInstallation({
                site,
                product,
                environment
            });
            ui.info(cli_shared_1.Text.uninstall.info);
            ui.info(cli_shared_1.Text.ctrlC);
            ui.emptyLine();
            const context = (0, uninstall_command_helpers_1.getInstallationContext)(installation, product);
            await (0, uninstall_command_helpers_1.performSingleUninstall)(installation.id, context, deps);
        }
        else {
            const { installations } = await installationsService.listAppInstallations({ site, environment, product });
            if (!installations.length) {
                ui.info(cli_shared_1.Text.installList.noInstallations);
                return;
            }
            const filteredInstallations = installations.filter((install) => install.product !== 'identity' && install.product !== 'jira-servicedesk');
            const options = (0, uninstall_command_helpers_1.getMultiChoiceOptionsForUninstall)(filteredInstallations);
            const selectedSitesIndexes = await ui.promptForTable(cli_shared_1.Text.uninstall.interactive.desc, cli_shared_1.Text.uninstall.interactive.progressInfo, ['Environment', 'Site', 'Atlassian app'], options);
            const [firstUninstall, secondUninstall, hadAutoSelected] = (0, uninstall_command_helpers_1.getInstallationsFromSelection)(options, selectedSitesIndexes, filteredInstallations);
            if (hadAutoSelected) {
                const confirmation = await ui.confirm(cli_shared_1.Text.uninstall.interactive.confirmOptionalContexts);
                if (!confirmation) {
                    return;
                }
            }
            const selectedSites = new Set(firstUninstall.map(({ site }) => site).concat(secondUninstall.map(({ site }) => site)));
            const remainingApps = options
                .filter((_, index) => !selectedSitesIndexes.includes(index))
                .map(({ extra }) => filteredInstallations[extra.installationIdx]);
            firstUninstall.push(...(0, shared_1.getHangingIdentityInstallationsFromSite)(installations, remainingApps, selectedSites));
            if (firstUninstall.length > 1 || secondUninstall.length > 0) {
                await (0, uninstall_command_helpers_1.performMultipleUninstalls)(firstUninstall, secondUninstall, deps);
            }
            else if (firstUninstall.length === 1) {
                await (0, uninstall_command_helpers_1.performSingleUninstall)(firstUninstall[0].id, firstUninstall[0].context, deps);
            }
        }
    });
};
const DEPRECATED_LIST_COMMAND = 'install:list';
const registerCommands = ({ cmd, ...deps }) => {
    const install = cmd.command(COMMAND_NAME).description(cli_shared_1.Text.variables.description);
    registerUninstallCommand({ cmd, ...deps });
    cmd.deprecatedCommand(DEPRECATED_LIST_COMMAND, `${COMMAND_NAME} ${LIST_COMMAND_NAME}`, deps.controllers.stubController);
    registerInstallAppCommand({ cmd: install, ...deps });
    (0, exports.registerListInstallationsCommand)({ cmd: install, ...deps });
};
exports.registerCommands = registerCommands;
//# sourceMappingURL=register-installation-commands.js.map