import { VersionView } from '../view/version-view';
import { VersionService } from '../../service/version-service';
interface AppVersionOptions {
    environment: string;
    majorVersion?: number;
    json?: boolean;
    outFile?: string;
    nonInteractive?: boolean;
}
interface AppVersionDiffOptions {
    environment: string;
    version1: number;
    version2: number;
    environment1?: string;
    environment2?: string;
    outFile?: string;
}
interface AppVersionListOptions {
    environment: string;
    json?: boolean;
    outFile?: string;
    nonInteractive?: boolean;
}
interface CreateAppVersionUpgradeOptions {
    environment: string;
    json?: boolean;
    outFile?: string;
    nonInteractive?: boolean;
    fromMajorVersion?: number;
    toMajorVersion?: number;
}
interface ListAppVersionUpgradeOptions {
    environment: string;
    json?: boolean;
    outFile?: string;
    nonInteractive?: boolean;
}
interface CancelAppVersionUpgradeOptions {
    environment: string;
    json?: boolean;
    outFile?: string;
    appUpgradeId: string;
    nonInteractive?: boolean;
}
export declare class VersionController {
    private readonly versionService;
    private readonly view;
    constructor(versionService: VersionService, view: VersionView);
    getAppVersionDiff({ environment, version1, version2, outFile, environment1, environment2 }: AppVersionDiffOptions): Promise<void>;
    getAppVersionDetails({ environment, majorVersion, json, outFile, nonInteractive }: AppVersionOptions): Promise<void>;
    private writeToFile;
    private displayInJson;
    private displayDetailsInTable;
    private displayDiffInText;
    private writeDiffToFile;
    getVersionList({ environment, json, outFile, nonInteractive }: AppVersionListOptions): Promise<void>;
    createVersionUpgrade({ environment, json, outFile, nonInteractive, fromMajorVersion, toMajorVersion }: CreateAppVersionUpgradeOptions): Promise<void>;
    listVersionUpgrades({ environment, json, outFile, nonInteractive }: ListAppVersionUpgradeOptions): Promise<void>;
    cancelRolloutVersionUpgrade({ environment, json, outFile, appUpgradeId, nonInteractive }: CancelAppVersionUpgradeOptions): Promise<void>;
    private getSelectedVersion;
}
export {};
//# sourceMappingURL=version-controller.d.ts.map