/// <reference types="node" />
import { AppConfigProvider, AppEnvironmentType, ConfigFile, StatsigService, SupportedProduct, SupportedProductsService, UI } from '@forge/cli-shared';
import { URL } from 'url';
import { InstallAppSiteCommand } from '../../installations/install-app-site';
import { InstallationService } from '../../service/installation-service';
import { InstallView } from '../view/install-view';
interface InstallViewProps {
    environment: string;
    site?: URL;
    products?: SupportedProduct[];
    upgrade: boolean;
    nonInteractive?: boolean;
    confirmScopes: boolean;
    license?: string;
    licenseModes?: string[];
    usersWithAccess?: string[];
    majorVersion?: string;
}
export declare class NoDeploymentError extends Error {
    constructor(environment: string);
}
export declare class InstallController {
    private readonly appConfigProvider;
    private readonly configFile;
    private readonly ui;
    private readonly installAppSiteCommand;
    private readonly installationService;
    private readonly installView;
    private readonly supportedProductsService;
    protected readonly statsigService: StatsigService;
    constructor(appConfigProvider: AppConfigProvider, configFile: ConfigFile, ui: UI, installAppSiteCommand: InstallAppSiteCommand, installationService: InstallationService, installView: InstallView, supportedProductsService: SupportedProductsService, statsigService: StatsigService);
    private securityPrompt;
    private installOrUpgrade;
    private promptForProducts;
    private promptForSite;
    private getAppInstallations;
    private getInstallationToUpgrade;
    private getUniqueInstallationProductsFromScopes;
    private isValidLicense;
    private validateLicenseOption;
    private checkForUIKit1Modules;
    private getVersionPermissionsByMajorVersion;
    run({ environment, site, products, upgrade, confirmScopes, license, licenseModes, usersWithAccess, nonInteractive, majorVersion }: InstallViewProps): Promise<void>;
    private getEntitlementOfferingName;
    isNonProductionAppInstallationAttempt(site: URL, products: SupportedProduct[], environmentType: AppEnvironmentType): Promise<boolean>;
    private checkProductEntitlementOffering;
    private getAllScopeKeys;
    private extractManifestData;
    private getXPAProductsAndSite;
    private checkForMultiProductScopes;
    private convertListScope;
    private isValidLicenseMode;
    private validateLicenseModes;
    private validateUsersWithAccess;
    private validateEcosystemAppInstallationOverridesInput;
    private checkRequiredInstallationExists;
}
export {};
//# sourceMappingURL=install-controller.d.ts.map