"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildGraphqlClient = exports.PAGE_SIZE = void 0;
const cli_shared_1 = require("@forge/cli-shared");
exports.PAGE_SIZE = 100;
class BuildGraphqlClient {
    graphqlClient;
    constructor(graphqlClient) {
        this.graphqlClient = graphqlClient;
    }
    async getAllBuildsByApp(appId, limit) {
        const query = `
      query getBuildsByApp(
        $appId: ID!
        $last: Int
        $before: String
      ) {
        buildsByApp(
          appId: $appId
          last: $last
          before: $before
        ) {
          nodes {
            createdAt
            tag
            createdByUser {
              name
              ... on AtlassianAccountUser {
                email
              }
              ... on CustomerUser {
                email
              }
            }
          }
          pageInfo {
            hasPreviousPage
            endCursor
          }
          totalCount
        }
      }
    `;
        let hasPreviousPage = true;
        let cursor = undefined;
        const output = [];
        while (hasPreviousPage && (!limit || output.length < limit)) {
            const remainingLimit = limit ? limit - output.length : exports.PAGE_SIZE;
            const _limit = remainingLimit > 0 ? Math.min(exports.PAGE_SIZE, remainingLimit) : exports.PAGE_SIZE;
            const result = await this.graphqlClient.query(query, {
                appId,
                last: _limit,
                before: cursor
            });
            if (!result.buildsByApp?.nodes || !result.buildsByApp?.pageInfo) {
                throw new cli_shared_1.MissingAppError();
            }
            const { nodes, pageInfo } = result.buildsByApp;
            for (const node of nodes) {
                if (node) {
                    if (!node.createdByUser?.name) {
                        throw new cli_shared_1.MissingCreatorError(`Failed to fetch creator information for build with tag "${node.tag}", please try again later.`);
                    }
                    output.push({
                        createdAt: node.createdAt,
                        tag: node.tag,
                        createdBy: {
                            name: node.createdByUser?.name,
                            email: node.createdByUser?.email || null
                        }
                    });
                    if (limit && output.length >= limit) {
                        break;
                    }
                }
            }
            hasPreviousPage = pageInfo.hasPreviousPage;
            cursor = pageInfo.endCursor;
        }
        return output;
    }
}
exports.BuildGraphqlClient = BuildGraphqlClient;
//# sourceMappingURL=graphql-client.js.map