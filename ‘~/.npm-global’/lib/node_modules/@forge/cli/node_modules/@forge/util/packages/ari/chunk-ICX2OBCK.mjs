import {
  GitlabGitlabRemoteLinkAriResourceOwner,
  GitlabGitlabRemoteLinkAriResourceType
} from "./chunk-7F6GATTB.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/gitlab.gitlab/remote-link/manifest.ts
var gitlabGitlabRemoteLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: GitlabGitlabRemoteLinkAriResourceOwner,
  resourceType: GitlabGitlabRemoteLinkAriResourceType,
  resourceIdSlug: "{category}/{remoteLinkId}",
  resourceIdSegmentFormats: {
    category: /[a-zA-Z]+/,
    // eslint-disable-line no-useless-escape
    remoteLinkId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/gitlab.gitlab/remote-link/index.ts
var GitlabGitlabRemoteLinkAri = class _GitlabGitlabRemoteLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._category = opts.resourceIdSegmentValues.category, this._remoteLinkId = opts.resourceIdSegmentValues.remoteLinkId;
  }
  get category() {
    return this._category;
  }
  get remoteLinkId() {
    return this._remoteLinkId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: gitlabGitlabRemoteLinkAriStaticOpts.qualifier,
      platformQualifier: gitlabGitlabRemoteLinkAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: gitlabGitlabRemoteLinkAriStaticOpts.resourceOwner,
      resourceType: gitlabGitlabRemoteLinkAriStaticOpts.resourceType,
      resourceId: `${opts.category}/${opts.remoteLinkId}`,
      resourceIdSegmentValues: {
        category: opts.category,
        remoteLinkId: opts.remoteLinkId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, gitlabGitlabRemoteLinkAriStaticOpts);
    return new _GitlabGitlabRemoteLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, gitlabGitlabRemoteLinkAriStaticOpts);
    return new _GitlabGitlabRemoteLinkAri(opts);
  }
  getVariables() {
    return {
      category: this.category,
      remoteLinkId: this.remoteLinkId
    };
  }
};

export {
  GitlabGitlabRemoteLinkAri
};
