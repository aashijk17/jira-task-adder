import {
  AsanaAsanaRemoteLinkAriResourceOwner,
  AsanaAsanaRemoteLinkAriResourceType
} from "./chunk-TOTM77AA.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/asana.asana/remote-link/manifest.ts
var asanaAsanaRemoteLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: AsanaAsanaRemoteLinkAriResourceOwner,
  resourceType: AsanaAsanaRemoteLinkAriResourceType,
  resourceIdSlug: "task/{taskId}",
  resourceIdSegmentFormats: {
    taskId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/asana.asana/remote-link/index.ts
var AsanaAsanaRemoteLinkAri = class _AsanaAsanaRemoteLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._taskId = opts.resourceIdSegmentValues.taskId;
  }
  get taskId() {
    return this._taskId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: asanaAsanaRemoteLinkAriStaticOpts.qualifier,
      platformQualifier: asanaAsanaRemoteLinkAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: asanaAsanaRemoteLinkAriStaticOpts.resourceOwner,
      resourceType: asanaAsanaRemoteLinkAriStaticOpts.resourceType,
      resourceId: `task/${opts.taskId}`,
      resourceIdSegmentValues: {
        taskId: opts.taskId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, asanaAsanaRemoteLinkAriStaticOpts);
    return new _AsanaAsanaRemoteLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, asanaAsanaRemoteLinkAriStaticOpts);
    return new _AsanaAsanaRemoteLinkAri(opts);
  }
  getVariables() {
    return {
      taskId: this.taskId
    };
  }
};

export {
  AsanaAsanaRemoteLinkAri
};
