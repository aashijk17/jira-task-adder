import {
  ConnectionRegistryLinkAriResourceOwner,
  ConnectionRegistryLinkAriResourceType
} from "./chunk-WZAFZVQ2.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/connection-registry/link/manifest.ts
var connectionRegistryLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: ConnectionRegistryLinkAriResourceOwner,
  resourceType: ConnectionRegistryLinkAriResourceType,
  resourceIdSlug: "{linkId}",
  resourceIdSegmentFormats: {
    linkId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/connection-registry/link/index.ts
var ConnectionRegistryLinkAri = class _ConnectionRegistryLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._linkId = opts.resourceIdSegmentValues.linkId;
  }
  get linkId() {
    return this._linkId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: connectionRegistryLinkAriStaticOpts.qualifier,
      platformQualifier: connectionRegistryLinkAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: connectionRegistryLinkAriStaticOpts.resourceOwner,
      resourceType: connectionRegistryLinkAriStaticOpts.resourceType,
      resourceId: `${opts.linkId}`,
      resourceIdSegmentValues: {
        linkId: opts.linkId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, connectionRegistryLinkAriStaticOpts);
    return new _ConnectionRegistryLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, connectionRegistryLinkAriStaticOpts);
    return new _ConnectionRegistryLinkAri(opts);
  }
  getVariables() {
    return {
      linkId: this.linkId
    };
  }
};

export {
  ConnectionRegistryLinkAri
};
