import chalk from 'chalk';
import { URL } from 'url';
import { AppEnvironmentType } from '../graphql/graphql-types';
import { ClientRequest } from 'http';
export interface ListScope {
    name: string;
    requiresInteractiveConsent?: boolean;
}
export declare function itemList(items: string[], indent?: string): string;
export declare const capitalise: (word: string) => string;
export declare const Text: {
    buildTerminalLink: (text: string) => string;
    go: (link: string) => string;
    error: {
        noKeytar: string;
        noTokenStored: string;
        keytarAccessError: {
            other: (message: string) => string;
            mac: (message: string) => string;
            linux: (message: string) => string;
            windows: (message: string) => string;
        };
        outdatedCLIVersion: (installed: string, latest: string) => string;
        outdatedNodeVersion: (compatibleNodeVersion: string, currentNodeVersion: string) => string;
        missingProductNameValue: string;
        invalidContext: (validContexts: string[]) => string;
        missingSiteUrlValue: string;
        invalidSite: string;
        invalidWorkspace: string;
        invalidInstallationContext: string;
        invalidTokenInKeytar: string;
        invalidTokenInEnv: (instructionsUrl: string, emailVar: string, tokenVar: string) => string;
        promptInputRequired: string;
        noExecutableFile: string;
        resourceDefinitionMissing: (resourceKeys: string[]) => string;
        resourceDirectoryMissing: (resourceKey: string, directory: string) => string;
        resourceDirectoryEmpty: (resourceKey: string, directory: string) => string;
        templateFetchFailed: (message: string) => string;
        handlerFormat: (handler: string) => string;
        licenseOverrideErrors: {
            prodSupport: string;
            invalid: string;
            empty: string;
        };
        licenseModesOverrideErrors: {
            prodEnvNotSupported: string;
            empty: string;
            invalid: string;
        };
        userWithAccessOverrideErrors: {
            prodEnvNotSupported: string;
            empty: string;
            countSize: (maxSizeOfUsersWithAccess: number) => string;
        };
        multipleMatchingInstallations: string;
        partialInstallation: (failedProductInstallations: string[]) => string;
        invalidServicePort: (serviceKey: string) => string;
        environmentIsNotDefined: (envKey: string) => string;
    };
    warning: {
        plaintextCredentialsFound: (url: string) => string;
        plaintextCredentialsMigrated: string;
        plaintextCredentialsNotMigrated: string;
        unsupportedNodeVersion: (_userNodeVersion: string, supportedNodeVersions: string) => string;
        deprecation: {
            uikit: (modules: string[]) => string;
        };
    };
    maxSizeOfUsersWithAccess: number;
    installationContext: {
        overviewProduct: string;
        promptProduct: string;
        promptOptionalProducts: string;
        overviewSite: string;
        overviewWorkspace: string;
        promptSite: string;
        promptWorkspace: string;
    };
    upgradeContext: {
        overview: string;
        promptInstallation: string;
    };
    optionSite: string;
    optionProduct: (supportedProducts: string[]) => string;
    optionVerbose: string;
    optionJson: string;
    invalidCmd: (command: string) => string;
    invalidCmdHelp: string;
    rerunningWithVerbose: string;
    ctrlC: string;
    graphQL: {
        request: (url: string, query: string, variables: string) => string;
        response: (result: string, requestId?: string) => string;
        error: string;
        outdatedClientVersion: string;
    };
    hostedResources: {
        error: (errorMessage: string) => string;
        missingEntrypoint: string;
        missingEntrypointWithResourceDetails: (resourceKey: string, directory: string) => string;
        malformedEntrypoint: string;
        malformedEntrypointWithKey: (resourceKey: string) => string;
        lambdaTimeout: string;
    };
    bundle: {
        detectedChanges: string;
        errors: (errors: string[]) => string;
        failed: string;
        finished: string;
        warnings: (warnings: string[]) => string;
    };
    config: {
        missing: string;
        invalid: string;
        manifest: {
            invalid: string;
            error: (errorMessage: string, additionalInfo?: string) => string;
        };
    };
    autocomplete: {
        cmd: {
            desc: string;
        };
        confirmInstalling: string;
        installing: string;
        uninstalling: string;
        postinstall: string;
        error: {
            badArg: (arg: string | undefined) => string;
            unsupportedShell: string;
            unsupportedNodeVersion: string;
        };
    };
    login: {
        cmd: string;
        optionEmail: string;
        optionToken: string;
        introText: string;
        promptEmail: string;
        url: (link: string) => string;
        promptToken: string;
        checking: string;
        nextStep: string;
        success: (name: string) => string;
        error: string;
        scopedToken: {
            error: string;
        };
    };
    logout: {
        cmd: string;
        loggedOut: string;
    };
    whoami: {
        cmd: string;
        success: {
            containerToken: (ciTokenKey: string) => string;
            personalCredentials: (email: string, name: string, accountId: string) => string;
        };
        error: {
            personalCredentialsEnv: (emailKey: string, apiTokenKey: string) => string;
            personalCredentialsKeytar: string;
        };
    };
    feedback: {
        cmd: string;
        description: string;
        success: string;
        action: {
            start: string;
            enterFeedbackPrompt: string;
            sendingFeedbackProgress: string;
            error: string;
            success: string;
        };
    };
    create: {
        cmd: {
            desc: string;
            start: string;
            success: (appName: string) => string;
            successDetails: (directory: string, validEnvironmentOptions: string[]) => string;
        };
        intro: (givenDirectory: string) => string;
        introWithCurrentDirectory: (currentDirectory: string) => string;
        optionTemplate: string;
        optionDirectory: string;
        optionSpace: string;
        overviewAppName: string;
        overviewTemplates: string;
        waitTemplates: string;
        promptName: string;
        promptCategory: string;
        promptTemplate: string;
        promptProduct: string;
        taskTemplate: {
            title: string;
            downloading: (template: string) => string;
            extracting: string;
        };
        taskRegister: string;
        taskCreateEnvironments: string;
        taskPackages: string;
        error: {
            dirtyDirectory: string;
            app: {
                creation: string;
            };
            directory: {
                exists: (path: string) => string;
            };
            name: {
                tooLong: (max: number) => string;
            };
            template: {
                download: (template: string) => string;
                notFound: (template: string) => string;
                noTemplates: string;
                unexpectedArchiveFormat: string;
            };
            packages: {
                installFail: string;
            };
        };
    };
    devSpace: {
        fetching: string;
        documentationLink: string;
        noSpacesFound: (command: string, documentationLink: string) => string;
        selectPrompt: string;
        assignmentInfo: string;
        selectionPrompt: (documentationLink: string) => string;
        createNewOption: string;
        createContinuePrompt: string;
        createNewSpaceInfo: (documentationLink: string) => string;
        createMessage: string;
        createPrompt: string;
        nameRequired: string;
        createInProgress: string;
        contributingToSpace: (name: string) => string;
        assigningToSpace: (name: string) => string;
        createdAndContributing: (name: string) => string;
        invalidSpaceName: (spaceName: string) => string;
        invalidSpaceId: (spaceId: string) => string;
        error: {
            fetchOrSelect: (errorMessage: string) => string;
            create: (errorMessage: string) => string;
            selectedNotFound: string;
            nameAlreadyExists: string;
        };
        terms: {
            agreement: string;
            checkbox: string;
            links: {
                devTerms: string;
                privacy: string;
                pricing: string;
            };
            pricing: (appName: string) => string;
            acceptPrompt: string;
            accepted: (command: string) => string;
        };
    };
    register: {
        intro: string;
        cmd: {
            desc: string;
            start: string;
            success: (appName: string) => string;
            successDetails: (validEnvironmentOptions: string[]) => string;
        };
        confirmQuestion: string;
    };
    env: {
        option: string;
        invalid: string;
        developmentOnly: (envKey: string) => string;
        error: {
            appOwnerNotExist: string;
            appNotExist: string;
            envNotExist: (envKey: string) => string;
        };
        displayEnvironment: (envKey: string, envType: AppEnvironmentType) => string;
        warn: {
            envWillBeCreated: (envKey: string) => string;
        };
        confirm: string;
    };
    defaultEnv: {
        info: string;
        prompt: string;
        warn: string;
        confirm: string;
        setSuccess: (envKey: string, envType: AppEnvironmentType) => string;
        createAndSetSuccess: (envKey: string, envType: AppEnvironmentType) => string;
        settingsInfo: string;
    };
    varsSet: {
        cmd: {
            desc: string;
            start: string;
            success: string;
            deployTip: (environmentOption?: string) => string;
        };
        overview: (environment: string, environmentType: AppEnvironmentType) => string;
        encryptInfo: string;
        promptEncrypt: string;
        keyInfo: string;
        promptKey: string;
        promptValue: string;
        optionSecret: string;
        yes: string;
        no: string;
    };
    varsUnset: {
        cmd: {
            desc: string;
            start: (environment: string, envType: AppEnvironmentType) => string;
            success: (key: string) => string;
        };
    };
    varsList: {
        hint: string;
        cmd: string;
        empty: (environment: string, envType: AppEnvironmentType) => string;
        encryptedValue: string;
        overview: (environment: string, envType: AppEnvironmentType) => string;
        postfix: string;
    };
    providers: {
        desc: string;
    };
    configureProvider: {
        cmd: {
            desc: string;
            start: string;
            success: string;
        };
        overview: (environment: string) => string;
        providerKeyInfo: string;
        noProviders: string;
        promptProviderKey: string;
        optionClientSecret: string;
        promptClientSecret: string;
    };
    environment: {
        desc: string;
    };
    createEnvironment: {
        cmd: {
            desc: string;
            start: string;
            success: (envKey: string, envType: AppEnvironmentType) => string;
        };
        overview: string;
        promptEnvironmentKey: string;
        successMessage: string;
        optionEnvironmentKey: string;
    };
    listEnvironment: {
        cmd: {
            desc: string;
        };
        overview: string;
    };
    deleteEnvironment: {
        cmd: {
            desc: string;
            start: string;
        };
        overview: string;
        info: string;
        prompt: string;
        confirmationInfo: string;
        promptConfirmation: string;
        individualSuccessMessage: (envKey: string, envType: AppEnvironmentType) => string;
        successMessage: string;
        optionEnvironmentKey: string;
        warningMessage: string;
        noEnvironmentMessage: string;
        hasInstallationError: (envKey: string) => string;
    };
    storage: {
        cmd: {
            desc: string;
        };
    };
    entitiesIndexes: {
        cmd: {
            desc: string;
        };
    };
    entitiesIndexesList: {
        cmd: {
            desc: string;
        };
        missingEntities: string;
    };
    artifact: {
        error: {
            noDeployUrl: string;
            noPresignedUrls: string;
            noUploadId: string;
            noManifestInZip: (manifestFilename: string) => string;
            noManifestAtPath: (path: string) => string;
            empty: string;
            invalidYaml: (manifestFilename: string) => string;
        };
    };
    upload: {
        error: {
            notFound: (path: string) => string;
            empty: (path: string) => string;
            status: (status: number, responseBody: string) => string;
        };
    };
    eligibility: {
        cmd: {
            cmdName: string;
            desc: string;
            option: {
                majorVersion: string;
            };
            error: {
                invalidMajorVersion: string;
            };
            start: string;
            end: string;
            status: {
                notEligible: (envKey: string, envType: AppEnvironmentType, version: string, reason: string[]) => string;
                eligible: (envKey: string, envType: AppEnvironmentType, version: string) => string;
            };
            rule: {
                conversion: (rule: string) => string;
            };
        };
    };
    version: {
        cmd: {
            cmdName: string;
            desc: string;
        };
        diff: {
            cmdName: string;
            error: {
                noVersionProvided: string;
            };
            option: {
                version1: string;
                version2: string;
                environment1: string;
                environment2: string;
                outFile: string;
            };
            desc: string;
            start: string;
            end: string;
            details: {
                banner: (input: {
                    env1Key: string;
                    env2Key?: string;
                    env1Type: AppEnvironmentType;
                    env2Type?: AppEnvironmentType;
                    version1: number;
                    version2: number;
                }) => string;
            };
        };
        check: {
            cmdName: string;
            option: {
                majorVersion: string;
                json: string;
                outFile: string;
            };
            error: {
                invalidMajorVersion: (property?: string) => string;
            };
            desc: string;
            start: string;
            end: string;
            details: {
                banner: (envKey: string, envType: AppEnvironmentType, version: number) => string;
                prompt: {
                    options: {
                        banner: string;
                        choices: {
                            all: string;
                            manual: string;
                        };
                    };
                    properties: {
                        banner: string;
                        info: string;
                        headers: string[];
                        descriptions: {
                            scopes: string;
                            egress: string;
                            analytics: string;
                            policies: string;
                            functions: string;
                            modules: string;
                            remotes: string;
                            connectKeys: string;
                            license: string;
                        };
                    };
                };
                writeToFile: (file: string) => string;
                license: (requiresLicense: boolean) => string;
            };
        };
        list: {
            cmdName: string;
            option: {
                json: string;
                outFile: string;
            };
            desc: string;
            start: string;
            end: string;
            details: {
                banner: (envKey: string, envType: AppEnvironmentType, versions: number) => string;
            };
        };
        upgrade: {
            cmd: {
                cmdName: string;
                desc: string;
            };
            start: {
                cmdName: string;
                option: {
                    json: string;
                    outFile: string;
                    version1: string;
                    version2: string;
                };
                desc: string;
                overViewVersionTable: (versions: number, environment: string) => string;
                promptVersionTable: string;
                selectTargetVersionToUpgrade: (installations?: number) => string;
                error: {
                    missingVersionUpgradeParameters: string;
                    appVersionRolloutRunning: string;
                    permissionDeniedError: (fromVersion: string, toVersion: string, environmentKey: string) => string;
                    noUpgradePathAvailable: (fromVersion: string, toVersion: string) => string;
                    inValidVersionNumberSpecified: (fromVersion: string, toVersion: string) => string;
                    inValidMajorVersionNumberSpecified: (majorVersion: number) => string;
                    noTargetVersionAvailable: string;
                    tooManyRequestsFromAccount: string;
                    tooManyRequestsGlobally: string;
                };
                appVersionRolloutSuccess(appRolloutVersionId: string | undefined): string;
                warningMessage: (sourceVersionId: string, targetVersionId: string, installations?: number) => string;
                promptConfirmation: string;
            };
            list: {
                cmdName: string;
                option: {
                    outFile: string;
                    majorVersion: string;
                };
                desc: string;
                start: string;
                end: string;
                details: {
                    banner: (envKey: string, envType: AppEnvironmentType | undefined, updates: number) => string;
                };
            };
            cancel: {
                cmdName: string;
                option: {
                    json: string;
                    outFile: string;
                    appRolloutId: string;
                };
                desc: string;
                error: {
                    missingCancelVersionUpgradeParameters: string;
                    permissionDeniedError(environmentKey: string): string;
                    noUpdateInProgress(environmentKey: string): string;
                    inValidRolloutIdSpecified: string;
                };
                appVersionRolloutCancelSuccess(appRolloutVersionId: string): string;
                warningMessage: (appRolloutVersionId: string, sourceVersionId: string, targetVersionId: string, installationComplete?: number, totalInstallations?: number) => string;
                promptConfirmation: string;
            };
        };
    };
    build: {
        cmd: {
            desc: string;
            startNotice: string;
            start: string;
            success: (buildTag: string) => string;
        };
        buildTag: {
            description: string;
            error: {
                invalidBuildTag: (maxLength: number) => string;
                emptyBuildTag: string;
                invalidBuildTagFormat: string;
            };
        };
        taskLint: {
            lintError: string;
            lintWarning: (numWarnings: number) => string;
        };
        list: {
            cmd: {
                desc: string;
            };
            limit: (defaultLimit: number) => string;
            listingBuilds: string;
            noBuildsFound: string;
            error: {
                invalidLimit: string;
            };
        };
        manifestVariables: {
            error: string;
        };
    };
    deploy: {
        cmd: {
            desc: string;
            start1: (envKey: string, envType: AppEnvironmentType, buildTag?: string) => string;
            start2: (appName: string, envKey: string, envType: AppEnvironmentType, buildTag?: string) => string;
            success: string;
            successDetails: (appName: string, envKey: string, envType: AppEnvironmentType, buildTag?: string) => string;
            distributePageLink: (appId: string) => string;
        };
        taskLint: {
            lintError: string;
            lintWarning: (numWarnings: number) => string;
        };
        hasNoAppInstallationsForEnv: {
            hasNoAppInstallationsForEnvError: string;
        };
        environmentKey: {
            missingEnvironmentKeyError: string;
        };
        majorVersion: {
            description: string;
            warning: (majorVersion: number) => string;
            confirm: string;
            invalidMajorVersionError: string;
        };
        buildTag: {
            description: string;
        };
        connectKeyChange: {
            continueChange: string;
            continueDelete: string;
            mpacAppConnectKeyChangeAnalyticsError: string;
            mpacAppConnectKeyChangeError: (mpacAppKey: string, connectKey: string) => string;
            connectKeyChangeWarning: (environment: string, migrationKey: string, connectKey: string) => string;
            connectKeyDeleteWarning: (environment: string) => string;
            connectKeyMutationInProductionError: (migrationKey?: string, connectKey?: string) => string;
            connectKeyMutationInProductionAnalyticsError: string;
        };
        taskPackage: {
            title: string;
            packageBundledFiles: string;
            packageFile: (fileName: string, filePath: string | null) => string;
            archiveCreated: (archivePath: string) => string;
        };
        taskUpload: {
            title: string;
            uploadingArchive: (uploadUrl: string) => string;
            uploadingResources: () => string;
        };
        taskDeploy: {
            serverStepStarted: (name: string) => string;
            serverStepFailed: string;
        };
        error: {
            notFound: string;
        };
        outdatedInstallations: string;
        postDeploymentRoaEligibilityFailure: (appVersion: string, envKey: string, envType: AppEnvironmentType) => string;
        postDeploymentRoaEligibilitySuccess: (appVersion: string, envKey: string, envType: AppEnvironmentType) => string;
        listIndexes: (environment: string) => string;
        reindexingInProgress: {
            continueDeployment: string;
            successfulDeployment: string;
        };
        egressURL: {
            error: (message: string) => string;
        };
        crossContext: {
            enableError: string;
            modifyError: string;
        };
    };
    install: {
        cmd: {
            description: string;
            start: (envKey: string, envType: AppEnvironmentType, product: string) => string;
            end: (displayTick: boolean, product: string) => string;
        };
        booleanToScope: (isLatest: boolean) => string;
        alreadyInstalledInRequiredProduct: (product: string) => string;
        installingToRequiredProduct: (product: string) => string;
        installingToOptionalProduct: (product: string) => string;
        installConfirmation: (product: string, site: string) => string;
        bannerSite: string;
        bannerWorkspace: string;
        devAppInstallWarning: string;
        majorVersionIsNotLatest: (versionToInstall: string) => string;
        devAppInstallConfirm: string;
        optionConfirmScopes: string;
        optionUpgrade: string;
        optionLicense: string;
        optionLicenseModes: string;
        optionUsersWithAccess: string;
        optionMajorVersion: string;
        listScopes: (scopes: ListScope[]) => string;
        listEgressAddresses: (egressAddresses: string[]) => string;
        permissionsMismatch: (environment: string) => string;
        multiProductScopesDetected: (productsToInstall: string[], productsToUpgrade: string[], site: string, environment: string) => string;
        promptForPermissionsConfirmation: (permissionsMismatchInDevelopment: boolean) => string;
        success: {
            banner: (envKey: string, envType: AppEnvironmentType, product: string, site: string) => string;
        };
        error: {
            activationIdMissing: (url: string, context: string) => string;
            invalidAtlassianSite: (url: URL) => string;
            invalidWorkspace: (url: URL) => string;
            url: (url: string) => string;
            site: (url: string) => string;
            alreadyInstalledError: string;
            alreadyInstalledErrorWithMajorVersion: (envKey: string, envType: AppEnvironmentType) => string;
            serverSideInstallationError: (message: string) => string;
            noDeploymentFound: (environment: string) => string;
            permissionsDeniedInstructions: (requestId: string, appId: string) => string;
            appendRequestIdToErrorMessage: (message: string | undefined, requestId: string) => string;
            majorVersionNotFound: string;
            majorVersionAndUpgrade: string;
        };
        failedAll: (site: URL, environment: string) => string;
        security: {
            banner: (site: string) => string;
            questions: string[];
            notTrustedApp: {
                warn: (site: string) => string;
                confirmApproval: string;
                corpSecurityHelpdesk: string;
            };
        };
        authorization: {
            banner: string;
            link: (link: string) => string;
            openBrowser: string;
        };
    };
    harmonization: {
        installation: {
            errors: {
                concurrentSync: string;
                placeholderMacroCollision: string;
                placeholderFailedDescriptorValidation: string;
            };
        };
    };
    upgrade: {
        bannerSite: string;
        bannerWorkspace: string;
        cmd: {
            start: (envKey: string, envType: AppEnvironmentType) => string;
            end: (displayTick: boolean) => string;
            error: string;
        };
        listScopes: (scopes: ListScope[]) => string;
        listEgressAddresses: (egressAddresses: string[]) => string;
        permissionsMismatch: (environment: string) => string;
        promptForPermissionsConfirmation: (permissionsMismatchInDevelopment: boolean) => string;
        success: {
            banner: (envKey: string, envType: AppEnvironmentType, product: string, site: string) => string;
        };
        alreadyUpdated: {
            spinnerSite: string;
            spinnerWorkspace: string;
            banner: (environment: string, product: string, site: string) => string;
        };
        error: {
            serverSideInstallationError: (message: string) => string;
        };
    };
    installList: {
        cmd: string;
        banner: string;
        noResourceId: string;
        noCloudId: string;
        noResourceIdInWorkspace: string;
        noInstallations: string;
    };
    deployList: {
        cmd: string;
        banner: string;
        noDeployments: string;
    };
    tunnel: {
        cmd: string;
        optionDebugger: string;
        debuggerPort: string;
        functionHandlers: string;
        preamble: string;
        startingTunnel: (environmentKey: string, envType: AppEnvironmentType) => string;
        startedServer: (port: number, isDebug: boolean) => string;
        selfManagedTunnel: (tunnelUrl: string, port: number) => string;
        startedTunnel: (tunnelUrl: string) => string;
        stoppingTunnel: string;
        stoppedTunnel: string;
        tunnelStatusChange: (status: string) => string;
        functionHandlersMustBeDefined: string;
        debugArgumentNameMismatch: (arg: string) => string;
        invalidDebugStartingPortNumber: (port: string) => string;
        unableToAuthenticateDocker: (errCode: string) => string;
        unableToPullProxySidecarImage: (errMessage: string) => string;
        unableToStartDockerComposeStack: (errMessage: string) => string;
        unableToStopDockerComposeStack: (serviceKey: string, errMessage: string) => string;
        invoke: (requestId: string, handler: string) => string;
        invocationTimeout: (timeout: number) => string;
        customUI: {
            fileServed: (filename: string, resourceKey: string) => string;
            fileProxied: (filename: string, resourceKey: string, tunnelPort: number) => string;
            warning: {
                cspViolation: (localUrl: string, violation: string) => string;
            };
        };
        container: {
            invoke: (req: ClientRequest, port: number) => string;
            error: (cause: string) => string;
        };
        preBundleTask: (title: string) => string;
        lintFailed: string;
        bundlingHeader: string;
        bundlingSucceeded: string;
        resourcesBundlingSucceeded: string;
        functionsBundlingSucceeded: string;
        cloudflaredLog: (data: string) => string;
        tunnelWithLocalCloudflared: string;
        connectUsingSelfManagedTunnel: string;
        tunnelLocalPort: string;
        error: {
            create: (message: string) => string;
            delete: (message: string) => string;
            handler: {
                notFound: (handler: string) => string;
            };
            manifestChangeDetected: string;
            dockerNotInstalled: (dockerDownloadLink: string) => string;
            dockerDaemonNotRunning: (err: string, isVerbose: boolean) => string;
            serverNotStartedOnPort: (tunnelPort: number) => string;
            cloudflaredError: string;
            cloudflaredExit: (code: number | null) => string;
            cloudflaredUnavailableError: string;
            invalidSelfManagedTunnelUrl: (url: string) => string;
            invalidSelfManagedTunnelUrlProtocol: (protocol: string) => string;
            invalidSelfManagedTunnelPort: (port: string) => string;
            invalidInvokeRequestForAppId: (requestAppId: string) => string;
            invalidInvokeRequestForAppEnv: (requestEnvId: string) => string;
            errorValidatingInvokeRequest: (message: string) => string;
        };
    };
    installationId: {
        prompt: string;
        errors: {
            invalid: string;
            notFound: (installationId: string) => string;
        };
    };
    uninstall: {
        cmd: {
            desc: string;
            start: string;
            success: (isMulti: boolean) => "Uninstalling...\n\n" | "Uninstalled\n\n";
        };
        interactive: {
            desc: string;
            progressInfo: string;
            done: string;
            confirmOptionalContexts: string;
        };
        info: string;
        done: (product: string, domain: string, environment: string, isMulti: boolean) => string;
        failed: (product: string, domain: string, environment: string) => string;
        missingUninstallTask: string;
    };
    webtrigger: {
        cmd: string;
        copy: (url: string) => string;
        optionFuncKey: string;
        overviewFuncKey: string;
        promptFuncKey: string;
        overViewInstallationTable: string;
        promptInstallationTable: string;
        error: {
            funcKey: string;
            noWebtriggers: string;
            creationError: (message: string) => string;
        };
    };
    logs: {
        cmd: string;
        optionInvocation: string;
        optionLimit: string;
        optionGroup: string;
        optionSince: string;
        optionContainers: string;
        invalidSinceOption: (since: string) => string;
        invalidOptionWithContainersCmd: (option: string) => string;
    };
    lint: {
        blurb: string;
        cmd: string;
        running: string;
        noProblems: string;
        noFixableProblem: string;
        noFixableProblems: string;
        filename: chalk.Chalk;
        linterFailed: (linterClass: string, failure: string) => string;
        fixed: (numFixableErrors: number, numFixableWarnings: number) => string;
        fixFollowUp: string;
        error: (line: number, column: number, message: string, reference: string) => string;
        summary: (numErrors: number, numWarnings: number, numFixableErrors: number, numFixableWarnings: number) => string;
        fixSummary: (numErrors: number, numFixableErrors: number, numFixableWarnings: number) => string;
        warning: (line: number, column: number, message: string, reference: string) => string;
    };
    repositories: {
        cmd: {
            desc: string;
        };
        images: {
            cmd: {
                desc: string;
            };
            list: {
                cmd: {
                    desc: string;
                    keyOption: string;
                };
                prompt: {
                    overview: string;
                    entry: string;
                };
                listingImages: (key: string) => string;
                noImagesFound: string;
                promptNextPage: string;
            };
        };
        list: {
            cmd: {
                desc: string;
            };
            listingRepositories: string;
            noContainersFound: string;
        };
    };
    containers: {
        cmd: {
            desc: string;
        };
        create: {
            cmd: {
                desc: string;
                keyOption: string;
            };
            prompt: {
                overview: string;
                entry: string;
            };
            creatingNewContainer: (key: string) => string;
            start: string;
            success: string;
            createdRepositoryURI: (uri: string) => string;
        };
        login: {
            cmd: {
                desc: string;
                onlyPassword: string;
            };
            truncatedPassword: (password: string) => string;
        };
        delete: {
            cmd: {
                desc: string;
                keyOption: string;
            };
            interactive: {
                desc: string;
                progressInfo: string;
                noContainersFound: string;
            };
            deletingContainer: (key: string) => string;
            warning: string;
            confirmation: (key: string) => string;
            abortedDeletion: string;
            start: string;
            success: string;
        };
        dockerLogin: {
            cmd: {
                desc: string;
            };
        };
    };
    show: {
        cmd: {
            desc: string;
        };
        services: {
            cmd: {
                desc: string;
                serviceKeyOption: string;
            };
            overview: string;
            specificService: (serviceKey: string, environment: string) => string;
            allServices: (environment: string) => string;
            noServicesFound: (environment: string) => string;
        };
        containers: {
            cmd: {
                desc: string;
                serviceKeyOption: string;
                containerKeyOption: string;
            };
            overview: string;
            prompt: {
                entry: string;
            };
            noContainersFound: (environment: string) => string;
            specifiedServiceNotFound: (service: string, environment: string) => string;
            specifiedContainerNotFound: (service: string, container: string, environment: string) => string;
            noContainersFoundForService: (service: string, environment: string) => string;
            specificContainer: (containerKey: string) => string;
            noInstancesFoundForContainer: (containerKey: string, service: string, environment: string) => string;
        };
    };
    stub: {
        error: (newName: string, oldName: string) => string;
    };
    customPrompts: {
        table: {
            promptMessage: (message: string) => string;
            headerMessage: (message: string, singleOption: boolean) => string;
        };
        singleSelectionTable: {
            doneHeaderMessage: (message: string) => string;
            decorateSelected: (site: string) => string;
        };
    };
    variables: {
        description: string;
    };
    settings: {
        description: string;
        analytics: {
            banner: string;
            promptMessage: string;
        };
        set: {
            description: <T extends readonly string[]>(choices: T) => string;
            invalidSetting: <T_1 extends readonly string[]>(choices: T_1) => string;
            invalidValue: string;
            success: (setting: string, value: string) => string;
        };
        list: {
            description: string;
        };
        usageAnalytics: {
            description: string;
        };
        defaultEnvironment: {
            description: string;
            info: string;
        };
    };
    assistant: {
        description: string;
        on: {
            description: string;
        };
        off: {
            description: string;
        };
        enabled: (assistantName: string) => string;
        disabled: string;
        alreadyDisabled: string;
        enableConfirmation: string;
    };
    nonInteractive: {
        description: string;
        error: {
            missingRequiredOption: (command: string, requiredOptions: string[]) => string;
            missingAnalyticsPreferences: string;
        };
    };
    customScopes: {
        validation: {
            failed: string;
            formatError: (path?: string, message?: string) => string;
        };
    };
};
//# sourceMappingURL=text.d.ts.map