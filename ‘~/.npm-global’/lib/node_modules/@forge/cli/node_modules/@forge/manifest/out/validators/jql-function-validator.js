"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JqlFunctionValidator = void 0;
const types_1 = require("../types");
const text_1 = require("../text");
const utils_1 = require("../utils");
const isManifestWithModules = (manifest) => {
    return !!manifest?.typedContent?.['modules'];
};
class JqlFunctionValidator {
    async validate(manifest) {
        const validationErrors = [];
        if (manifest?.typedContent && isManifestWithModules(manifest)) {
            const { yamlContentByLine, typedContent: { modules } } = manifest;
            const functionNames = modules[types_1.AllModuleTypes.JiraJqlFunction]?.map((m) => m.name) || [];
            const lowerCaseFunctionNames = functionNames.map((name) => name.toLowerCase());
            const lowerCaseNameToActualName = {};
            const lowerCaseDuplicateNames = [
                ...new Set(functionNames
                    .filter((name, index) => lowerCaseFunctionNames.includes(name.toLowerCase(), index + 1))
                    .map((duplicate) => {
                    lowerCaseNameToActualName[duplicate.toLowerCase()] = duplicate;
                    return duplicate.toLowerCase();
                }))
            ];
            if (lowerCaseDuplicateNames.length > 0) {
                validationErrors.push({
                    message: text_1.errors.modules.jiraJqlFunction.duplicateFunctionNames(lowerCaseDuplicateNames.map((lowerCaseName) => lowerCaseNameToActualName[lowerCaseName])),
                    reference: text_1.References.Modules,
                    level: 'error',
                    ...(0, utils_1.findPosition)(lowerCaseNameToActualName[lowerCaseDuplicateNames[0]], yamlContentByLine)
                });
            }
        }
        return {
            success: validationErrors.length === 0,
            manifestObject: manifest,
            errors: validationErrors
        };
    }
}
exports.JqlFunctionValidator = JqlFunctionValidator;
