"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalFetchVerifier = void 0;
const egress_1 = require("@forge/egress");
const linter_interface_1 = require("../../../linter-interface");
const verifier_interface_1 = require("../../verifier-interface");
const text_1 = require("../../../text");
const utils_1 = require("../../utils");
class ExternalFetchVerifier extends verifier_interface_1.BaseLintIssueVerifier {
    egressFilteringService;
    constructor(environment, manifest) {
        super(environment, manifest);
        const allowList = [
            ...(this.manifest?.permissions?.external?.fetch?.backend || []),
            ...(this.manifest?.permissions?.external?.fetch?.client || [])
        ];
        const remoteList = this.manifest?.remotes ?? [];
        const collectedUrls = allowList
            .map((item) => (typeof item === 'object' && 'address' in item ? item.address : item))
            .filter((item) => typeof item === 'string');
        const collectedRemotes = allowList
            .map((item) => typeof item !== 'string' &&
            'remote' in item &&
            remoteList.find((remoteItem) => remoteItem.key === item.remote)?.baseUrl)
            .filter((x) => typeof x === 'string');
        this.egressFilteringService = new egress_1.EgressFilteringService(collectedUrls.concat(collectedRemotes));
    }
    getLintClass() {
        return linter_interface_1.LintClass.Error;
    }
    async process(fetchCalls) {
        return fetchCalls
            .filter(({ url }) => !this.egressFilteringService.isValidUrl(url))
            .map((fetchCall) => ({
            class: this.getLintClass(),
            message: text_1.messages.verifiers.externalFetch.message(fetchCall.url),
            reference: text_1.messages.verifiers.externalFetch.reference,
            column: fetchCall.column,
            line: fetchCall.line,
            metadata: {
                missingExternalFetchPermission: (0, utils_1.extractDomain)(fetchCall)
            }
        }));
    }
}
exports.ExternalFetchVerifier = ExternalFetchVerifier;
