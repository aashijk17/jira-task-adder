import {
  SlackSlackConversationAriResourceOwner,
  SlackSlackConversationAriResourceType
} from "./chunk-SIDV5ZLZ.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/slack.slack/conversation/manifest.ts
var slackSlackConversationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: SlackSlackConversationAriResourceOwner,
  resourceType: SlackSlackConversationAriResourceType,
  resourceIdSlug: "workspaceId/{workspaceId}/channelId/{channelId}",
  resourceIdSegmentFormats: {
    workspaceId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/,
    // eslint-disable-line no-useless-escape
    channelId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/slack.slack/conversation/index.ts
var SlackSlackConversationAri = class _SlackSlackConversationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._channelId = opts.resourceIdSegmentValues.channelId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get channelId() {
    return this._channelId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: slackSlackConversationAriStaticOpts.qualifier,
      platformQualifier: slackSlackConversationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: slackSlackConversationAriStaticOpts.resourceOwner,
      resourceType: slackSlackConversationAriStaticOpts.resourceType,
      resourceId: `workspaceId/${opts.workspaceId}/channelId/${opts.channelId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        channelId: opts.channelId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, slackSlackConversationAriStaticOpts);
    return new _SlackSlackConversationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, slackSlackConversationAriStaticOpts);
    return new _SlackSlackConversationAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      channelId: this.channelId
    };
  }
};

export {
  SlackSlackConversationAri
};
