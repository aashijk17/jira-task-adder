import {
  MiroMiroDesignAriResourceOwner,
  MiroMiroDesignAriResourceType
} from "./chunk-7BX3X4ZX.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/miro.miro/design/manifest.ts
var miroMiroDesignAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: MiroMiroDesignAriResourceOwner,
  resourceType: MiroMiroDesignAriResourceType,
  resourceIdSlug: "board/{boardId}",
  resourceIdSegmentFormats: {
    boardId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/miro.miro/design/index.ts
var MiroMiroDesignAri = class _MiroMiroDesignAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._boardId = opts.resourceIdSegmentValues.boardId;
  }
  get boardId() {
    return this._boardId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: miroMiroDesignAriStaticOpts.qualifier,
      platformQualifier: miroMiroDesignAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: miroMiroDesignAriStaticOpts.resourceOwner,
      resourceType: miroMiroDesignAriStaticOpts.resourceType,
      resourceId: `board/${opts.boardId}`,
      resourceIdSegmentValues: {
        boardId: opts.boardId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, miroMiroDesignAriStaticOpts);
    return new _MiroMiroDesignAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, miroMiroDesignAriStaticOpts);
    return new _MiroMiroDesignAri(opts);
  }
  getVariables() {
    return {
      boardId: this.boardId
    };
  }
};

export {
  MiroMiroDesignAri
};
