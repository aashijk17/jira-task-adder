import {
  AuditLogWorkspaceAriResourceOwner,
  AuditLogWorkspaceAriResourceType
} from "./chunk-7VQ7RXAT.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/audit-log/workspace/manifest.ts
var auditLogWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: AuditLogWorkspaceAriResourceOwner,
  resourceType: AuditLogWorkspaceAriResourceType,
  resourceIdSlug: "{workspaceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/audit-log/workspace/index.ts
var AuditLogWorkspaceAri = class _AuditLogWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: auditLogWorkspaceAriStaticOpts.qualifier,
      platformQualifier: auditLogWorkspaceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: auditLogWorkspaceAriStaticOpts.resourceOwner,
      resourceType: auditLogWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, auditLogWorkspaceAriStaticOpts);
    return new _AuditLogWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, auditLogWorkspaceAriStaticOpts);
    return new _AuditLogWorkspaceAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId
    };
  }
};

export {
  AuditLogWorkspaceAri
};
