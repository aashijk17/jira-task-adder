"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvokeRemoteVerifier = void 0;
const typescript_estree_1 = require("@typescript-eslint/typescript-estree");
const linter_interface_1 = require("../../../linter-interface");
const text_1 = require("../../../text");
const verifier_interface_1 = require("../../verifier-interface");
const invoke_remote_interface_1 = require("../invoke-remote-interface");
class InvokeRemoteVerifier extends verifier_interface_1.BaseLintIssueVerifier {
    getLintClass() {
        return linter_interface_1.LintClass.Error;
    }
    async process(input) {
        const validCalls = input.invokeRemoteCalls.filter((call) => this.isValidCall(call, input.imports));
        const missingRemotes = validCalls
            .filter((call) => !this.isRemoteKeyValid(call))
            .map((call) => ({ call, message: text_1.messages.verifiers.invokeRemoteKey }));
        const missingComputeOperation = validCalls
            .filter((call) => this.isRemoteKeyValid(call) && !this.hasComputeOperation(call))
            .map((call) => ({ call, message: text_1.messages.verifiers.invokeRemoteCompute }));
        return [...missingRemotes, ...missingComputeOperation].map(({ call, message }) => ({
            class: this.getLintClass(),
            column: call.column,
            line: call.line,
            message: message.message(call.remoteKey),
            reference: message.reference
        }));
    }
    isValidCall(call, imports) {
        if (call.type === invoke_remote_interface_1.InvokeRemoteTypes.DIRECT_CALL) {
            return imports.some((imp) => imp.type === typescript_estree_1.AST_NODE_TYPES.ImportSpecifier && call.calleeName === imp.alias);
        }
        return imports.some((imp) => (imp.type === typescript_estree_1.AST_NODE_TYPES.ImportDefaultSpecifier || imp.type === typescript_estree_1.AST_NODE_TYPES.ImportNamespaceSpecifier) &&
            call.objectName === imp.alias);
    }
    getRemoteForCall(call) {
        return this.manifest.remotes?.find((remote) => remote.key === call.remoteKey);
    }
    isRemoteKeyValid(call) {
        const remote = this.getRemoteForCall(call);
        return typeof remote !== 'undefined';
    }
    hasComputeOperation(call) {
        const remote = this.getRemoteForCall(call);
        return remote?.operations?.includes('compute') ?? false;
    }
}
exports.InvokeRemoteVerifier = InvokeRemoteVerifier;
