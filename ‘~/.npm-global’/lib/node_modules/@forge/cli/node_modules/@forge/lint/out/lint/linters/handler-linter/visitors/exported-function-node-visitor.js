"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExportedFunctionNodeVisitor = void 0;
const typescript_estree_1 = require("@typescript-eslint/typescript-estree");
class ExportedFunctionNodeVisitor {
    visit(node, _parent, callback) {
        if (node.type === typescript_estree_1.AST_NODE_TYPES.MemberExpression &&
            node.object &&
            node.property.type === typescript_estree_1.AST_NODE_TYPES.Identifier) {
            this.visitMemberExpression(node, callback);
        }
        if (node.type === typescript_estree_1.AST_NODE_TYPES.AssignmentExpression && node.operator === '=') {
            this.visitObjectAssignmentExpression(node, callback);
        }
        if (node.type === typescript_estree_1.AST_NODE_TYPES.ExportNamedDeclaration) {
            if (node.declaration) {
                this.visitInlineNamedExport(node, callback);
            }
            else {
                node.specifiers.forEach((specifier) => this.visitSpecifiedNamedExports(node, specifier, callback));
            }
        }
    }
    visitSpecifiedNamedExports(node, specifier, callback) {
        if (specifier.type === typescript_estree_1.AST_NODE_TYPES.ExportSpecifier && specifier.local.type === typescript_estree_1.AST_NODE_TYPES.Identifier) {
            callback(this.createExportedMethod(specifier.exported.name, { ...node.loc.start }));
        }
    }
    visitInlineNamedExport(node, callback) {
        if (node.declaration?.type === typescript_estree_1.AST_NODE_TYPES.VariableDeclaration) {
            node.declaration.declarations.forEach((declarator) => {
                if (declarator.id && declarator.id.type === typescript_estree_1.AST_NODE_TYPES.Identifier) {
                    callback(this.createExportedMethod(declarator.id.name, { ...declarator.id.loc.start }));
                }
            });
        }
        else if (node.declaration?.type === typescript_estree_1.AST_NODE_TYPES.FunctionDeclaration) {
            if (node.declaration?.id && node.declaration?.id.type === typescript_estree_1.AST_NODE_TYPES.Identifier) {
                callback(this.createExportedMethod(node.declaration.id.name, { ...node.declaration.id.loc.start }));
            }
        }
    }
    visitObjectAssignmentExpression(node, callback) {
        if (this.isExports(node.left)) {
            this.tryAddObjectExpressionPropertiesExportedMethods(node, callback);
        }
    }
    visitMemberExpression(node, callback) {
        if (node.property.type === typescript_estree_1.AST_NODE_TYPES.Identifier && this.isExports(node.object)) {
            callback(this.createExportedMethod(node.property.name, { ...node.property.loc.start }));
        }
    }
    tryAddObjectExpressionPropertiesExportedMethods(node, callback) {
        if (node.right?.type === typescript_estree_1.AST_NODE_TYPES.ObjectExpression) {
            node.right.properties?.forEach((property) => {
                if (property.key.type === typescript_estree_1.AST_NODE_TYPES.Identifier) {
                    callback(this.createExportedMethod(property.key.name, { ...property.key.loc.start }));
                }
            });
        }
    }
    createExportedMethod(method, location) {
        return {
            method,
            ...location
        };
    }
    isExports(node) {
        return ((node.type === typescript_estree_1.AST_NODE_TYPES.MemberExpression &&
            node.object.type === typescript_estree_1.AST_NODE_TYPES.Identifier &&
            node.object.name === 'module' &&
            node.property.type === typescript_estree_1.AST_NODE_TYPES.Identifier &&
            node.property.name === 'exports') ||
            (node?.type === typescript_estree_1.AST_NODE_TYPES.Identifier && node?.name === 'exports'));
    }
}
exports.ExportedFunctionNodeVisitor = ExportedFunctionNodeVisitor;
