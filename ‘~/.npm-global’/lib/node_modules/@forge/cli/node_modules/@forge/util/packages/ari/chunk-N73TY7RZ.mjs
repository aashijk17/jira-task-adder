import {
  GithubGithubRemoteLinkAriResourceOwner,
  GithubGithubRemoteLinkAriResourceType
} from "./chunk-3HZTIMQY.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/github.github/remote-link/manifest.ts
var githubGithubRemoteLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: GithubGithubRemoteLinkAriResourceOwner,
  resourceType: GithubGithubRemoteLinkAriResourceType,
  resourceIdSlug: "{remoteLinkId}",
  resourceIdSegmentFormats: {
    remoteLinkId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/github.github/remote-link/index.ts
var GithubGithubRemoteLinkAri = class _GithubGithubRemoteLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._remoteLinkId = opts.resourceIdSegmentValues.remoteLinkId;
  }
  get remoteLinkId() {
    return this._remoteLinkId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: githubGithubRemoteLinkAriStaticOpts.qualifier,
      platformQualifier: githubGithubRemoteLinkAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: githubGithubRemoteLinkAriStaticOpts.resourceOwner,
      resourceType: githubGithubRemoteLinkAriStaticOpts.resourceType,
      resourceId: `${opts.remoteLinkId}`,
      resourceIdSegmentValues: {
        remoteLinkId: opts.remoteLinkId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, githubGithubRemoteLinkAriStaticOpts);
    return new _GithubGithubRemoteLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, githubGithubRemoteLinkAriStaticOpts);
    return new _GithubGithubRemoteLinkAri(opts);
  }
  getVariables() {
    return {
      remoteLinkId: this.remoteLinkId
    };
  }
};

export {
  GithubGithubRemoteLinkAri
};
