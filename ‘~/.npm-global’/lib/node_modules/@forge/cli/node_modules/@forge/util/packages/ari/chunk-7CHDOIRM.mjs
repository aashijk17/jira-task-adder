import {
  PassionfruitDependencyAriResourceOwner,
  PassionfruitDependencyAriResourceType
} from "./chunk-UFPZX76B.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/passionfruit/dependency/manifest.ts
var passionfruitDependencyAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9_\\-.]{1,255}$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: PassionfruitDependencyAriResourceOwner,
  resourceType: PassionfruitDependencyAriResourceType,
  resourceIdSlug: "workspace/{activationId}/{dependencyId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    dependencyId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/passionfruit/dependency/index.ts
var PassionfruitDependencyAri = class _PassionfruitDependencyAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._dependencyId = opts.resourceIdSegmentValues.dependencyId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get dependencyId() {
    return this._dependencyId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: passionfruitDependencyAriStaticOpts.qualifier,
      platformQualifier: passionfruitDependencyAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: passionfruitDependencyAriStaticOpts.resourceOwner,
      resourceType: passionfruitDependencyAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.activationId}/${opts.dependencyId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        dependencyId: opts.dependencyId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, passionfruitDependencyAriStaticOpts);
    return new _PassionfruitDependencyAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, passionfruitDependencyAriStaticOpts);
    return new _PassionfruitDependencyAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      dependencyId: this.dependencyId
    };
  }
};

export {
  PassionfruitDependencyAri
};
