import {
  MercuryChangeProposalStatusAriResourceOwner,
  MercuryChangeProposalStatusAriResourceType
} from "./chunk-KLH3PA7K.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/mercury/change-proposal-status/manifest.ts
var mercuryChangeProposalStatusAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9_\\-.]{1,255}$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: MercuryChangeProposalStatusAriResourceOwner,
  resourceType: MercuryChangeProposalStatusAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{changeProposalStatusId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    changeProposalStatusId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/mercury/change-proposal-status/index.ts
var MercuryChangeProposalStatusAri = class _MercuryChangeProposalStatusAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._changeProposalStatusId = opts.resourceIdSegmentValues.changeProposalStatusId;
  }
  get siteId() {
    return this._siteId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get changeProposalStatusId() {
    return this._changeProposalStatusId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: mercuryChangeProposalStatusAriStaticOpts.qualifier,
      platformQualifier: mercuryChangeProposalStatusAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: mercuryChangeProposalStatusAriStaticOpts.resourceOwner,
      resourceType: mercuryChangeProposalStatusAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.changeProposalStatusId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        changeProposalStatusId: opts.changeProposalStatusId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, mercuryChangeProposalStatusAriStaticOpts);
    return new _MercuryChangeProposalStatusAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, mercuryChangeProposalStatusAriStaticOpts);
    return new _MercuryChangeProposalStatusAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      workspaceId: this.workspaceId,
      changeProposalStatusId: this.changeProposalStatusId
    };
  }
};

export {
  MercuryChangeProposalStatusAri
};
