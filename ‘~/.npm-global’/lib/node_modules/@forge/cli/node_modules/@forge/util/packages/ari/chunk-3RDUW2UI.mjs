import {
  GithubGithubBuildAriResourceOwner,
  GithubGithubBuildAriResourceType
} from "./chunk-SW7EO4HF.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/github.github/build/manifest.ts
var githubGithubBuildAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: GithubGithubBuildAriResourceOwner,
  resourceType: GithubGithubBuildAriResourceType,
  resourceIdSlug: "pipelineId/{pipelineId}/buildId/{buildId}",
  resourceIdSegmentFormats: {
    pipelineId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/,
    // eslint-disable-line no-useless-escape
    buildId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/github.github/build/index.ts
var GithubGithubBuildAri = class _GithubGithubBuildAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._pipelineId = opts.resourceIdSegmentValues.pipelineId, this._buildId = opts.resourceIdSegmentValues.buildId;
  }
  get pipelineId() {
    return this._pipelineId;
  }
  get buildId() {
    return this._buildId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: githubGithubBuildAriStaticOpts.qualifier,
      platformQualifier: githubGithubBuildAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: githubGithubBuildAriStaticOpts.resourceOwner,
      resourceType: githubGithubBuildAriStaticOpts.resourceType,
      resourceId: `pipelineId/${opts.pipelineId}/buildId/${opts.buildId}`,
      resourceIdSegmentValues: {
        pipelineId: opts.pipelineId,
        buildId: opts.buildId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, githubGithubBuildAriStaticOpts);
    return new _GithubGithubBuildAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, githubGithubBuildAriStaticOpts);
    return new _GithubGithubBuildAri(opts);
  }
  getVariables() {
    return {
      pipelineId: this.pipelineId,
      buildId: this.buildId
    };
  }
};

export {
  GithubGithubBuildAri
};
