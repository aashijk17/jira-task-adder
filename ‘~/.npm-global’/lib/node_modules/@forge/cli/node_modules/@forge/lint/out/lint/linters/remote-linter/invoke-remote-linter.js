"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvokeRemoteLinter = void 0;
const tslib_1 = require("tslib");
const base_linter_1 = tslib_1.__importDefault(require("../../base-linter"));
const invoke_remote_interface_1 = require("./invoke-remote-interface");
const invoke_remote_verifier_1 = require("./verifiers/invoke-remote-verifier");
const invoke_remote_call_visitor_1 = require("./visitors/invoke-remote-call-visitor");
class InvokeRemoteLinter extends base_linter_1.default {
    manifest;
    constructor(environment, manifest, logger) {
        super(environment, logger);
        this.manifest = manifest;
    }
    async bootstrap() {
        this.nodeVisitors = [new invoke_remote_call_visitor_1.InvokeRemoteCallVisitor()];
        this.verifiers = {
            invokeRemote: new invoke_remote_verifier_1.InvokeRemoteVerifier(this.environment, this.manifest)
        };
    }
    addLintCriteriaMatch(usage, filepath) {
        const criteriaMatches = this.matches.get(filepath);
        if (usage.type === invoke_remote_interface_1.InvokeRemoteTypes.DIRECT_CALL || usage.type === invoke_remote_interface_1.InvokeRemoteTypes.MEMBER_CALL) {
            criteriaMatches.invokeRemote.invokeRemoteCalls.push(usage);
        }
        else if (usage.type === invoke_remote_interface_1.InvokeRemoteTypes.IMPORT_LIST) {
            criteriaMatches.invokeRemote.imports.push(...usage.imports);
        }
    }
    setupMatchesMap(filePath) {
        this.matches.set(filePath, {
            invokeRemote: {
                invokeRemoteCalls: [],
                imports: []
            }
        });
    }
}
exports.InvokeRemoteLinter = InvokeRemoteLinter;
