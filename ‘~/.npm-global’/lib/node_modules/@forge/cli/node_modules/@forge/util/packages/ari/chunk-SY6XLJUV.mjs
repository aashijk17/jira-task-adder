import {
  JiraScreenSchemeAriResourceOwner,
  JiraScreenSchemeAriResourceType
} from "./chunk-BFB2NZ7A.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/jira/screen-scheme/manifest.ts
var jiraScreenSchemeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9_\\-.]{1,255}$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: JiraScreenSchemeAriResourceOwner,
  resourceType: JiraScreenSchemeAriResourceType,
  resourceIdSlug: "activation/{activationId}/{screenSchemeId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    screenSchemeId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/screen-scheme/index.ts
var JiraScreenSchemeAri = class _JiraScreenSchemeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._screenSchemeId = opts.resourceIdSegmentValues.screenSchemeId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get screenSchemeId() {
    return this._screenSchemeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraScreenSchemeAriStaticOpts.qualifier,
      platformQualifier: jiraScreenSchemeAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraScreenSchemeAriStaticOpts.resourceOwner,
      resourceType: jiraScreenSchemeAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.screenSchemeId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        screenSchemeId: opts.screenSchemeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraScreenSchemeAriStaticOpts);
    return new _JiraScreenSchemeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraScreenSchemeAriStaticOpts);
    return new _JiraScreenSchemeAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      screenSchemeId: this.screenSchemeId
    };
  }
};

export {
  JiraScreenSchemeAri
};
