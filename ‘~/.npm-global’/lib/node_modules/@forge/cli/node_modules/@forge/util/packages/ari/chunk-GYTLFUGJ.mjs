import {
  SettingsServiceSettingsAriResourceOwner,
  SettingsServiceSettingsAriResourceType
} from "./chunk-WX2ZBYNS.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/settings-service/settings/manifest.ts
var settingsServiceSettingsAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: SettingsServiceSettingsAriResourceOwner,
  resourceType: SettingsServiceSettingsAriResourceType,
  resourceIdSlug: "{settingsId}",
  resourceIdSegmentFormats: {
    settingsId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/settings-service/settings/index.ts
var SettingsServiceSettingsAri = class _SettingsServiceSettingsAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._settingsId = opts.resourceIdSegmentValues.settingsId;
  }
  get settingsId() {
    return this._settingsId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: settingsServiceSettingsAriStaticOpts.qualifier,
      platformQualifier: settingsServiceSettingsAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: settingsServiceSettingsAriStaticOpts.resourceOwner,
      resourceType: settingsServiceSettingsAriStaticOpts.resourceType,
      resourceId: `${opts.settingsId}`,
      resourceIdSegmentValues: {
        settingsId: opts.settingsId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, settingsServiceSettingsAriStaticOpts);
    return new _SettingsServiceSettingsAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, settingsServiceSettingsAriStaticOpts);
    return new _SettingsServiceSettingsAri(opts);
  }
  getVariables() {
    return {
      settingsId: this.settingsId
    };
  }
};

export {
  SettingsServiceSettingsAri
};
