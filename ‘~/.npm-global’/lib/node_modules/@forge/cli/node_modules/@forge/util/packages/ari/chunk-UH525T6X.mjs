import {
  DevopsNamespaceAriResourceOwner,
  DevopsNamespaceAriResourceType
} from "./chunk-H53KN2GD.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/devops/namespace/manifest.ts
var devopsNamespaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9_\\-.]{1,255}$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: DevopsNamespaceAriResourceOwner,
  resourceType: DevopsNamespaceAriResourceType,
  resourceIdSlug: "{namespaceId}",
  resourceIdSegmentFormats: {
    namespaceId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/devops/namespace/index.ts
var DevopsNamespaceAri = class _DevopsNamespaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._namespaceId = opts.resourceIdSegmentValues.namespaceId;
  }
  get siteId() {
    return this._siteId;
  }
  get namespaceId() {
    return this._namespaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: devopsNamespaceAriStaticOpts.qualifier,
      platformQualifier: devopsNamespaceAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: devopsNamespaceAriStaticOpts.resourceOwner,
      resourceType: devopsNamespaceAriStaticOpts.resourceType,
      resourceId: `${opts.namespaceId}`,
      resourceIdSegmentValues: {
        namespaceId: opts.namespaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, devopsNamespaceAriStaticOpts);
    return new _DevopsNamespaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, devopsNamespaceAriStaticOpts);
    return new _DevopsNamespaceAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      namespaceId: this.namespaceId
    };
  }
};

export {
  DevopsNamespaceAri
};
