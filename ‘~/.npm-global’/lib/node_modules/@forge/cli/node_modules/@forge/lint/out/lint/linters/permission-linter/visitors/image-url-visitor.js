"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageUrlVisitor = void 0;
const typescript_estree_1 = require("@typescript-eslint/typescript-estree");
const api_call_interface_1 = require("../api-call-interface");
class ImageUrlVisitor {
    static ABSOLUTE_URL_REGEX = /^(?:[a-z+]+:)?\/\//i;
    visit(node, _parent, callback) {
        const imageUrlNode = this.getImageUrlNode(node);
        if (!imageUrlNode) {
            return undefined;
        }
        if (imageUrlNode?.type === typescript_estree_1.AST_NODE_TYPES.JSXAttribute) {
            const imageUrlNodeAttribute = imageUrlNode.value;
            if (!imageUrlNodeAttribute)
                return;
            this.addUrlToLintingList(imageUrlNodeAttribute, imageUrlNodeAttribute, callback);
            if (imageUrlNodeAttribute.type === typescript_estree_1.AST_NODE_TYPES.JSXExpressionContainer) {
                const imageUlrNodeAttributeExpression = imageUrlNodeAttribute.expression;
                if (imageUlrNodeAttributeExpression.type === typescript_estree_1.AST_NODE_TYPES.ConditionalExpression) {
                    const consequentExpression = imageUlrNodeAttributeExpression.consequent;
                    this.addUrlToLintingList(consequentExpression, imageUrlNodeAttribute, callback);
                    const alternateExpression = imageUlrNodeAttributeExpression.alternate;
                    this.addUrlToLintingList(alternateExpression, imageUrlNodeAttribute, callback);
                }
                if (imageUlrNodeAttributeExpression.type === typescript_estree_1.AST_NODE_TYPES.LogicalExpression) {
                    const leftExpression = imageUlrNodeAttributeExpression.left;
                    this.addUrlToLintingList(leftExpression, imageUrlNodeAttribute, callback);
                    const rightExpression = imageUlrNodeAttributeExpression.right;
                    this.addUrlToLintingList(rightExpression, imageUrlNodeAttribute, callback);
                }
            }
        }
    }
    getImageUrlNode(node) {
        if (node.type !== typescript_estree_1.AST_NODE_TYPES.JSXOpeningElement) {
            return undefined;
        }
        const { name, attributes } = node;
        if (name.type === typescript_estree_1.AST_NODE_TYPES.JSXIdentifier && name.name === 'Image') {
            return attributes.find((attribute) => {
                if (attribute.type !== typescript_estree_1.AST_NODE_TYPES.JSXAttribute) {
                    return false;
                }
                if (attribute.name.type === typescript_estree_1.AST_NODE_TYPES.JSXIdentifier && attribute.name.name === 'src') {
                    return true;
                }
                return false;
            });
        }
        return undefined;
    }
    isBundledUri(imageUri) {
        return imageUri.startsWith('resource:') || imageUri.startsWith('data:image');
    }
    isAbsoluteUrl(url) {
        return ImageUrlVisitor.ABSOLUTE_URL_REGEX.test(url);
    }
    addUrlToLintingList(expression, imageUrlAttribute, callback) {
        if (expression && expression.type === typescript_estree_1.AST_NODE_TYPES.Literal && typeof expression.value === 'string') {
            const url = expression.value;
            if (url.trim() !== '' && !this.isBundledUri(url) && this.isAbsoluteUrl(url)) {
                const imageUrl = {
                    type: api_call_interface_1.ApiCallTypes.IMAGE,
                    url: url,
                    line: imageUrlAttribute.loc.start.line,
                    column: imageUrlAttribute.loc.start.column
                };
                callback(imageUrl);
            }
        }
    }
}
exports.ImageUrlVisitor = ImageUrlVisitor;
