import {
  MlRegistryArtifactAriResourceOwner,
  MlRegistryArtifactAriResourceType
} from "./chunk-JSBB4LNN.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/ml-registry/artifact/manifest.ts
var mlRegistryArtifactAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: MlRegistryArtifactAriResourceOwner,
  resourceType: MlRegistryArtifactAriResourceType,
  resourceIdSlug: "{artifactId}",
  resourceIdSegmentFormats: {
    artifactId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/ml-registry/artifact/index.ts
var MlRegistryArtifactAri = class _MlRegistryArtifactAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._artifactId = opts.resourceIdSegmentValues.artifactId;
  }
  get artifactId() {
    return this._artifactId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: mlRegistryArtifactAriStaticOpts.qualifier,
      platformQualifier: mlRegistryArtifactAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: mlRegistryArtifactAriStaticOpts.resourceOwner,
      resourceType: mlRegistryArtifactAriStaticOpts.resourceType,
      resourceId: `${opts.artifactId}`,
      resourceIdSegmentValues: {
        artifactId: opts.artifactId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, mlRegistryArtifactAriStaticOpts);
    return new _MlRegistryArtifactAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, mlRegistryArtifactAriStaticOpts);
    return new _MlRegistryArtifactAri(opts);
  }
  getVariables() {
    return {
      artifactId: this.artifactId
    };
  }
};

export {
  MlRegistryArtifactAri
};
