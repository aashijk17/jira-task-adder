"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TunnelGraphqlClient = exports.RegisterAppTunnelError = void 0;
const cli_shared_1 = require("@forge/cli-shared");
const cli_shared_2 = require("@forge/cli-shared");
class CreateAppTunnelError extends cli_shared_1.GraphQlMutationError {
    constructor(message, { requestId, code, statusCode }) {
        super(cli_shared_2.Text.tunnel.error.create(message), { requestId, code, statusCode });
    }
}
class RegisterAppTunnelError extends cli_shared_1.GraphQlMutationError {
    static userErrorCodes = ['ENVIRONMENT_MISMATCH', 'ENVIRONMENT_NOT_FOUND'];
    errorCode;
    constructor(message, { requestId, code, statusCode }) {
        super(cli_shared_2.Text.tunnel.error.create(message), { requestId, code, statusCode });
        this.errorCode = code;
    }
    getAttributes() {
        return {
            isUserError: this.isUserError()
        };
    }
    isUserError() {
        return typeof this.errorCode === 'string' && RegisterAppTunnelError.userErrorCodes.includes(this.errorCode);
    }
}
exports.RegisterAppTunnelError = RegisterAppTunnelError;
class DeleteAppTunnelError extends cli_shared_1.GraphQlMutationError {
    constructor(message, { requestId, code, statusCode }) {
        super(cli_shared_2.Text.tunnel.error.delete(message), { requestId, code, statusCode });
    }
}
class TunnelGraphqlClient {
    graphqlClient;
    constructor(graphqlClient) {
        this.graphqlClient = graphqlClient;
    }
    async setupTunnel(appId, environmentKey) {
        const mutation = `
      mutation forge_cli_setupApplicationTunnel($input: RegisterTunnelInput!) {
        registerTunnel(input: $input) {
          success
          errors {
            message
            extensions {
              errorType
              statusCode
            }
          }
          tunnelId
          tunnelToken
          tunnelUrl
        }
      }
    `;
        const { response: { registerTunnel: { success, errors, tunnelId, tunnelToken, tunnelUrl } }, requestId } = await this.graphqlClient.mutate(mutation, {
            input: {
                appId,
                environmentKey
            }
        });
        const error = (0, cli_shared_1.getError)(errors);
        if (!success) {
            throw new RegisterAppTunnelError(`${error.message} (requestId: ${requestId || 'unknown'})`, {
                requestId,
                code: error.code,
                statusCode: error.statusCode
            });
        }
        return {
            id: tunnelId,
            token: tunnelToken,
            url: tunnelUrl
        };
    }
    async createAppTunnels(appId, environmentKey, tunnelDefinitions) {
        const mutation = `
      mutation forge_cli_createApplicationTunnels($input: CreateAppTunnelsInput!) {
        createAppTunnels(input: $input) {
          success
          errors {
            message
            extensions {
              errorType
              statusCode
            }
          }
          keepAlive
        }
      }
    `;
        const { response: { createAppTunnels: { success, errors, keepAlive } }, requestId } = await this.graphqlClient.mutate(mutation, {
            input: {
                appId,
                environmentKey,
                tunnelDefinitions,
                force: true
            }
        });
        const error = (0, cli_shared_1.getError)(errors);
        if (!success) {
            throw new CreateAppTunnelError(`${error.message} (requestId: ${requestId || 'unknown'})`, {
                requestId,
                code: error.code,
                statusCode: error.statusCode
            });
        }
        return keepAlive;
    }
    async deleteTunnels(appId, environmentKey) {
        const mutation = `
      mutation forge_cli_deleteApplicationTunnels($input: DeleteAppTunnelInput!) {
        deleteAppTunnels(input: $input) {
          success
          errors {
            message
            extensions {
              errorType
              statusCode
            }
          }
        }
      }
    `;
        const { response: { deleteAppTunnels: { success, errors } }, requestId } = await this.graphqlClient.mutate(mutation, {
            input: {
                appId,
                environmentKey
            }
        });
        const error = (0, cli_shared_1.getError)(errors);
        if (!success) {
            throw new DeleteAppTunnelError(`${error.message} (requestId: ${requestId || 'unknown'})`, {
                requestId,
                code: error.code,
                statusCode: error.statusCode
            });
        }
    }
}
exports.TunnelGraphqlClient = TunnelGraphqlClient;
