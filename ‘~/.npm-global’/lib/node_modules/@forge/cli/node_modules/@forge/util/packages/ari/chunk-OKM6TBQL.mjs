import {
  AtlassianWebCrawlerAtlassianWebCrawlerDocumentAriResourceOwner,
  AtlassianWebCrawlerAtlassianWebCrawlerDocumentAriResourceType
} from "./chunk-PMG3TISW.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/atlassian-web-crawler.atlassian-web-crawler/document/manifest.ts
var atlassianWebCrawlerAtlassianWebCrawlerDocumentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: AtlassianWebCrawlerAtlassianWebCrawlerDocumentAriResourceOwner,
  resourceType: AtlassianWebCrawlerAtlassianWebCrawlerDocumentAriResourceType,
  resourceIdSlug: "{documentId}",
  resourceIdSegmentFormats: {
    documentId: /[a-f0-9]{64}(-raw)?(-[0-9]{1,4})?/
    // eslint-disable-line no-useless-escape
  }
};

// src/atlassian-web-crawler.atlassian-web-crawler/document/index.ts
var AtlassianWebCrawlerAtlassianWebCrawlerDocumentAri = class _AtlassianWebCrawlerAtlassianWebCrawlerDocumentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._documentId = opts.resourceIdSegmentValues.documentId;
  }
  get documentId() {
    return this._documentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: atlassianWebCrawlerAtlassianWebCrawlerDocumentAriStaticOpts.qualifier,
      platformQualifier: atlassianWebCrawlerAtlassianWebCrawlerDocumentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: atlassianWebCrawlerAtlassianWebCrawlerDocumentAriStaticOpts.resourceOwner,
      resourceType: atlassianWebCrawlerAtlassianWebCrawlerDocumentAriStaticOpts.resourceType,
      resourceId: `${opts.documentId}`,
      resourceIdSegmentValues: {
        documentId: opts.documentId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, atlassianWebCrawlerAtlassianWebCrawlerDocumentAriStaticOpts);
    return new _AtlassianWebCrawlerAtlassianWebCrawlerDocumentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, atlassianWebCrawlerAtlassianWebCrawlerDocumentAriStaticOpts);
    return new _AtlassianWebCrawlerAtlassianWebCrawlerDocumentAri(opts);
  }
  getVariables() {
    return {
      documentId: this.documentId
    };
  }
};

export {
  AtlassianWebCrawlerAtlassianWebCrawlerDocumentAri
};
