import {
  EcosystemInstallationLinkAriResourceOwner,
  EcosystemInstallationLinkAriResourceType
} from "./chunk-C4DHTYLM.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/ecosystem/installation-link/manifest.ts
var ecosystemInstallationLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: EcosystemInstallationLinkAriResourceOwner,
  resourceType: EcosystemInstallationLinkAriResourceType,
  resourceIdSlug: "{installationId}/{installationLinkId}",
  resourceIdSegmentFormats: {
    installationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    installationLinkId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/installation-link/index.ts
var EcosystemInstallationLinkAri = class _EcosystemInstallationLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._installationId = opts.resourceIdSegmentValues.installationId, this._installationLinkId = opts.resourceIdSegmentValues.installationLinkId;
  }
  get installationId() {
    return this._installationId;
  }
  get installationLinkId() {
    return this._installationLinkId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemInstallationLinkAriStaticOpts.qualifier,
      platformQualifier: ecosystemInstallationLinkAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemInstallationLinkAriStaticOpts.resourceOwner,
      resourceType: ecosystemInstallationLinkAriStaticOpts.resourceType,
      resourceId: `${opts.installationId}/${opts.installationLinkId}`,
      resourceIdSegmentValues: {
        installationId: opts.installationId,
        installationLinkId: opts.installationLinkId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemInstallationLinkAriStaticOpts);
    return new _EcosystemInstallationLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemInstallationLinkAriStaticOpts);
    return new _EcosystemInstallationLinkAri(opts);
  }
  getVariables() {
    return {
      installationId: this.installationId,
      installationLinkId: this.installationLinkId
    };
  }
};

export {
  EcosystemInstallationLinkAri
};
