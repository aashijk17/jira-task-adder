"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvokeRemoteCallVisitor = void 0;
const typescript_estree_1 = require("@typescript-eslint/typescript-estree");
const invoke_remote_interface_1 = require("../invoke-remote-interface");
class InvokeRemoteCallVisitor {
    visit(node, parent, callback) {
        switch (node.type) {
            case typescript_estree_1.AST_NODE_TYPES.ImportDeclaration:
                if (node.source.value === invoke_remote_interface_1.INVOKE_REMOTE_PACKAGE_NAME) {
                    const imports = node.specifiers
                        .filter((spec) => spec.type === typescript_estree_1.AST_NODE_TYPES.ImportDefaultSpecifier ||
                        spec.type === typescript_estree_1.AST_NODE_TYPES.ImportNamespaceSpecifier ||
                        (spec.type === typescript_estree_1.AST_NODE_TYPES.ImportSpecifier &&
                            spec.imported.name === invoke_remote_interface_1.INVOKE_REMOTE_FUNCTION_NAME))
                        .map((spec) => ({
                        type: spec.type,
                        alias: spec.local.name,
                        column: spec.local.loc.start.column,
                        line: spec.local.loc.start.line
                    }));
                    callback({
                        type: invoke_remote_interface_1.InvokeRemoteTypes.IMPORT_LIST,
                        imports,
                        line: 0,
                        column: 0
                    });
                }
                break;
            case typescript_estree_1.AST_NODE_TYPES.CallExpression:
                if (node.callee.type === typescript_estree_1.AST_NODE_TYPES.Identifier) {
                    const [remoteKeyNode] = node.arguments;
                    if (this.remoteKeyCanBeChecked(remoteKeyNode)) {
                        const invokeRemoteCall = {
                            ...this.transformArgsToInvokeRemoteCall(remoteKeyNode),
                            type: invoke_remote_interface_1.InvokeRemoteTypes.DIRECT_CALL,
                            calleeName: node.callee.name
                        };
                        callback(invokeRemoteCall);
                    }
                }
                break;
            case typescript_estree_1.AST_NODE_TYPES.MemberExpression:
                if (node.property.type === typescript_estree_1.AST_NODE_TYPES.Identifier &&
                    node.object.type === typescript_estree_1.AST_NODE_TYPES.Identifier &&
                    node.property.name === invoke_remote_interface_1.INVOKE_REMOTE_FUNCTION_NAME &&
                    parent?.type === typescript_estree_1.AST_NODE_TYPES.CallExpression) {
                    const [remoteKeyNode] = parent.arguments;
                    if (this.remoteKeyCanBeChecked(remoteKeyNode)) {
                        const invokeRemoteMemberCall = {
                            ...this.transformArgsToInvokeRemoteCall(remoteKeyNode),
                            type: invoke_remote_interface_1.InvokeRemoteTypes.MEMBER_CALL,
                            objectName: node.object.name
                        };
                        callback(invokeRemoteMemberCall);
                    }
                }
                break;
        }
    }
    remoteKeyCanBeChecked(remoteKeyNode) {
        return (remoteKeyNode?.type === typescript_estree_1.AST_NODE_TYPES.Literal &&
            typeof remoteKeyNode?.value === 'string' &&
            remoteKeyNode.value.trim() !== '');
    }
    transformArgsToInvokeRemoteCall = (remoteKeyNode) => ({
        remoteKey: remoteKeyNode.value,
        line: remoteKeyNode.loc.start.line,
        column: remoteKeyNode.loc.start.column
    });
}
exports.InvokeRemoteCallVisitor = InvokeRemoteCallVisitor;
