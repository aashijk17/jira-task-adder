import {
  LaunchdarklyLaunchdarklyRemoteLinkAriResourceOwner,
  LaunchdarklyLaunchdarklyRemoteLinkAriResourceType
} from "./chunk-BVD3WDHP.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/launchdarkly.launchdarkly/remote-link/manifest.ts
var launchdarklyLaunchdarklyRemoteLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: LaunchdarklyLaunchdarklyRemoteLinkAriResourceOwner,
  resourceType: LaunchdarklyLaunchdarklyRemoteLinkAriResourceType,
  resourceIdSlug: "feature-flag/{projectId}/{featureFlagKey}",
  resourceIdSegmentFormats: {
    projectId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/,
    // eslint-disable-line no-useless-escape
    featureFlagKey: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/launchdarkly.launchdarkly/remote-link/index.ts
var LaunchdarklyLaunchdarklyRemoteLinkAri = class _LaunchdarklyLaunchdarklyRemoteLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._projectId = opts.resourceIdSegmentValues.projectId, this._featureFlagKey = opts.resourceIdSegmentValues.featureFlagKey;
  }
  get projectId() {
    return this._projectId;
  }
  get featureFlagKey() {
    return this._featureFlagKey;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: launchdarklyLaunchdarklyRemoteLinkAriStaticOpts.qualifier,
      platformQualifier: launchdarklyLaunchdarklyRemoteLinkAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: launchdarklyLaunchdarklyRemoteLinkAriStaticOpts.resourceOwner,
      resourceType: launchdarklyLaunchdarklyRemoteLinkAriStaticOpts.resourceType,
      resourceId: `feature-flag/${opts.projectId}/${opts.featureFlagKey}`,
      resourceIdSegmentValues: {
        projectId: opts.projectId,
        featureFlagKey: opts.featureFlagKey
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, launchdarklyLaunchdarklyRemoteLinkAriStaticOpts);
    return new _LaunchdarklyLaunchdarklyRemoteLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, launchdarklyLaunchdarklyRemoteLinkAriStaticOpts);
    return new _LaunchdarklyLaunchdarklyRemoteLinkAri(opts);
  }
  getVariables() {
    return {
      projectId: this.projectId,
      featureFlagKey: this.featureFlagKey
    };
  }
};

export {
  LaunchdarklyLaunchdarklyRemoteLinkAri
};
