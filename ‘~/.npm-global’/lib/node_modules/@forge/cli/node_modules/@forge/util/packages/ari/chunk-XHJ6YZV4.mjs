import {
  AuditLogContainerAriResourceOwner,
  AuditLogContainerAriResourceType
} from "./chunk-GRCW5QVO.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/audit-log/container/manifest.ts
var auditLogContainerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: AuditLogContainerAriResourceOwner,
  resourceType: AuditLogContainerAriResourceType,
  resourceIdSlug: "event/{eventId}/{containerId}",
  resourceIdSegmentFormats: {
    eventId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    containerId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/audit-log/container/index.ts
var AuditLogContainerAri = class _AuditLogContainerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._eventId = opts.resourceIdSegmentValues.eventId, this._containerId = opts.resourceIdSegmentValues.containerId;
  }
  get eventId() {
    return this._eventId;
  }
  get containerId() {
    return this._containerId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: auditLogContainerAriStaticOpts.qualifier,
      platformQualifier: auditLogContainerAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: auditLogContainerAriStaticOpts.resourceOwner,
      resourceType: auditLogContainerAriStaticOpts.resourceType,
      resourceId: `event/${opts.eventId}/${opts.containerId}`,
      resourceIdSegmentValues: {
        eventId: opts.eventId,
        containerId: opts.containerId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, auditLogContainerAriStaticOpts);
    return new _AuditLogContainerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, auditLogContainerAriStaticOpts);
    return new _AuditLogContainerAri(opts);
  }
  getVariables() {
    return {
      eventId: this.eventId,
      containerId: this.containerId
    };
  }
};

export {
  AuditLogContainerAri
};
