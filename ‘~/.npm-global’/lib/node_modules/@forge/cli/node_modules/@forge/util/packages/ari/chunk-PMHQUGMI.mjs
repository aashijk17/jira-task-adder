import {
  AutomationAutomationRuleAriResourceOwner,
  AutomationAutomationRuleAriResourceType
} from "./chunk-4V2Y2AKP.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/automation/automation-rule/manifest.ts
var automationAutomationRuleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: AutomationAutomationRuleAriResourceOwner,
  resourceType: AutomationAutomationRuleAriResourceType,
  resourceIdSlug: "{ruleId}/partition/{partitionId}",
  resourceIdSegmentFormats: {
    ruleId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/,
    // eslint-disable-line no-useless-escape
    partitionId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/automation/automation-rule/index.ts
var AutomationAutomationRuleAri = class _AutomationAutomationRuleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._ruleId = opts.resourceIdSegmentValues.ruleId, this._partitionId = opts.resourceIdSegmentValues.partitionId;
  }
  get ruleId() {
    return this._ruleId;
  }
  get partitionId() {
    return this._partitionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: automationAutomationRuleAriStaticOpts.qualifier,
      platformQualifier: automationAutomationRuleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: automationAutomationRuleAriStaticOpts.resourceOwner,
      resourceType: automationAutomationRuleAriStaticOpts.resourceType,
      resourceId: `${opts.ruleId}/partition/${opts.partitionId}`,
      resourceIdSegmentValues: {
        ruleId: opts.ruleId,
        partitionId: opts.partitionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, automationAutomationRuleAriStaticOpts);
    return new _AutomationAutomationRuleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, automationAutomationRuleAriStaticOpts);
    return new _AutomationAutomationRuleAri(opts);
  }
  getVariables() {
    return {
      ruleId: this.ruleId,
      partitionId: this.partitionId
    };
  }
};

export {
  AutomationAutomationRuleAri
};
