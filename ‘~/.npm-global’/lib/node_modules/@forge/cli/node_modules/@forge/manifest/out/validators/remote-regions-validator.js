"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.areSetsEqual = exports.getRegionsFromBaseUrl = exports.RemoteRegionsValidator = void 0;
const text_1 = require("../text");
const utils_1 = require("../utils");
class RemoteRegionsValidator {
    async validate(manifest) {
        if (!manifest?.typedContent?.remotes) {
            return {
                success: true,
                manifestObject: manifest
            };
        }
        const remotes = manifest.typedContent.remotes;
        const validationErrors = [];
        const allRegionsToSupport = new Set();
        remotes?.forEach((remote) => {
            if (remote.baseUrl !== undefined) {
                (0, exports.getRegionsFromBaseUrl)(remote.baseUrl).forEach((region) => allRegionsToSupport.add(region));
            }
        });
        remotes?.forEach((remote) => {
            if (remote.baseUrl !== undefined) {
                const regions = (0, exports.getRegionsFromBaseUrl)(remote.baseUrl);
                const regionsMatch = (0, exports.areSetsEqual)(allRegionsToSupport, regions);
                if (!regionsMatch && regions.size === 1 && !remote.storage?.inScopeEUD) {
                    return;
                }
                else if (!regionsMatch) {
                    validationErrors.push({
                        message: text_1.errors.modules.remote.allRegionsNotDeclared(remote.key),
                        reference: text_1.References.App,
                        level: 'error',
                        ...(0, utils_1.findPosition)(remote.key, manifest.yamlContentByLine)
                    });
                }
            }
        });
        return {
            success: validationErrors.length === 0,
            manifestObject: manifest,
            errors: validationErrors
        };
    }
}
exports.RemoteRegionsValidator = RemoteRegionsValidator;
const getRegionsFromBaseUrl = (baseUrl) => {
    if (typeof baseUrl === 'string') {
        return new Set(['default']);
    }
    else {
        return new Set(Object.keys(baseUrl));
    }
};
exports.getRegionsFromBaseUrl = getRegionsFromBaseUrl;
const areSetsEqual = (a, b) => {
    return a.size === b.size && [...a].every((val) => b.has(val));
};
exports.areSetsEqual = areSetsEqual;
