import {
  LoomMeetingRecurrenceAriResourceOwner,
  LoomMeetingRecurrenceAriResourceType
} from "./chunk-WQ4ME76A.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/loom/meeting-recurrence/manifest.ts
var loomMeetingRecurrenceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9_\\-.]{1,255}$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: LoomMeetingRecurrenceAriResourceOwner,
  resourceType: LoomMeetingRecurrenceAriResourceType,
  resourceIdSlug: "activation/{activationId}/{meetingRecurrenceId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    meetingRecurrenceId: /[0-9]:[\w=-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/loom/meeting-recurrence/index.ts
var LoomMeetingRecurrenceAri = class _LoomMeetingRecurrenceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._meetingRecurrenceId = opts.resourceIdSegmentValues.meetingRecurrenceId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get meetingRecurrenceId() {
    return this._meetingRecurrenceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: loomMeetingRecurrenceAriStaticOpts.qualifier,
      platformQualifier: loomMeetingRecurrenceAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: loomMeetingRecurrenceAriStaticOpts.resourceOwner,
      resourceType: loomMeetingRecurrenceAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.meetingRecurrenceId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        meetingRecurrenceId: opts.meetingRecurrenceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, loomMeetingRecurrenceAriStaticOpts);
    return new _LoomMeetingRecurrenceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, loomMeetingRecurrenceAriStaticOpts);
    return new _LoomMeetingRecurrenceAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      meetingRecurrenceId: this.meetingRecurrenceId
    };
  }
};

export {
  LoomMeetingRecurrenceAri
};
