"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalApiCallVisitor = void 0;
const typescript_estree_1 = require("@typescript-eslint/typescript-estree");
const url_1 = require("url");
const api_call_interface_1 = require("../api-call-interface");
class ExternalApiCallVisitor {
    visit(node, parent, callback) {
        switch (node.type) {
            case typescript_estree_1.AST_NODE_TYPES.CallExpression:
                if (node.callee.type === typescript_estree_1.AST_NODE_TYPES.Identifier && node.callee.name === 'fetch') {
                    const [endpointNode] = node.arguments;
                    if (endpointNode?.type === typescript_estree_1.AST_NODE_TYPES.Literal && typeof endpointNode?.value === 'string') {
                        if (endpointNode.value.trim() !== '') {
                            const fetchCall = this.transformArgsToFetchCall(endpointNode);
                            callback(fetchCall);
                        }
                    }
                }
                break;
            case typescript_estree_1.AST_NODE_TYPES.MemberExpression:
                if (node.property.type === typescript_estree_1.AST_NODE_TYPES.Identifier &&
                    node.property.name === 'fetch' &&
                    parent?.type === typescript_estree_1.AST_NODE_TYPES.CallExpression) {
                    const [endpointNode] = parent.arguments;
                    if (this.endpointCanBeChecked(endpointNode)) {
                        const fetchCall = this.transformArgsToFetchCall(endpointNode);
                        callback(fetchCall);
                    }
                }
                break;
        }
    }
    endpointCanBeChecked(endpointNode) {
        const throws = (thunk) => {
            try {
                thunk();
                return false;
            }
            catch {
                return true;
            }
        };
        const isPathOnlyUrl = (s) => throws(() => new url_1.URL(s)) && !throws(() => new url_1.URL(s, 'http://example'));
        return (endpointNode?.type === typescript_estree_1.AST_NODE_TYPES.Literal &&
            typeof endpointNode?.value === 'string' &&
            endpointNode.value.trim() !== '' &&
            !isPathOnlyUrl(endpointNode.value));
    }
    transformArgsToFetchCall = (endpointNode) => ({
        type: api_call_interface_1.ApiCallTypes.EXTERNAL,
        url: endpointNode.value,
        line: endpointNode.loc.start.line,
        column: endpointNode.loc.start.column
    });
}
exports.ExternalApiCallVisitor = ExternalApiCallVisitor;
