"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageUrlVerifier = void 0;
const cli_shared_1 = require("@forge/cli-shared");
const csp_1 = require("@forge/csp");
const egress_1 = require("@forge/egress");
const linter_interface_1 = require("../../../linter-interface");
const verifier_interface_1 = require("../../verifier-interface");
const text_1 = require("../../../text");
const utils_1 = require("../../utils");
const getMicrosEnvironment = (environment) => {
    if (environment === cli_shared_1.Environments.DEV) {
        return 'dev';
    }
    else if (environment === cli_shared_1.Environments.STG) {
        return 'stg';
    }
    else if (environment === cli_shared_1.Environments.FEDRAMP_MODERATE_STAGING) {
        return 'fedramp-stg';
    }
    else if (environment === cli_shared_1.Environments.FEDRAMP_MODERATE_PROD) {
        return 'fedramp-prod';
    }
    return 'prod';
};
class ImageUrlVerifier extends verifier_interface_1.BaseLintIssueVerifier {
    egressFilteringService;
    constructor(environment, manifest) {
        super(environment, manifest);
        const microsEnv = getMicrosEnvironment((0, cli_shared_1.getEnvironmentConfig)());
        const allowList = (this.manifest?.permissions?.external?.images ?? [])
            .map((item) => (typeof item === 'object' && 'address' in item ? item.address : item))
            .filter((item) => typeof item === 'string');
        const icOptions = { icLabel: '*', serviceName: 'forge-cdn' };
        const collectedUrls = [
            ...allowList,
            ...(0, csp_1.getAtlassianImageHost)(microsEnv, icOptions),
            ...csp_1.EXTERNAL_ALLOW_LISTED_IMAGES_HOSTS
        ].filter((item) => typeof item === 'string');
        this.egressFilteringService = new egress_1.EgressFilteringService(collectedUrls);
    }
    getLintClass() {
        return linter_interface_1.LintClass.Error;
    }
    async process(imageUrls) {
        return imageUrls
            .filter(({ url }) => !this.egressFilteringService.isValidUrl(url))
            .map((imageUrl) => ({
            class: this.getLintClass(),
            message: text_1.messages.verifiers.imageUrl.message(imageUrl.url),
            reference: text_1.messages.verifiers.imageUrl.reference,
            column: imageUrl.column,
            line: imageUrl.line,
            metadata: {
                missingExternalImagesPermission: (0, utils_1.extractDomain)(imageUrl)
            }
        }));
    }
}
exports.ImageUrlVerifier = ImageUrlVerifier;
