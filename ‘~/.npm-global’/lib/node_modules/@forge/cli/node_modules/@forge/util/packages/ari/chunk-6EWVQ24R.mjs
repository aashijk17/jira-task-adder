import {
  NotionNotionDocumentAriResourceOwner,
  NotionNotionDocumentAriResourceType
} from "./chunk-HTQ3SVU2.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/notion.notion/document/manifest.ts
var notionNotionDocumentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: NotionNotionDocumentAriResourceOwner,
  resourceType: NotionNotionDocumentAriResourceType,
  resourceIdSlug: "page/{pageId}",
  resourceIdSegmentFormats: {
    pageId: /[a-z0-9-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/notion.notion/document/index.ts
var NotionNotionDocumentAri = class _NotionNotionDocumentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._pageId = opts.resourceIdSegmentValues.pageId;
  }
  get pageId() {
    return this._pageId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: notionNotionDocumentAriStaticOpts.qualifier,
      platformQualifier: notionNotionDocumentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: notionNotionDocumentAriStaticOpts.resourceOwner,
      resourceType: notionNotionDocumentAriStaticOpts.resourceType,
      resourceId: `page/${opts.pageId}`,
      resourceIdSegmentValues: {
        pageId: opts.pageId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, notionNotionDocumentAriStaticOpts);
    return new _NotionNotionDocumentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, notionNotionDocumentAriStaticOpts);
    return new _NotionNotionDocumentAri(opts);
  }
  getVariables() {
    return {
      pageId: this.pageId
    };
  }
};

export {
  NotionNotionDocumentAri
};
