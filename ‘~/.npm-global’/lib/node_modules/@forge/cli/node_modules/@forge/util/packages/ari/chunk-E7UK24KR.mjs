import {
  GithubGithubVulnerabilityAriResourceOwner,
  GithubGithubVulnerabilityAriResourceType
} from "./chunk-VMFL6DVG.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/github.github/vulnerability/manifest.ts
var githubGithubVulnerabilityAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: GithubGithubVulnerabilityAriResourceOwner,
  resourceType: GithubGithubVulnerabilityAriResourceType,
  resourceIdSlug: "{vulnerabilityId}",
  resourceIdSegmentFormats: {
    vulnerabilityId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/github.github/vulnerability/index.ts
var GithubGithubVulnerabilityAri = class _GithubGithubVulnerabilityAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._vulnerabilityId = opts.resourceIdSegmentValues.vulnerabilityId;
  }
  get vulnerabilityId() {
    return this._vulnerabilityId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: githubGithubVulnerabilityAriStaticOpts.qualifier,
      platformQualifier: githubGithubVulnerabilityAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: githubGithubVulnerabilityAriStaticOpts.resourceOwner,
      resourceType: githubGithubVulnerabilityAriStaticOpts.resourceType,
      resourceId: `${opts.vulnerabilityId}`,
      resourceIdSegmentValues: {
        vulnerabilityId: opts.vulnerabilityId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, githubGithubVulnerabilityAriStaticOpts);
    return new _GithubGithubVulnerabilityAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, githubGithubVulnerabilityAriStaticOpts);
    return new _GithubGithubVulnerabilityAri(opts);
  }
  getVariables() {
    return {
      vulnerabilityId: this.vulnerabilityId
    };
  }
};

export {
  GithubGithubVulnerabilityAri
};
