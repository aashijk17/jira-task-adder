"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateJiraActionValidator = void 0;
const text_1 = require("../../../text");
const utils_1 = require("../../../utils");
const module_types_1 = require("../../../types/module-types");
const PAGE_MODULE_TYPES = [
    module_types_1.AllModuleTypes.JiraAdminPage,
    module_types_1.AllModuleTypes.JiraProjectPage,
    module_types_1.AllModuleTypes.JiraProjectSettingsPage,
    module_types_1.AllModuleTypes.JiraGlobalPage,
    module_types_1.AllModuleTypes.JiraPersonalSettingsPage
];
const MAX_JIRA_ACTION_VALIDATORS = 1;
const MAX_ALLOWED_MODULES = MAX_JIRA_ACTION_VALIDATORS + 1;
function validateJiraActionValidator(modules, yamlContentByLine) {
    const actionValidatorModules = getActionValidatorModules(modules);
    if (actionValidatorModules.length === 0) {
        return [];
    }
    return [
        ...validateUniqueActionTypes(actionValidatorModules, yamlContentByLine),
        ...validateCompatibleModules(modules, actionValidatorModules, yamlContentByLine),
        ...validateModuleLimit(modules, actionValidatorModules, yamlContentByLine)
    ];
}
exports.validateJiraActionValidator = validateJiraActionValidator;
function getActionValidatorModules(modules) {
    const actionValidators = modules[module_types_1.AllModuleTypes.JiraActionValidator];
    return Array.isArray(actionValidators) ? actionValidators : [];
}
function createValidationError(message, key, yamlContentByLine) {
    return {
        message,
        reference: text_1.References.Modules,
        level: 'error',
        ...(0, utils_1.findPosition)(key, yamlContentByLine)
    };
}
function validateUniqueActionTypes(actionValidatorModules, yamlContentByLine) {
    if (actionValidatorModules.length <= 1) {
        return [];
    }
    const actionTypeGroups = new Map();
    actionValidatorModules.forEach((module) => {
        const actionType = module.action || 'unknown';
        const group = actionTypeGroups.get(actionType) || [];
        group.push(module);
        actionTypeGroups.set(actionType, group);
    });
    return Array.from(actionTypeGroups.entries())
        .filter(([, modules]) => modules.length > MAX_JIRA_ACTION_VALIDATORS)
        .flatMap(([actionType, modules]) => modules.map((module) => createValidationError(text_1.errors.modules.jiraActionValidator.limitPerActionType(actionType, MAX_JIRA_ACTION_VALIDATORS), module.key, yamlContentByLine)));
}
function validateCompatibleModules(modules, actionValidatorModules, yamlContentByLine) {
    const incompatibleModules = getIncompatibleModules(modules);
    if (incompatibleModules.length === 0) {
        return [];
    }
    return actionValidatorModules.map((module) => createValidationError(text_1.errors.modules.jiraActionValidator.incompatibleModules(incompatibleModules), module.key, yamlContentByLine));
}
function getIncompatibleModules(modules) {
    const moduleTypes = Object.keys(modules);
    const otherModules = moduleTypes.filter((type) => type !== module_types_1.AllModuleTypes.JiraActionValidator);
    return otherModules.filter((moduleType) => {
        const isPageModule = PAGE_MODULE_TYPES.includes(moduleType);
        const isCoreFunction = moduleType === module_types_1.AllModuleTypes.CoreFunction;
        return !isPageModule && !isCoreFunction;
    });
}
function validateModuleLimit(modules, actionValidatorModules, yamlContentByLine) {
    const nonCoreModuleCount = getNonCoreModuleCount(modules);
    if (nonCoreModuleCount <= MAX_ALLOWED_MODULES) {
        return [];
    }
    return actionValidatorModules.map((module) => createValidationError(text_1.errors.modules.jiraActionValidator.tooManyModules(nonCoreModuleCount, MAX_JIRA_ACTION_VALIDATORS), module.key, yamlContentByLine));
}
function getNonCoreModuleCount(modules) {
    return Object.entries(modules)
        .filter(([moduleType]) => !moduleType.startsWith('core:'))
        .reduce((total, [, moduleArray]) => {
        return total + (Array.isArray(moduleArray) ? moduleArray.length : 0);
    }, 0);
}
