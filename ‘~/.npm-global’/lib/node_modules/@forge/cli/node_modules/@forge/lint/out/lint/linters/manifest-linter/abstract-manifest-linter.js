"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractManifestLinter = void 0;
const manifest_1 = require("@forge/manifest");
const linter_interface_1 = require("../../linter-interface");
const abstract_linter_1 = require("../../abstract-linter");
class AbstractManifestLinter extends abstract_linter_1.AbstractLinter {
    type;
    processor;
    statsigService;
    constructor(type, logger, statsigService) {
        super(logger);
        this.type = type;
        this.statsigService = statsigService;
    }
    mapManifestResponse(results, fixer) {
        const manifestLintResults = new linter_interface_1.LintResult(manifest_1.MANIFEST_FILE, fixer);
        manifestLintResults.batchAdd(...(this.getResultsForFixer(results).map(({ level, message, line, column, reference, metadata }) => {
            return {
                class: level,
                message,
                reference,
                line,
                column,
                metadata
            };
        }) ?? []).sort((a, b) => a.line - b.line));
        return manifestLintResults;
    }
    getProcessor() {
        return this.processor;
    }
    async batchExecuteImpl() {
        if (!this.processor) {
            throw new Error('Bootstrap failed');
        }
        const results = await this.processor.process();
        return [this.mapManifestResponse(results, this.getFixer())];
    }
    async bootstrap() {
        this.processor = manifest_1.ProcessorBuilder.instance()
            .withValidation(this.type)
            .withOptions(await this.getOptions())
            .build();
        return Promise.resolve();
    }
    async getOptions() {
        const options = {
            deprecatedRuntimes: await this.statsigService.getDeprecatedRuntimes()
        };
        return options;
    }
    getFixer() {
        return undefined;
    }
    getResultsForFixer(results) {
        return results.errors?.filter((error) => !error.metadata) || [];
    }
}
exports.AbstractManifestLinter = AbstractManifestLinter;
