"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCommonWebpackConfig = exports.geti18nRule = exports.getDevToolConfig = exports.resolveStubPath = exports.resolveModulePath = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const webpack_1 = tslib_1.__importDefault(require("webpack"));
const cli_shared_1 = require("@forge/cli-shared");
const i18n_1 = require("@forge/i18n");
const common_1 = require("../common");
const text_1 = require("../text");
const tsconfig_interactor_1 = require("../tsconfig-interactor");
const resolveModulePath = (moduleName) => {
    return require.resolve(moduleName);
};
exports.resolveModulePath = resolveModulePath;
function resolveStubPath(stubName) {
    return (0, exports.resolveModulePath)(`../stubs/${stubName}`);
}
exports.resolveStubPath = resolveStubPath;
const getDevToolConfig = ({ watchMode }) => {
    if (!watchMode) {
        return 'source-map';
    }
    return watchMode === 'debug' ? 'inline-source-map' : 'cheap-source-map';
};
exports.getDevToolConfig = getDevToolConfig;
const geti18nRule = (i18nConfig) => {
    const i18nResources = i18nConfig.resources || [];
    const i18nResourcesMap = new Map(i18nResources.map(({ key, path: resource }) => [path_1.default.resolve(resource), key]));
    const getFilename = ({ module: { resource: i18nResourcePath } }) => {
        const i18nResourceKey = i18nResourcesMap.get(i18nResourcePath);
        return path_1.default.join(i18n_1.I18N_BUNDLE_FOLDER_NAME, `${i18nResourceKey}.json`);
    };
    return {
        test: /\.json$/i,
        include: Array.from(i18nResourcesMap.keys()),
        type: 'asset/resource',
        generator: {
            filename: getFilename
        }
    };
};
exports.geti18nRule = geti18nRule;
const getCommonWebpackConfig = (args) => {
    if (!require.main) {
        throw new Error(text_1.Text.noExecutableFile);
    }
    const { entryPoints, appDirectory } = args;
    const resolvedEntryPoints = {};
    for (const entrypoint of entryPoints) {
        resolvedEntryPoints[entrypoint.name] = path_1.default.resolve(entrypoint.path);
    }
    const outputDir = (0, common_1.getOutputDir)(args);
    return {
        entry: resolvedEntryPoints,
        mode: 'production',
        optimization: {
            minimize: false
        },
        devtool: (0, exports.getDevToolConfig)(args),
        output: {
            libraryTarget: 'commonjs',
            globalObject: 'this',
            filename: '[name].js',
            path: outputDir
        },
        node: {
            __dirname: true
        },
        performance: false,
        resolve: {
            extensions: ['.ts', '.tsx', '.js', '.jsx', '.json']
        },
        resolveLoader: {
            modules: require.resolve.paths('babel-loader') || undefined
        },
        plugins: [
            new webpack_1.default.IgnorePlugin({ resourceRegExp: /^encoding$/, contextRegExp: /node-fetch/ }),
            new webpack_1.default.IgnorePlugin({ resourceRegExp: /^(bufferutil|utf-8-validate)$/, contextRegExp: /ws\/lib$/ }),
            new webpack_1.default.IgnorePlugin({ resourceRegExp: /^dtrace-provider$/, contextRegExp: /bunyan$/ })
        ],
        module: {
            rules: [
                {
                    test: /\.jsx?$/,
                    exclude: /node_modules/,
                    use: [
                        {
                            loader: 'babel-loader',
                            options: {
                                plugins: [
                                    (0, exports.resolveModulePath)('@babel/plugin-transform-numeric-separator'),
                                    (0, exports.resolveModulePath)('@babel/plugin-transform-class-static-block'),
                                    (0, exports.resolveModulePath)('@babel/plugin-transform-class-properties'),
                                    (0, exports.resolveModulePath)('@babel/plugin-transform-optional-chaining')
                                ],
                                cacheDirectory: true
                            }
                        }
                    ]
                },
                {
                    test: /\.tsx?$/,
                    exclude: /node_modules/,
                    use: [
                        {
                            loader: 'ts-loader',
                            options: {
                                compilerOptions: {
                                    jsx: 'react',
                                    jsxFactory: 'ForgeUI.createElement',
                                    sourceMap: true
                                },
                                configFile: new tsconfig_interactor_1.TSConfigInteractor(new cli_shared_1.FileSystemReader(), appDirectory).getTSConfigPath(),
                                context: appDirectory,
                                onlyCompileBundledFiles: true
                            }
                        }
                    ]
                }
            ]
        }
    };
};
exports.getCommonWebpackConfig = getCommonWebpackConfig;
