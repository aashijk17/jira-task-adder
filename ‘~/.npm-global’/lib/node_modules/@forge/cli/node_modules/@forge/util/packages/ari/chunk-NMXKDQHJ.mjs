import {
  ConfluenceDcSpaceAriResourceOwner,
  ConfluenceDcSpaceAriResourceType
} from "./chunk-AM4IDFUS.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/confluence-dc/space/manifest.ts
var confluenceDcSpaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: ConfluenceDcSpaceAriResourceOwner,
  resourceType: ConfluenceDcSpaceAriResourceType,
  resourceIdSlug: "{siteId}/{spaceId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9_\-.]{1,255}/,
    // eslint-disable-line no-useless-escape
    spaceId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence-dc/space/index.ts
var ConfluenceDcSpaceAri = class _ConfluenceDcSpaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId, this._spaceId = opts.resourceIdSegmentValues.spaceId;
  }
  get siteId() {
    return this._siteId;
  }
  get spaceId() {
    return this._spaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceDcSpaceAriStaticOpts.qualifier,
      platformQualifier: confluenceDcSpaceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: confluenceDcSpaceAriStaticOpts.resourceOwner,
      resourceType: confluenceDcSpaceAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}/${opts.spaceId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId,
        spaceId: opts.spaceId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceDcSpaceAriStaticOpts);
    return new _ConfluenceDcSpaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceDcSpaceAriStaticOpts);
    return new _ConfluenceDcSpaceAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      spaceId: this.spaceId
    };
  }
};

export {
  ConfluenceDcSpaceAri
};
