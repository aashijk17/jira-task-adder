"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getScopesWithInteractiveConsent = exports.getMissingScopes = void 0;
const tslib_1 = require("tslib");
const scopes_1 = require("../utils/scopes");
const shipyard_scopes_with_interactive_consent_json_1 = tslib_1.__importDefault(require("./shipyard-scopes-with-interactive-consent.json"));
async function getMissingScopes(existing, required) {
    const { current: requiredCurrentScopes = [], beta: requiredBetaScopes = [], deprecated: requiredDeprecatedScopes = [] } = required;
    const existingScopes = existing ? (0, scopes_1.getAllScopeKeys)(existing) : [];
    if (!existingScopes.length) {
        return requiredCurrentScopes;
    }
    if (requiredCurrentScopes.length === 0)
        return [];
    const missingCurrent = requiredCurrentScopes.filter((scope) => !existingScopes.includes(scope));
    if (missingCurrent.length === 0)
        return [];
    const missingBeta = requiredBetaScopes.filter((scope) => !existingScopes.includes(scope));
    if (requiredBetaScopes.length && missingBeta.length === 0)
        return [];
    const missingDeprecated = requiredDeprecatedScopes.filter((scope) => !existingScopes.includes(scope));
    if (requiredDeprecatedScopes.length && missingDeprecated.length === 0)
        return [];
    return missingCurrent;
}
exports.getMissingScopes = getMissingScopes;
function getScopesWithInteractiveConsent() {
    return new Set(shipyard_scopes_with_interactive_consent_json_1.default);
}
exports.getScopesWithInteractiveConsent = getScopesWithInteractiveConsent;
