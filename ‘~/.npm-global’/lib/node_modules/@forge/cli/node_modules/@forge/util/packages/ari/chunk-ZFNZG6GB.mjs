import {
  TrelloStickerAriResourceOwner,
  TrelloStickerAriResourceType
} from "./chunk-YKQLTY3Z.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/trello/sticker/manifest.ts
var trelloStickerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloStickerAriResourceOwner,
  resourceType: TrelloStickerAriResourceType,
  resourceIdSlug: "{customStickerId}",
  resourceIdSegmentFormats: {
    customStickerId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/sticker/index.ts
var TrelloStickerAri = class _TrelloStickerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._customStickerId = opts.resourceIdSegmentValues.customStickerId;
  }
  get customStickerId() {
    return this._customStickerId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloStickerAriStaticOpts.qualifier,
      platformQualifier: trelloStickerAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloStickerAriStaticOpts.resourceOwner,
      resourceType: trelloStickerAriStaticOpts.resourceType,
      resourceId: `${opts.customStickerId}`,
      resourceIdSegmentValues: {
        customStickerId: opts.customStickerId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloStickerAriStaticOpts);
    return new _TrelloStickerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloStickerAriStaticOpts);
    return new _TrelloStickerAri(opts);
  }
  getVariables() {
    return {
      customStickerId: this.customStickerId
    };
  }
};

export {
  TrelloStickerAri
};
