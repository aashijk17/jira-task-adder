"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runLinter = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const cli_shared_1 = require("@forge/cli-shared");
const lint_1 = require("@forge/lint");
const common_1 = require("./common");
async function runLinter(statsigService, logger = { info: console.log }, fileSystemReader = new cli_shared_1.FileSystemReader(), fileSystemWriter = new cli_shared_1.FileSystemWriter()) {
    logger.info(`\n${cli_shared_1.Text.tunnel.preBundleTask(cli_shared_1.Text.lint.running)}`);
    const exclude = [...(await (0, cli_shared_1.listGitIgnoreFiles)(fileSystemReader)), '.git', common_1.NODE_MODULES_DIR];
    const configFile = new cli_shared_1.ConfigFile(fileSystemReader, fileSystemWriter);
    const manifest = await configFile.readConfig();
    const UIKitResources = await configFile.getResources(['nativeUI']);
    const UIKitDirectories = UIKitResources.map((resource) => path_1.default.dirname(resource.path));
    const [filesToLint, ...UIKitFilesByDirectory] = await Promise.all([
        fileSystemReader.recursiveReadDir('./src', exclude),
        ...UIKitDirectories.map((directory) => fileSystemReader.recursiveReadDir(directory, exclude))
    ]);
    const UIKitFilesToLint = UIKitFilesByDirectory.reduce((allFiles, directoryFiles) => allFiles.concat(directoryFiles), []);
    try {
        const lintResults = await (0, lint_1.lint)([...filesToLint, ...UIKitFilesToLint], manifest, 'development', logger, statsigService);
        if (lintResults.some((result) => result.size())) {
            logger.info('');
            (0, lint_1.reportLintResults)(logger, lintResults);
        }
        else {
            logger.info(cli_shared_1.LogColor.trace(cli_shared_1.Text.lint.noProblems) + '\n');
        }
    }
    catch (error) {
        logger.info(cli_shared_1.Text.tunnel.lintFailed + '\n');
    }
}
exports.runLinter = runLinter;
