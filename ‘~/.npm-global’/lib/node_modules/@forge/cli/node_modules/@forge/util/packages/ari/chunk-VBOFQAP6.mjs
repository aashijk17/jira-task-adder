import {
  GoogleGoogleCalendarCalendarEventAriResourceOwner,
  GoogleGoogleCalendarCalendarEventAriResourceType
} from "./chunk-DUGKATMK.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/google.google-calendar/calendar-event/manifest.ts
var googleGoogleCalendarCalendarEventAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: GoogleGoogleCalendarCalendarEventAriResourceOwner,
  resourceType: GoogleGoogleCalendarCalendarEventAriResourceType,
  resourceIdSlug: "calendarId/{calendarId}/eventId/{eventId}",
  resourceIdSegmentFormats: {
    calendarId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/,
    // eslint-disable-line no-useless-escape
    eventId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/google.google-calendar/calendar-event/index.ts
var GoogleGoogleCalendarCalendarEventAri = class _GoogleGoogleCalendarCalendarEventAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._calendarId = opts.resourceIdSegmentValues.calendarId, this._eventId = opts.resourceIdSegmentValues.eventId;
  }
  get calendarId() {
    return this._calendarId;
  }
  get eventId() {
    return this._eventId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: googleGoogleCalendarCalendarEventAriStaticOpts.qualifier,
      platformQualifier: googleGoogleCalendarCalendarEventAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: googleGoogleCalendarCalendarEventAriStaticOpts.resourceOwner,
      resourceType: googleGoogleCalendarCalendarEventAriStaticOpts.resourceType,
      resourceId: `calendarId/${opts.calendarId}/eventId/${opts.eventId}`,
      resourceIdSegmentValues: {
        calendarId: opts.calendarId,
        eventId: opts.eventId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, googleGoogleCalendarCalendarEventAriStaticOpts);
    return new _GoogleGoogleCalendarCalendarEventAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, googleGoogleCalendarCalendarEventAriStaticOpts);
    return new _GoogleGoogleCalendarCalendarEventAri(opts);
  }
  getVariables() {
    return {
      calendarId: this.calendarId,
      eventId: this.eventId
    };
  }
};

export {
  GoogleGoogleCalendarCalendarEventAri
};
