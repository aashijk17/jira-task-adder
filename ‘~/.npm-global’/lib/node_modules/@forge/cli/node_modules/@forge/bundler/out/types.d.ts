import { I18nResourceBundle, UserError } from '@forge/cli-shared';
import { Translations } from '@forge/manifest';
export declare type BundlerMetadata = {
    modules?: string[];
    jsFiles: number;
    tsFiles: number;
    esm: boolean;
    dependencies: Set<string>;
    sdkImports: Set<string>;
    errors: number;
    bundler?: string;
};
export declare function emptyMetadata(): BundlerMetadata;
export declare function mergeMetadata(metadata1: BundlerMetadata, metadata2: BundlerMetadata): BundlerMetadata;
export interface BundlerOutput {
    outputDir: string;
    metadata?: BundlerMetadata;
}
export declare type BundlerWatchMode = 'watch' | 'debug';
export declare type EntryPoint = {
    name: string;
    path: string;
};
export declare type BundlerArgs = {
    appDirectory: string;
    entryPoints: EntryPoint[];
    watchMode?: BundlerWatchMode;
    i18nConfig?: Translations;
    i18nResourceBundle?: I18nResourceBundle;
};
export declare type BundlerWatchArgs = BundlerArgs & Required<Pick<BundlerArgs, 'watchMode'>> & {
    successMessage: string;
};
export declare type BundlerWatch = {
    onBuildWillStart: () => Promise<void>;
    onBuildFinished: ((err: null, result: BundlerOutput) => Promise<void>) & ((err: Error) => Promise<void>);
};
export interface WatcherMonitor {
    stop(): void;
}
export declare type BundlerWatchOutput = WatcherMonitor & {
    result: BundlerOutput;
};
export declare type Bundler = {
    bundle(args: BundlerArgs): Promise<BundlerOutput>;
    watch(args: BundlerWatchArgs, watch: BundlerWatch): Promise<BundlerWatchOutput>;
};
export declare class BundlerError extends UserError {
}
//# sourceMappingURL=types.d.ts.map