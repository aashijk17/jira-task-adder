"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProductTriggerScopesValidator = void 0;
const text_1 = require("../text");
const utils_1 = require("../utils");
const scopes_1 = require("../scopes");
class ProductTriggerScopesValidator {
    config;
    constructor(config) {
        this.config = config;
    }
    async validate(manifest) {
        if (!manifest || !manifest.typedContent) {
            return {
                success: false,
                manifestObject: manifest
            };
        }
        const validationErrors = [];
        const getRequiredScopes = (productEvent) => {
            const emptyRequiredScopes = { current: [] };
            return (this.config.mapping.find((value) => value.productEvent == productEvent)?.oAuthScopes || emptyRequiredScopes);
        };
        const addValidationError = (scope, event) => {
            validationErrors.push({
                message: text_1.errors.permissions.missingPermissionFromScope(scope, event),
                reference: text_1.References.MissingScopes,
                level: 'error',
                metadata: {
                    missingPermission: scope
                },
                ...(0, utils_1.findPosition)('scopes', manifest.yamlContentByLine)
            });
        };
        if (!manifest.typedContent.modules || !manifest.typedContent.modules.trigger) {
            return {
                success: true,
                manifestObject: manifest
            };
        }
        const manifestScopes = manifest.typedContent.permissions?.scopes || [];
        for (const element of manifest.typedContent.modules.trigger) {
            for (const event of element.events) {
                const requiredScopes = getRequiredScopes(event);
                const missingScopes = await (0, scopes_1.getMissingScopes)(manifestScopes, requiredScopes);
                missingScopes.forEach((scope) => addValidationError(scope, event));
            }
        }
        return {
            success: validationErrors.length === 0,
            manifestObject: manifest,
            errors: validationErrors
        };
    }
}
exports.ProductTriggerScopesValidator = ProductTriggerScopesValidator;
