"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebuggingGraphqlRunner = exports.stringify = void 0;
const ui_1 = require("../ui");
function stringify(variables) {
    return JSON.stringify(variables, null, 2);
}
exports.stringify = stringify;
class DebuggingGraphqlRunner {
    innerClient;
    endpoint;
    logger;
    sensitivePatterns = [/X-Amz-Security-Token/i];
    constructor(innerClient, endpoint, logger) {
        this.innerClient = innerClient;
        this.endpoint = endpoint;
        this.logger = logger;
    }
    filterSensitiveData(data) {
        if (!data)
            return data;
        if (Array.isArray(data)) {
            return data.map((item) => this.filterSensitiveData(item));
        }
        if (typeof data === 'object' && data !== null) {
            const filtered = { ...data };
            for (const key of Object.keys(filtered)) {
                if (this.sensitivePatterns.some((pattern) => pattern.test(key))) {
                    delete filtered[key];
                }
                else if (typeof filtered[key] === 'object' && filtered[key] !== null) {
                    filtered[key] = this.filterSensitiveData(filtered[key]);
                }
            }
            return filtered;
        }
        return data;
    }
    async run(query, variables) {
        const filteredVariables = this.filterSensitiveData(variables);
        this.logger.trace(ui_1.Text.graphQL.request(this.endpoint, query, stringify(filteredVariables)));
        const { requestId, response } = await this.innerClient.run(query, variables);
        const filteredResponse = this.filterSensitiveData(response);
        this.logger.trace(ui_1.Text.graphQL.response(stringify(filteredResponse), requestId));
        return { requestId, response };
    }
}
exports.DebuggingGraphqlRunner = DebuggingGraphqlRunner;
