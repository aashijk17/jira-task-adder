import {
  JiraSoftwareSprintAriResourceOwner,
  JiraSoftwareSprintAriResourceType
} from "./chunk-F7CN45E2.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/jira-software/sprint/manifest.ts
var jiraSoftwareSprintAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9_\\-.]{1,255}$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: JiraSoftwareSprintAriResourceOwner,
  resourceType: JiraSoftwareSprintAriResourceType,
  resourceIdSlug: "{sprintId}",
  resourceIdSegmentFormats: {
    sprintId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira-software/sprint/index.ts
var JiraSoftwareSprintAri = class _JiraSoftwareSprintAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._sprintId = opts.resourceIdSegmentValues.sprintId;
  }
  get siteId() {
    return this._siteId;
  }
  get sprintId() {
    return this._sprintId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraSoftwareSprintAriStaticOpts.qualifier,
      platformQualifier: jiraSoftwareSprintAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraSoftwareSprintAriStaticOpts.resourceOwner,
      resourceType: jiraSoftwareSprintAriStaticOpts.resourceType,
      resourceId: `${opts.sprintId}`,
      resourceIdSegmentValues: {
        sprintId: opts.sprintId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraSoftwareSprintAriStaticOpts);
    return new _JiraSoftwareSprintAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraSoftwareSprintAriStaticOpts);
    return new _JiraSoftwareSprintAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      sprintId: this.sprintId
    };
  }
};

export {
  JiraSoftwareSprintAri
};
