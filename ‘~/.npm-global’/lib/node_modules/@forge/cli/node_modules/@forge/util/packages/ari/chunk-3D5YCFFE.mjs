import {
  CiscoWebexRemoteLinkAriResourceOwner,
  CiscoWebexRemoteLinkAriResourceType
} from "./chunk-TKNCDH7M.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/cisco.webex/remote-link/manifest.ts
var ciscoWebexRemoteLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: CiscoWebexRemoteLinkAriResourceOwner,
  resourceType: CiscoWebexRemoteLinkAriResourceType,
  resourceIdSlug: "recording/{recordingId}",
  resourceIdSegmentFormats: {
    recordingId: /[a-zA-Z0-9]{32}/
    // eslint-disable-line no-useless-escape
  }
};

// src/cisco.webex/remote-link/index.ts
var CiscoWebexRemoteLinkAri = class _CiscoWebexRemoteLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._recordingId = opts.resourceIdSegmentValues.recordingId;
  }
  get recordingId() {
    return this._recordingId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ciscoWebexRemoteLinkAriStaticOpts.qualifier,
      platformQualifier: ciscoWebexRemoteLinkAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ciscoWebexRemoteLinkAriStaticOpts.resourceOwner,
      resourceType: ciscoWebexRemoteLinkAriStaticOpts.resourceType,
      resourceId: `recording/${opts.recordingId}`,
      resourceIdSegmentValues: {
        recordingId: opts.recordingId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ciscoWebexRemoteLinkAriStaticOpts);
    return new _CiscoWebexRemoteLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ciscoWebexRemoteLinkAriStaticOpts);
    return new _CiscoWebexRemoteLinkAri(opts);
  }
  getVariables() {
    return {
      recordingId: this.recordingId
    };
  }
};

export {
  CiscoWebexRemoteLinkAri
};
