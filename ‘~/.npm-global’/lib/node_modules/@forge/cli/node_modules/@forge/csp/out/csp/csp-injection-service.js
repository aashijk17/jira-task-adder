"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CSPInjectionService = exports.EXTERNAL_ALLOW_LISTED_IMAGES_HOSTS = exports.getAtlassianImageHost = void 0;
const types_1 = require("../types");
const isICEnvKey = (env) => env === 'ic-prod' || env === 'ic-stg';
const makeICDomain = (env, icLabel) => `${icLabel}.${env === 'ic-prod' ? 'atlassian-isolated.net' : 'oasis-stg.com'}`;
const getICDomain = (env, icOptions) => {
    if ('getICDomain' in icOptions) {
        return icOptions.getICDomain();
    }
    return makeICDomain(env, icOptions.icLabel);
};
const makeICHosts = (targetHostFunction) => {
    return {
        'ic-stg': (icOptions) => targetHostFunction('ic-stg', icOptions),
        'ic-prod': (icOptions) => targetHostFunction('ic-prod', icOptions)
    };
};
const ATLASSIAN_HOST = {
    ATLASSIAN_API_GATEWAY_HOST: {
        dev: 'https://api.dev.atlassian.com',
        stg: 'https://api.stg.atlassian.com',
        prod: 'https://api.atlassian.com',
        'fedramp-stg': 'https://api.stg.atlassian-us-gov-mod.com',
        'fedramp-prod': 'https://api.atlassian-us-gov-mod.com',
        ...makeICHosts((env, icOptions) => `https://api.${getICDomain(env, icOptions)}`)
    },
    ATLASSIAN_MEDIA_GATEWAY_HOST: {
        dev: 'https://media.dev.atl-paas.net',
        stg: 'https://media.staging.atl-paas.net',
        prod: 'https://api.media.atlassian.com',
        'fedramp-stg': 'https://api-media.stg.atlassian-us-gov-mod.com',
        'fedramp-prod': 'https://api-media.atlassian-us-gov-mod.com',
        ...makeICHosts((env, icOptions) => `https://media-api.${getICDomain(env, icOptions)}`)
    },
    ATLASSIAN_AVATAR_HOST: {
        dev: 'avatar-management--avatars.us-west-2.staging.public.atl-paas.net',
        stg: 'avatar-management--avatars.us-west-2.staging.public.atl-paas.net',
        prod: 'avatar-management--avatars.us-west-2.prod.public.atl-paas.net',
        'fedramp-stg': 'avatar-management--avatars.us-east-1.staging.cdn.atlassian-us-gov-mod.com',
        'fedramp-prod': 'avatar-management--avatars.us-east-1.prod.cdn.atlassian-us-gov-mod.com',
        'ic-stg': (_icOptions) => 'avatar-management--avatars.us-west-2.staging.public.atl-paas.net',
        'ic-prod': (_icOptions) => 'avatar-management--avatars.us-west-2.prod.public.atl-paas.net'
    },
    ATLASSIAN_TEAM_HEADER_HOST: {
        dev: 'https://teams-directory-frontend.stg-east.frontend.public.atl-paas.net/assets/gradients/',
        stg: 'https://teams-directory-frontend.stg-east.frontend.public.atl-paas.net/assets/gradients/',
        prod: 'https://teams-directory-frontend.prod-east.frontend.public.atl-paas.net/assets/gradients/',
        'fedramp-stg': 'https://teams-directory-frontend.frontend.cdn.atlassian-us-gov-mod.com/assets/',
        'fedramp-prod': 'https://teams-directory-frontend.frontend.cdn.atlassian-us-gov-mod.com/assets/',
        ...makeICHosts((env, icOptions) => `https://teams-directory-frontend.services.${getICDomain(env, icOptions)}/bfa/`)
    },
    ATLASSIAN_TEAM_AVATAR_HOST: {
        dev: 'https://teams-directory-frontend.stg-east.frontend.public.atl-paas.net/assets/',
        stg: 'https://teams-directory-frontend.stg-east.frontend.public.atl-paas.net/assets/',
        prod: 'https://teams-directory-frontend.prod-east.frontend.public.atl-paas.net/assets/',
        'fedramp-stg': 'https://teams-directory-frontend.frontend.cdn.atlassian-us-gov-mod.com/assets/',
        'fedramp-prod': 'https://teams-directory-frontend.frontend.cdn.atlassian-us-gov-mod.com/assets/',
        ...makeICHosts((env, icOptions) => `https://teams-directory-frontend.services.${getICDomain(env, icOptions)}/bfa/`)
    },
    ATLASSIAN_EMOJIS_HOST: {
        dev: 'https://pf-emoji-service--cdn.ap-southeast-2.dev.public.atl-paas.net',
        stg: 'https://pf-emoji-service--cdn.us-east-1.staging.public.atl-paas.net',
        prod: 'https://pf-emoji-service--cdn.us-east-1.prod.public.atl-paas.net',
        'fedramp-stg': 'https://pf-emoji-service--cdn.us-east-1.staging.cdn.atlassian-us-gov-mod.com',
        'fedramp-prod': 'https://pf-emoji-service--cdn.us-east-1.prod.cdn.atlassian-us-gov-mod.com',
        ...makeICHosts((env, icOptions) => `https://pf-emoji-service.${getICDomain(env, icOptions)}`)
    },
    ATLASSIAN_FOP_GE_HOST: {
        dev: 'https://forge-outbound-proxy.dev.services.atlassian.com',
        stg: 'https://forge-outbound-proxy.stg.services.atlassian.com',
        prod: 'https://forge-outbound-proxy.services.atlassian.com',
        'fedramp-stg': '',
        'fedramp-prod': '',
        ...makeICHosts((env, icOptions) => '')
    }
};
const getAtlassianHost = (hostType, microsEnv, icOptions) => {
    const hostMap = ATLASSIAN_HOST[hostType];
    if (isICEnvKey(microsEnv)) {
        if (!icOptions) {
            throw new Error('Missing IC label');
        }
        return hostMap[microsEnv](icOptions);
    }
    return hostMap[microsEnv];
};
const getAtlassianImageHost = (microsEnv, icOptions) => {
    return [
        `https://${getAtlassianHost('ATLASSIAN_AVATAR_HOST', microsEnv, icOptions)}`,
        `https://*.wp.com/${getAtlassianHost('ATLASSIAN_AVATAR_HOST', microsEnv, icOptions)}/`,
        getAtlassianHost('ATLASSIAN_API_GATEWAY_HOST', microsEnv, icOptions),
        getAtlassianHost('ATLASSIAN_MEDIA_GATEWAY_HOST', microsEnv, icOptions),
        getAtlassianHost('ATLASSIAN_EMOJIS_HOST', microsEnv, icOptions),
        getAtlassianHost('ATLASSIAN_TEAM_AVATAR_HOST', microsEnv, icOptions),
        getAtlassianHost('ATLASSIAN_TEAM_HEADER_HOST', microsEnv, icOptions)
    ];
};
exports.getAtlassianImageHost = getAtlassianImageHost;
exports.EXTERNAL_ALLOW_LISTED_IMAGES_HOSTS = ['https://secure.gravatar.com', 'https://images.unsplash.com'];
class CSPInjectionService {
    constructor() {
        this.getInjectableCSP = ({ existingCSPDetails, microsEnv, tunnelCSPReporterUri, hostname, isFedRAMP, icOptions }) => {
            const reportUri = tunnelCSPReporterUri || this.getCSPReportUri(microsEnv, icOptions);
            const defaultSrc = `'self'`;
            const frameAncestors = ["'self'", ...this.getFrameAncestors(microsEnv, hostname, icOptions)].join(' ');
            const frameSrc = ["'self'", hostname, ...this.getExistingCSPDetails(types_1.ExternalCspType.FRAME_SRC, existingCSPDetails)]
                .filter((a) => a)
                .join(' ');
            const fontSrc = ["'self'", ...this.getExistingCSPDetails(types_1.ExternalCspType.FONT_SRC, existingCSPDetails)].join(' ');
            const imgSrc = [
                "'self'",
                'data:',
                'blob:',
                hostname,
                ...exports.EXTERNAL_ALLOW_LISTED_IMAGES_HOSTS,
                ...(0, exports.getAtlassianImageHost)(microsEnv, icOptions),
                ...this.getExistingCSPDetails(types_1.ExternalCspType.IMG_SRC, existingCSPDetails)
            ]
                .filter((a) => a)
                .join(' ');
            const mediaSrc = [
                "'self'",
                'data:',
                'blob:',
                hostname,
                getAtlassianHost('ATLASSIAN_MEDIA_GATEWAY_HOST', microsEnv, icOptions),
                ...this.getExistingCSPDetails(types_1.ExternalCspType.MEDIA_SRC, existingCSPDetails)
            ]
                .filter((a) => a)
                .join(' ');
            const connectSrc = [
                "'self'",
                ...this.getConnectSrc(microsEnv, !!tunnelCSPReporterUri, icOptions),
                ...this.getExistingCSPDetails(types_1.ExternalCspType.CONNECT_SRC, existingCSPDetails)
            ].join(' ');
            const scriptSrc = [
                "'self'",
                this.getForgeGlobalCSP(microsEnv, isFedRAMP, icOptions),
                ...this.getExistingCSPDetails(types_1.ExternalCspType.SCRIPT_SRC, existingCSPDetails)
            ].join(' ');
            const styleSrc = [
                "'self'",
                hostname,
                this.getForgeGlobalCSP(microsEnv, isFedRAMP, icOptions),
                ...this.getExistingCSPDetails(types_1.ExternalCspType.STYLE_SRC, existingCSPDetails)
            ]
                .filter((a) => a)
                .join(' ');
            return [
                `default-src ${defaultSrc}`,
                `frame-ancestors ${frameAncestors}`,
                `frame-src ${frameSrc}`,
                `font-src ${fontSrc}`,
                `img-src ${imgSrc}`,
                `media-src ${mediaSrc}`,
                `connect-src ${connectSrc}`,
                `script-src ${scriptSrc}`,
                `style-src ${styleSrc}`,
                `form-action 'self'`,
                `sandbox allow-popups allow-popups-to-escape-sandbox allow-downloads allow-forms allow-modals allow-pointer-lock allow-same-origin allow-scripts`,
                `report-uri ${reportUri}`
            ];
        };
    }
    getCSPReportUri(microsEnv, icOptions) {
        const serviceName = isICEnvKey(microsEnv) && icOptions ? icOptions.serviceName : 'forge-cdn';
        if (microsEnv === 'dev' || microsEnv === 'stg')
            return `https://web-security-reports.stg.services.atlassian.com/csp-report/${serviceName}`;
        return `https://web-security-reports.services.atlassian.com/csp-report/${serviceName}`;
    }
    getForgeGlobalCSP(microsEnv, isFedRAMP = false, icOptions) {
        if (isICEnvKey(microsEnv) && icOptions) {
            return `https://forge.forge-cdn.${getICDomain(microsEnv, icOptions)}`;
        }
        return isFedRAMP
            ? `https://forge.cdn.${microsEnv.split('-')[1]}.atlassian-dev-us-gov-mod.net`
            : `https://forge.cdn.${microsEnv}.atlassian-dev.net`;
    }
    getMetalClientCSP(microsEnv, icOptions) {
        if (isICEnvKey(microsEnv) && icOptions) {
            return `https://api.${getICDomain(microsEnv, icOptions)}/metal/ingest`;
        }
        return `https://api.${microsEnv === 'prod' ? '' : 'stg.'}atlassian.com/metal/ingest`;
    }
    getExistingCSPDetails(cspType, cspDetails) {
        var _a;
        return (_a = cspDetails[cspType]) !== null && _a !== void 0 ? _a : [];
    }
    getConnectSrc(microsEnv, isTunnelling, icOptions) {
        const allowed = [];
        if (isTunnelling) {
            allowed.push(...['ws://localhost:*', 'http://localhost:*']);
        }
        const metalClientCSP = this.getMetalClientCSP(microsEnv, icOptions);
        allowed.push(metalClientCSP);
        allowed.push(`${getAtlassianHost('ATLASSIAN_API_GATEWAY_HOST', microsEnv, icOptions)}/gateway/api/emoji/`);
        allowed.push(getAtlassianHost('ATLASSIAN_MEDIA_GATEWAY_HOST', microsEnv, icOptions));
        const fopGeHost = getAtlassianHost('ATLASSIAN_FOP_GE_HOST', microsEnv, icOptions);
        if (fopGeHost) {
            allowed.push(fopGeHost);
        }
        return allowed;
    }
    getFrameAncestors(microsEnv, hostname, icOptions) {
        let frameAncestors = [];
        switch (microsEnv) {
            case 'dev':
            case 'stg':
                frameAncestors = [
                    '*.jira-dev.com',
                    'http://localhost:*',
                    'http://devbucket.localhost',
                    'https://integration.bb-inf.net',
                    '*.atl-paas.net',
                    '*.stg.atlassian.com'
                ];
                break;
            case 'fedramp-stg':
                frameAncestors = ['*.atlassian-stg-fedm.net'];
                break;
            case 'fedramp-prod':
                frameAncestors = ['*.atlassian-us-gov-mod.net'];
                break;
            case 'ic-stg':
            case 'ic-prod':
                if (icOptions) {
                    frameAncestors = [`*.${getICDomain(microsEnv, icOptions)}`];
                }
                break;
            case 'prod':
            default:
                frameAncestors = [
                    '*.atlassian.net',
                    'bitbucket.org',
                    '*.jira.com',
                    '*.atlassian.com',
                    '*.frontend.public.atl-paas.net'
                ];
                break;
        }
        if (hostname) {
            frameAncestors.push(hostname);
        }
        return frameAncestors;
    }
}
exports.CSPInjectionService = CSPInjectionService;
