import {
  GitlabGitlabRepositoryAriResourceOwner,
  GitlabGitlabRepositoryAriResourceType
} from "./chunk-IA4I5ARC.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/gitlab.gitlab/repository/manifest.ts
var gitlabGitlabRepositoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: GitlabGitlabRepositoryAriResourceOwner,
  resourceType: GitlabGitlabRepositoryAriResourceType,
  resourceIdSlug: "project/{projectId}",
  resourceIdSegmentFormats: {
    projectId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/gitlab.gitlab/repository/index.ts
var GitlabGitlabRepositoryAri = class _GitlabGitlabRepositoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._projectId = opts.resourceIdSegmentValues.projectId;
  }
  get projectId() {
    return this._projectId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: gitlabGitlabRepositoryAriStaticOpts.qualifier,
      platformQualifier: gitlabGitlabRepositoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: gitlabGitlabRepositoryAriStaticOpts.resourceOwner,
      resourceType: gitlabGitlabRepositoryAriStaticOpts.resourceType,
      resourceId: `project/${opts.projectId}`,
      resourceIdSegmentValues: {
        projectId: opts.projectId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, gitlabGitlabRepositoryAriStaticOpts);
    return new _GitlabGitlabRepositoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, gitlabGitlabRepositoryAriStaticOpts);
    return new _GitlabGitlabRepositoryAri(opts);
  }
  getVariables() {
    return {
      projectId: this.projectId
    };
  }
};

export {
  GitlabGitlabRepositoryAri
};
