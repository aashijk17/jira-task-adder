import { FileSystemReader, FileSystemWriter } from '../file-system';
import { ConfigReader, ConfigWriter } from './';
import { Modules, ManifestSchema, Resources } from '@forge/manifest';
import { UserError, ValidationError } from '../shared';
export declare class InvalidManifestError extends ValidationError {
    constructor();
}
export declare class ResourceDefinitionMissingError extends UserError {
    constructor(resources: string[]);
}
export interface Handler {
    module: string;
    func: string;
}
export interface ConfigInteractor {
    getAppHandlers(): Promise<Array<Handler>>;
}
export declare type Resource = Resources[0];
export declare type UIResourceType = 'customUI' | 'nativeUI' | 'default';
export interface ResourceDetails extends Resource {
    resourceType: UIResourceType;
}
export declare function findUIKit1Modules(modules: Modules): string[];
export declare class ConfigFile implements ConfigReader, ConfigWriter, ConfigInteractor {
    private readonly fileReader;
    private readonly fileWriter;
    private readonly manifestParser;
    constructor(fileReader: FileSystemReader, fileWriter: FileSystemWriter);
    getAppHandlers(): Promise<Array<Handler>>;
    readConfig(): Promise<ManifestSchema>;
    runtimeName(): Promise<string | undefined>;
    private makeManifestUnique;
    prependAppNameToModules(name: string): Promise<void>;
    private writeManifest;
    writeToConfigFile<K extends string, V extends object>(configKey: K, config: V): Promise<void>;
    private getHostedResourceModules;
    private assertNoMissingResources;
    private getRemoteFromEgressPermission;
    private instanceOfRemote;
    getEgressPermissions(): Promise<{
        type: string;
        domains: string[] | undefined;
    }[]>;
    getAuthProviders(): Promise<Record<string, {
        key: string;
        name: string;
    }>>;
    getResources(resourceTypes?: UIResourceType[]): Promise<ResourceDetails[]>;
    getConnectKey(): Promise<string | undefined>;
    private getResourceType;
}
//# sourceMappingURL=config-file.d.ts.map