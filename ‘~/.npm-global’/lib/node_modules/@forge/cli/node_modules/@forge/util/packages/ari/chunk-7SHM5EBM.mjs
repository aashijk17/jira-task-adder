import {
  MigrationReportCenterReportRequestProxyAriResourceOwner,
  MigrationReportCenterReportRequestProxyAriResourceType
} from "./chunk-G5VJCNUQ.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/migration-report-center/report-request-proxy/manifest.ts
var migrationReportCenterReportRequestProxyAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: MigrationReportCenterReportRequestProxyAriResourceOwner,
  resourceType: MigrationReportCenterReportRequestProxyAriResourceType,
  resourceIdSlug: "{reportRequestProxyId}",
  resourceIdSegmentFormats: {
    reportRequestProxyId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/migration-report-center/report-request-proxy/index.ts
var MigrationReportCenterReportRequestProxyAri = class _MigrationReportCenterReportRequestProxyAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._reportRequestProxyId = opts.resourceIdSegmentValues.reportRequestProxyId;
  }
  get reportRequestProxyId() {
    return this._reportRequestProxyId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: migrationReportCenterReportRequestProxyAriStaticOpts.qualifier,
      platformQualifier: migrationReportCenterReportRequestProxyAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: migrationReportCenterReportRequestProxyAriStaticOpts.resourceOwner,
      resourceType: migrationReportCenterReportRequestProxyAriStaticOpts.resourceType,
      resourceId: `${opts.reportRequestProxyId}`,
      resourceIdSegmentValues: {
        reportRequestProxyId: opts.reportRequestProxyId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, migrationReportCenterReportRequestProxyAriStaticOpts);
    return new _MigrationReportCenterReportRequestProxyAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, migrationReportCenterReportRequestProxyAriStaticOpts);
    return new _MigrationReportCenterReportRequestProxyAri(opts);
  }
  getVariables() {
    return {
      reportRequestProxyId: this.reportRequestProxyId
    };
  }
};

export {
  MigrationReportCenterReportRequestProxyAri
};
