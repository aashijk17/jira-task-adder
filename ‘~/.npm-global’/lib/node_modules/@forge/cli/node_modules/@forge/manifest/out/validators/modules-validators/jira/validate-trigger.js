"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateJiraTriggers = void 0;
const text_1 = require("../../../text");
const utils_1 = require("../../../utils");
function validateJiraTriggers(modules, yamlContentByLine) {
    const validationErrors = [];
    modules?.trigger?.forEach((module) => {
        let isIgnoreSelfErrorAdded = false;
        if (module?.filter?.ignoreSelf) {
            const onlyJiraEvents = module.events.every((e) => e.includes('jira'));
            if (!onlyJiraEvents && !isIgnoreSelfErrorAdded) {
                isIgnoreSelfErrorAdded = true;
                validationErrors.push({
                    message: text_1.errors.modules.trigger.ignoreSelfFilteringWorksOnlyWithJiraEvents(),
                    reference: text_1.References.Modules,
                    level: 'error',
                    ...(0, utils_1.findPosition)(module.key, yamlContentByLine)
                });
            }
        }
        module.events.forEach((event) => {
            if (typeof event === 'object' && event?.filter?.ignoreSelf) {
                const isJiraEvent = event.eventType.includes('jira');
                if (!isJiraEvent && !isIgnoreSelfErrorAdded) {
                    isIgnoreSelfErrorAdded = true;
                    validationErrors.push({
                        message: text_1.errors.modules.trigger.ignoreSelfFilteringWorksOnlyWithJiraEvents(),
                        reference: text_1.References.Modules,
                        level: 'error',
                        ...(0, utils_1.findPosition)(module.key, yamlContentByLine)
                    });
                }
            }
        });
    });
    return validationErrors;
}
exports.validateJiraTriggers = validateJiraTriggers;
