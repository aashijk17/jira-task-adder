"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateJiraFullAdminPage = void 0;
const types_1 = require("../../../types");
const text_1 = require("../../../text");
const utils_1 = require("../../../utils");
const validate_subpages_in_module_1 = require("./validate-subpages-in-module");
const jiraAdminPageType = types_1.AllModuleTypes.JiraAdminPage;
const validateSeparateAdminPageModule = (pageType, modules, currentModule, multiplePagesError, yamlContentByLine) => {
    const validationErrors = [];
    if (currentModule?.length > 1) {
        validationErrors.push({
            message: multiplePagesError,
            reference: text_1.References.Modules,
            level: 'error',
            ...(0, utils_1.findPosition)(currentModule[1].key, yamlContentByLine)
        });
    }
    if (currentModule?.length === 1) {
        if (pageType === 'admin') {
            const adminModules = { ...modules, [jiraAdminPageType]: currentModule };
            validationErrors.push(...(0, validate_subpages_in_module_1.validateSubpagesInModule)(adminModules, jiraAdminPageType, yamlContentByLine));
        }
        if (['get-started', 'config'].includes(pageType)) {
            const { pages, sections, key } = currentModule[0];
            if (pages || sections)
                validationErrors.push({
                    message: text_1.errors.modules.subPages.invalidPagesAndSectionsForConfigurePages(jiraAdminPageType),
                    reference: text_1.References.Modules,
                    level: 'error',
                    ...(0, utils_1.findPosition)(key, yamlContentByLine)
                });
        }
    }
    return validationErrors;
};
const validateJiraFullAdminPage = (modules, yamlContentByLine) => {
    const validationErrors = [];
    const moduleArray = modules[jiraAdminPageType];
    const adminPageModules = moduleArray?.filter((module) => !module?.useAsGetStarted && !module?.useAsConfig);
    const getStartedModules = moduleArray?.filter((module) => module?.useAsGetStarted);
    const configModules = moduleArray?.filter((module) => module?.useAsConfig);
    if (adminPageModules?.length) {
        validationErrors.push(...validateSeparateAdminPageModule('admin', modules, adminPageModules, text_1.errors.modules.singleEntryOfModuleWithoutConfigureAndStartedParams(jiraAdminPageType), yamlContentByLine));
    }
    if (getStartedModules?.length) {
        validationErrors.push(...validateSeparateAdminPageModule('get-started', modules, getStartedModules, text_1.errors.modules.singleEntryOfModuleWithGetStartedParam(jiraAdminPageType), yamlContentByLine));
    }
    if (configModules?.length) {
        validationErrors.push(...validateSeparateAdminPageModule('config', modules, configModules, text_1.errors.modules.singleEntryOfModuleWithConfigureParam(jiraAdminPageType), yamlContentByLine));
    }
    return validationErrors;
};
exports.validateJiraFullAdminPage = validateJiraFullAdminPage;
