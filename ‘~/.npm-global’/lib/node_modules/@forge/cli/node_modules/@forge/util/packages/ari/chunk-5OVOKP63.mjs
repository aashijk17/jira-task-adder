import {
  TrelloLogoAriResourceOwner,
  TrelloLogoAriResourceType
} from "./chunk-SI47IE46.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/trello/logo/manifest.ts
var trelloLogoAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloLogoAriResourceOwner,
  resourceType: TrelloLogoAriResourceType,
  resourceIdSlug: "type-id/logo-type/{logoType}/{typeId}/{logoHash}",
  resourceIdSegmentFormats: {
    logoType: /(?:organization|enterprise)/,
    // eslint-disable-line no-useless-escape
    typeId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    logoHash: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/logo/index.ts
var TrelloLogoAri = class _TrelloLogoAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._logoType = opts.resourceIdSegmentValues.logoType, this._typeId = opts.resourceIdSegmentValues.typeId, this._logoHash = opts.resourceIdSegmentValues.logoHash;
  }
  get logoType() {
    return this._logoType;
  }
  get typeId() {
    return this._typeId;
  }
  get logoHash() {
    return this._logoHash;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloLogoAriStaticOpts.qualifier,
      platformQualifier: trelloLogoAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloLogoAriStaticOpts.resourceOwner,
      resourceType: trelloLogoAriStaticOpts.resourceType,
      resourceId: `type-id/logo-type/${opts.logoType}/${opts.typeId}/${opts.logoHash}`,
      resourceIdSegmentValues: {
        logoType: opts.logoType,
        typeId: opts.typeId || "",
        logoHash: opts.logoHash || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloLogoAriStaticOpts);
    return new _TrelloLogoAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloLogoAriStaticOpts);
    return new _TrelloLogoAri(opts);
  }
  getVariables() {
    return {
      logoType: this.logoType,
      typeId: this.typeId,
      logoHash: this.logoHash
    };
  }
};

export {
  TrelloLogoAri
};
