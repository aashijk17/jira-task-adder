import {
  SearchPermissionContainerAriResourceOwner,
  SearchPermissionContainerAriResourceType
} from "./chunk-RELMUIGW.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/search/permission-container/manifest.ts
var searchPermissionContainerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: SearchPermissionContainerAriResourceOwner,
  resourceType: SearchPermissionContainerAriResourceType,
  resourceIdSlug: "activation/{activationId}/{containerId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    containerId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/search/permission-container/index.ts
var SearchPermissionContainerAri = class _SearchPermissionContainerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._containerId = opts.resourceIdSegmentValues.containerId;
  }
  get activationId() {
    return this._activationId;
  }
  get containerId() {
    return this._containerId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: searchPermissionContainerAriStaticOpts.qualifier,
      platformQualifier: searchPermissionContainerAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: searchPermissionContainerAriStaticOpts.resourceOwner,
      resourceType: searchPermissionContainerAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.containerId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        containerId: opts.containerId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, searchPermissionContainerAriStaticOpts);
    return new _SearchPermissionContainerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, searchPermissionContainerAriStaticOpts);
    return new _SearchPermissionContainerAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      containerId: this.containerId
    };
  }
};

export {
  SearchPermissionContainerAri
};
