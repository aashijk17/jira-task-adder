import {
  GraphRelationshipTypeAriResourceOwner,
  GraphRelationshipTypeAriResourceType
} from "./chunk-IQMENLZS.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/graph/relationship-type/manifest.ts
var graphRelationshipTypeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: GraphRelationshipTypeAriResourceOwner,
  resourceType: GraphRelationshipTypeAriResourceType,
  resourceIdSlug: "{relationshipTypeId}",
  resourceIdSegmentFormats: {
    relationshipTypeId: /[a-zA-Z0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/relationship-type/index.ts
var GraphRelationshipTypeAri = class _GraphRelationshipTypeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._relationshipTypeId = opts.resourceIdSegmentValues.relationshipTypeId;
  }
  get relationshipTypeId() {
    return this._relationshipTypeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphRelationshipTypeAriStaticOpts.qualifier,
      platformQualifier: graphRelationshipTypeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphRelationshipTypeAriStaticOpts.resourceOwner,
      resourceType: graphRelationshipTypeAriStaticOpts.resourceType,
      resourceId: `${opts.relationshipTypeId}`,
      resourceIdSegmentValues: {
        relationshipTypeId: opts.relationshipTypeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphRelationshipTypeAriStaticOpts);
    return new _GraphRelationshipTypeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphRelationshipTypeAriStaticOpts);
    return new _GraphRelationshipTypeAri(opts);
  }
  getVariables() {
    return {
      relationshipTypeId: this.relationshipTypeId
    };
  }
};

export {
  GraphRelationshipTypeAri
};
