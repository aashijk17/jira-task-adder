import {
  JsmChannelOrchestratorConversationAriResourceOwner,
  JsmChannelOrchestratorConversationAriResourceType
} from "./chunk-YXNFQK7U.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/jsm-channel-orchestrator/conversation/manifest.ts
var jsmChannelOrchestratorConversationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: JsmChannelOrchestratorConversationAriResourceOwner,
  resourceType: JsmChannelOrchestratorConversationAriResourceType,
  resourceIdSlug: "{activationId}/{conversationId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    conversationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/jsm-channel-orchestrator/conversation/index.ts
var JsmChannelOrchestratorConversationAri = class _JsmChannelOrchestratorConversationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._conversationId = opts.resourceIdSegmentValues.conversationId;
  }
  get activationId() {
    return this._activationId;
  }
  get conversationId() {
    return this._conversationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jsmChannelOrchestratorConversationAriStaticOpts.qualifier,
      platformQualifier: jsmChannelOrchestratorConversationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: jsmChannelOrchestratorConversationAriStaticOpts.resourceOwner,
      resourceType: jsmChannelOrchestratorConversationAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.conversationId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        conversationId: opts.conversationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jsmChannelOrchestratorConversationAriStaticOpts);
    return new _JsmChannelOrchestratorConversationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jsmChannelOrchestratorConversationAriStaticOpts);
    return new _JsmChannelOrchestratorConversationAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      conversationId: this.conversationId
    };
  }
};

export {
  JsmChannelOrchestratorConversationAri
};
