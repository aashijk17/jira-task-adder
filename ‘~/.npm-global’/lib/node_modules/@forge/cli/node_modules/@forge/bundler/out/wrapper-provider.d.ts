import { BaseError, FileSystemReader, UserError, StatsigService } from '@forge/cli-shared';
export declare class LocalWrapperNotFoundError extends UserError {
    constructor();
}
export declare class WrapperNetworkError extends BaseError {
    constructor(message: string, requestId?: string);
}
export declare class ParseWrapperCDNIndexError extends BaseError {
    constructor(message: string, requestId: string | undefined);
}
export declare type RuntimeScript = {
    script: string;
    source: string;
    version: string;
};
export interface WrapperProvider {
    getNodeRuntimeWrapper(): Promise<RuntimeScript>;
    getNodeRuntimeLoader(): Promise<RuntimeScript | undefined>;
}
export declare class LocalWrapperProvider implements WrapperProvider {
    private readonly filesystemReader;
    private readonly runtimePath;
    constructor(filesystemReader: FileSystemReader, runtimePath: string);
    private getLocalScript;
    getNodeRuntimeWrapper(): Promise<RuntimeScript>;
    getNodeRuntimeLoader(): Promise<RuntimeScript | undefined>;
}
export declare class NetworkWrapperProvider implements WrapperProvider {
    protected readonly statsigService: StatsigService;
    private wrapper;
    private loader;
    protected cdnUrl: string;
    constructor(statsigService: StatsigService);
    private getScriptPathFromIndex;
    private getFileFromCDN;
    getNodeRuntimeWrapper(): Promise<RuntimeScript>;
    getNodeRuntimeLoader(): Promise<RuntimeScript | undefined>;
}
export declare const getWrapperProvider: ({ fileSystemReader, statsigService }: {
    fileSystemReader: FileSystemReader;
    statsigService: StatsigService;
}) => LocalWrapperProvider | NetworkWrapperProvider;
//# sourceMappingURL=wrapper-provider.d.ts.map