import {
  AuditLogAttributeAriResourceOwner,
  AuditLogAttributeAriResourceType
} from "./chunk-HMD655OE.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/audit-log/attribute/manifest.ts
var auditLogAttributeAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: AuditLogAttributeAriResourceOwner,
  resourceType: AuditLogAttributeAriResourceType,
  resourceIdSlug: "event/{eventId}/{attributeId}",
  resourceIdSegmentFormats: {
    eventId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    attributeId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/audit-log/attribute/index.ts
var AuditLogAttributeAri = class _AuditLogAttributeAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._eventId = opts.resourceIdSegmentValues.eventId, this._attributeId = opts.resourceIdSegmentValues.attributeId;
  }
  get eventId() {
    return this._eventId;
  }
  get attributeId() {
    return this._attributeId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: auditLogAttributeAriStaticOpts.qualifier,
      platformQualifier: auditLogAttributeAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: auditLogAttributeAriStaticOpts.resourceOwner,
      resourceType: auditLogAttributeAriStaticOpts.resourceType,
      resourceId: `event/${opts.eventId}/${opts.attributeId}`,
      resourceIdSegmentValues: {
        eventId: opts.eventId,
        attributeId: opts.attributeId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, auditLogAttributeAriStaticOpts);
    return new _AuditLogAttributeAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, auditLogAttributeAriStaticOpts);
    return new _AuditLogAttributeAri(opts);
  }
  getVariables() {
    return {
      eventId: this.eventId,
      attributeId: this.attributeId
    };
  }
};

export {
  AuditLogAttributeAri
};
