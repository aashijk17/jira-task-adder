import {
  GoogleGoogleDriveRslDocumentAriResourceOwner,
  GoogleGoogleDriveRslDocumentAriResourceType
} from "./chunk-JXXXZX76.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/google.google-drive-rsl/document/manifest.ts
var googleGoogleDriveRslDocumentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: GoogleGoogleDriveRslDocumentAriResourceOwner,
  resourceType: GoogleGoogleDriveRslDocumentAriResourceType,
  resourceIdSlug: "{googleDriveDocumentIdType}/{docId}",
  resourceIdSegmentFormats: {
    googleDriveDocumentIdType: /(documentId|spreadsheetId|presentationId|formId|folderId|imageId|audioId|videoId|pdfId|shortcutId|codeId|archiveId|web-pageId|pageId|blogpostId|otherId)/,
    // eslint-disable-line no-useless-escape
    docId: /[a-zA-Z0-9_-]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/google.google-drive-rsl/document/index.ts
var GoogleGoogleDriveRslDocumentAri = class _GoogleGoogleDriveRslDocumentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._googleDriveDocumentIdType = opts.resourceIdSegmentValues.googleDriveDocumentIdType, this._docId = opts.resourceIdSegmentValues.docId;
  }
  get googleDriveDocumentIdType() {
    return this._googleDriveDocumentIdType;
  }
  get docId() {
    return this._docId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: googleGoogleDriveRslDocumentAriStaticOpts.qualifier,
      platformQualifier: googleGoogleDriveRslDocumentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: googleGoogleDriveRslDocumentAriStaticOpts.resourceOwner,
      resourceType: googleGoogleDriveRslDocumentAriStaticOpts.resourceType,
      resourceId: `${opts.googleDriveDocumentIdType}/${opts.docId}`,
      resourceIdSegmentValues: {
        googleDriveDocumentIdType: opts.googleDriveDocumentIdType,
        docId: opts.docId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, googleGoogleDriveRslDocumentAriStaticOpts);
    return new _GoogleGoogleDriveRslDocumentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, googleGoogleDriveRslDocumentAriStaticOpts);
    return new _GoogleGoogleDriveRslDocumentAri(opts);
  }
  getVariables() {
    return {
      googleDriveDocumentIdType: this.googleDriveDocumentIdType,
      docId: this.docId
    };
  }
};

export {
  GoogleGoogleDriveRslDocumentAri
};
