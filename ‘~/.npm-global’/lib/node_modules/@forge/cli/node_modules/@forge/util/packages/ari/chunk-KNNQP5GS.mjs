import {
  GraphWorkerHistoryAriResourceOwner,
  GraphWorkerHistoryAriResourceType
} from "./chunk-C6RA7M3X.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/graph/worker-history/manifest.ts
var graphWorkerHistoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: GraphWorkerHistoryAriResourceOwner,
  resourceType: GraphWorkerHistoryAriResourceType,
  resourceIdSlug: "activation/{activationId}/{workerUUID}/{updateSequenceNumber}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    workerUUID: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/,
    // eslint-disable-line no-useless-escape
    updateSequenceNumber: /\d+/
    // eslint-disable-line no-useless-escape
  }
};

// src/graph/worker-history/index.ts
var GraphWorkerHistoryAri = class _GraphWorkerHistoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._workerUUID = opts.resourceIdSegmentValues.workerUUID, this._updateSequenceNumber = opts.resourceIdSegmentValues.updateSequenceNumber;
  }
  get activationId() {
    return this._activationId;
  }
  get workerUUID() {
    return this._workerUUID;
  }
  get updateSequenceNumber() {
    return this._updateSequenceNumber;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: graphWorkerHistoryAriStaticOpts.qualifier,
      platformQualifier: graphWorkerHistoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: graphWorkerHistoryAriStaticOpts.resourceOwner,
      resourceType: graphWorkerHistoryAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.workerUUID}/${opts.updateSequenceNumber}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        workerUUID: opts.workerUUID,
        updateSequenceNumber: opts.updateSequenceNumber
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, graphWorkerHistoryAriStaticOpts);
    return new _GraphWorkerHistoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, graphWorkerHistoryAriStaticOpts);
    return new _GraphWorkerHistoryAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      workerUUID: this.workerUUID,
      updateSequenceNumber: this.updateSequenceNumber
    };
  }
};

export {
  GraphWorkerHistoryAri
};
