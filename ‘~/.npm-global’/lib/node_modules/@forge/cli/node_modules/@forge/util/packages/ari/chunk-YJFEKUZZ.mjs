import {
  AirtableAirtableRemoteLinkAriResourceOwner,
  AirtableAirtableRemoteLinkAriResourceType
} from "./chunk-5WNGAVVZ.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/airtable.airtable/remote-link/manifest.ts
var airtableAirtableRemoteLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: AirtableAirtableRemoteLinkAriResourceOwner,
  resourceType: AirtableAirtableRemoteLinkAriResourceType,
  resourceIdSlug: "base/{baseId}/table/{tableId}",
  resourceIdSegmentFormats: {
    baseId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/,
    // eslint-disable-line no-useless-escape
    tableId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/airtable.airtable/remote-link/index.ts
var AirtableAirtableRemoteLinkAri = class _AirtableAirtableRemoteLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._baseId = opts.resourceIdSegmentValues.baseId, this._tableId = opts.resourceIdSegmentValues.tableId;
  }
  get baseId() {
    return this._baseId;
  }
  get tableId() {
    return this._tableId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: airtableAirtableRemoteLinkAriStaticOpts.qualifier,
      platformQualifier: airtableAirtableRemoteLinkAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: airtableAirtableRemoteLinkAriStaticOpts.resourceOwner,
      resourceType: airtableAirtableRemoteLinkAriStaticOpts.resourceType,
      resourceId: `base/${opts.baseId}/table/${opts.tableId}`,
      resourceIdSegmentValues: {
        baseId: opts.baseId,
        tableId: opts.tableId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, airtableAirtableRemoteLinkAriStaticOpts);
    return new _AirtableAirtableRemoteLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, airtableAirtableRemoteLinkAriStaticOpts);
    return new _AirtableAirtableRemoteLinkAri(opts);
  }
  getVariables() {
    return {
      baseId: this.baseId,
      tableId: this.tableId
    };
  }
};

export {
  AirtableAirtableRemoteLinkAri
};
