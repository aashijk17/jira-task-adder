import webpack from 'webpack';
import { Logger } from '@forge/cli-shared';
import { CommonOutputOptions } from './config/common';
import { Bundler, BundlerOutput, BundlerArgs, BundlerWatch, BundlerWatchArgs, BundlerWatchOutput } from './types';
export declare function handleWebpackCompilationResult(logger: Logger, err: Error | null | undefined, stats: Pick<webpack.Stats, 'hasErrors' | 'hasWarnings' | 'toJson'> | undefined): asserts stats is webpack.Stats;
export declare function getCompiler(config: webpack.Configuration): webpack.Compiler;
export declare type ConfigWithOutput = webpack.Configuration & {
    output: CommonOutputOptions;
};
export declare abstract class WebpackBundler implements Bundler {
    protected readonly logger: Logger;
    constructor(logger: Logger);
    protected getOutput(args: BundlerArgs, config: ConfigWithOutput, stats: webpack.Stats): Promise<BundlerOutput>;
    protected isRegularModule(name: string): boolean;
    protected localModules(stats: webpack.Stats): Set<string>;
    protected runCompiler(args: BundlerArgs, config: ConfigWithOutput): Promise<BundlerOutput>;
    abstract getConfig(args: BundlerArgs): Promise<ConfigWithOutput>;
    bundle(args: BundlerArgs): Promise<BundlerOutput>;
    watch(args: BundlerWatchArgs, watch: BundlerWatch): Promise<BundlerWatchOutput>;
}
//# sourceMappingURL=webpack.d.ts.map