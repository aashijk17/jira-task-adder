import { Logger } from './logger';
import { ProgressResult } from './command-line-ui';
export interface Prompt {
    confirm(message: string): Promise<boolean>;
    promptForText(message: string, defaultValue?: string): Promise<string>;
    promptForSecret(message: string): Promise<string>;
    promptForList<T extends string>(message: string, choices: T[], config?: {
        format?: (choice: T) => string;
    }, pageSize?: number): Promise<T>;
    promptForTable(message: string, infoMessage: string, columns: string[], choices: object[], isBorderless?: boolean): Promise<number[]>;
    promptForSingleChoiceTable(message: string, infoMessage: string, columns: string[], choices: object[]): Promise<number>;
}
export declare type TableCell = string | boolean | null | undefined;
export declare type TableOptions<Key extends string> = {
    json?: boolean;
    emptyMessage?: string;
    preMessage?: string;
    postMessage?: string;
    format?: {
        [K in Key]?: (value: TableCell) => string;
    };
    groupRows?: {
        [K in Key]?: boolean;
    };
};
export interface UI extends Logger, Prompt {
    emptyLine(): void;
    displayProgress<Result>(progress: () => Promise<Result>, startText: string, successText: string | ((result: Result) => string | ProgressResult)): Promise<Result>;
    displayTemporaryMessage<Result>(progress: () => Promise<Result>, waitText: string): Promise<Result>;
    clearSpinner(): void;
    table<Key extends string>(head: [Key, string][], data: Record<Key, TableCell>[] | undefined | null, options?: TableOptions<Key>): void;
    formatKeyValueList(items: {
        key: string;
        value: string;
    }[], indent?: string, addNewLine?: boolean): string;
    formatYamlProperties(properties: any, key: string, showMessage?: boolean): string;
}
//# sourceMappingURL=ui.d.ts.map