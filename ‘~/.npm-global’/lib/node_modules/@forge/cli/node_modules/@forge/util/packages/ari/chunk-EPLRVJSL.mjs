import {
  MiroMiroRemoteLinkAriResourceOwner,
  MiroMiroRemoteLinkAriResourceType
} from "./chunk-O3FMW3NZ.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/miro.miro/remote-link/manifest.ts
var miroMiroRemoteLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: MiroMiroRemoteLinkAriResourceOwner,
  resourceType: MiroMiroRemoteLinkAriResourceType,
  resourceIdSlug: "board/{boardId}",
  resourceIdSegmentFormats: {
    boardId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/miro.miro/remote-link/index.ts
var MiroMiroRemoteLinkAri = class _MiroMiroRemoteLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._boardId = opts.resourceIdSegmentValues.boardId;
  }
  get boardId() {
    return this._boardId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: miroMiroRemoteLinkAriStaticOpts.qualifier,
      platformQualifier: miroMiroRemoteLinkAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: miroMiroRemoteLinkAriStaticOpts.resourceOwner,
      resourceType: miroMiroRemoteLinkAriStaticOpts.resourceType,
      resourceId: `board/${opts.boardId}`,
      resourceIdSegmentValues: {
        boardId: opts.boardId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, miroMiroRemoteLinkAriStaticOpts);
    return new _MiroMiroRemoteLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, miroMiroRemoteLinkAriStaticOpts);
    return new _MiroMiroRemoteLinkAri(opts);
  }
  getVariables() {
    return {
      boardId: this.boardId
    };
  }
};

export {
  MiroMiroRemoteLinkAri
};
