import { Variables } from 'graphql-request';
import { Mutation, Query } from './graphql-types';
export { Variables };
export declare type AvailableMutations = Omit<Mutation, '__typename'>;
export declare type AvailableQueries = Omit<Query, '__typename'>;
export interface RunnerResponse<TResponse> {
    response: TResponse;
    requestId?: string;
}
export declare type MutationResult<TLabel extends keyof AvailableMutations> = Record<TLabel, NonNullable<Required<AvailableMutations>[TLabel]>>;
export interface GraphQLClient {
    query<TLabel extends keyof AvailableQueries, TVariables extends Variables>(query: string, variables: TVariables): Promise<Record<TLabel, AvailableQueries[TLabel]> & {
        requestId: string;
    }>;
    mutate<TLabel extends keyof AvailableMutations, TVariables extends Variables>(query: string, variables: TVariables): Promise<RunnerResponse<MutationResult<TLabel>>>;
}
export interface GraphQLRunner {
    run<TVariables extends Variables, TResponse>(operation: string, variables: TVariables): Promise<RunnerResponse<TResponse>>;
}
//# sourceMappingURL=graphql-client.d.ts.map