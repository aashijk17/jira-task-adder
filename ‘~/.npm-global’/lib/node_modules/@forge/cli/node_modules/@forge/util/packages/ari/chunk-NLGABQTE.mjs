import {
  ConfluenceWorkflowAriResourceOwner,
  ConfluenceWorkflowAriResourceType
} from "./chunk-ODPYL32A.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/confluence/workflow/manifest.ts
var confluenceWorkflowAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9_\\-.]{1,255}$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: ConfluenceWorkflowAriResourceOwner,
  resourceType: ConfluenceWorkflowAriResourceType,
  resourceIdSlug: "activation/{activationId}/{workflowId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    workflowId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence/workflow/index.ts
var ConfluenceWorkflowAri = class _ConfluenceWorkflowAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._workflowId = opts.resourceIdSegmentValues.workflowId;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get workflowId() {
    return this._workflowId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceWorkflowAriStaticOpts.qualifier,
      platformQualifier: confluenceWorkflowAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: confluenceWorkflowAriStaticOpts.resourceOwner,
      resourceType: confluenceWorkflowAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.workflowId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        workflowId: opts.workflowId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceWorkflowAriStaticOpts);
    return new _ConfluenceWorkflowAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceWorkflowAriStaticOpts);
    return new _ConfluenceWorkflowAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      workflowId: this.workflowId
    };
  }
};

export {
  ConfluenceWorkflowAri
};
