"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViewAppLogsCommand = exports.Runtime = void 0;
const ari_1 = require("@forge/util/packages/ari");
const ari_2 = require("../ari");
var Runtime;
(function (Runtime) {
    Runtime["RUNTIMEV2"] = "RUNTIMEV2";
    Runtime["CONTAINER"] = "CONTAINER";
})(Runtime = exports.Runtime || (exports.Runtime = {}));
class ViewAppLogsCommand {
    getAppConfig;
    appEnvironmentClient;
    globalEdgeClient;
    logsClient;
    statsigService;
    constructor(getAppConfig, appEnvironmentClient, globalEdgeClient, logsClient, statsigService) {
        this.getAppConfig = getAppConfig;
        this.appEnvironmentClient = appEnvironmentClient;
        this.globalEdgeClient = globalEdgeClient;
        this.logsClient = logsClient;
        this.statsigService = statsigService;
    }
    async getAll({ environmentKey, limit, context, startTime = null, grouped = false, containers = false }) {
        const { id: appId } = await this.getAppConfig();
        const [environmentId, cloudId] = await Promise.all([
            this.appEnvironmentClient.getAppEnvironmentId(appId, environmentKey),
            context ? this.globalEdgeClient.getCloudId(context.site) : undefined
        ]);
        const contextAri = cloudId ? (0, ari_2.buildContextAri)(cloudId, context.product) : undefined;
        const details = {
            appId: ari_1.EcosystemAppAri.parse(appId).appId,
            environmentId,
            limit,
            startTime,
            contextAri: contextAri ? [contextAri] : undefined,
            grouped
        };
        if (containers) {
            details.runtime = Runtime.CONTAINER.toLowerCase();
        }
        const isV2ApiEnabled = await this.statsigService.isLogsV2ApiEnabled();
        if (isV2ApiEnabled) {
            return this.getLogs(details);
        }
        return this.logsClient.viewAppLogs(details);
    }
    async getLogs(details) {
        const latestStart = new Date().toISOString();
        let earliestStart = new Date();
        if (details.startTime) {
            earliestStart = new Date(details.startTime);
        }
        else {
            earliestStart.setHours(new Date().getHours() - 1);
        }
        const dateSearchInput = {
            earliestStart: earliestStart.toISOString(),
            latestStart
        };
        return this.logsClient.viewAppLogsV2({
            ...details,
            offset: 0,
            dateSearchInput,
            queryStartTime: earliestStart.toISOString(),
            maxLimit: details.limit
        }, new Map(), [], 0);
    }
    async getOne(details) {
        return this.logsClient.viewInvocationLogs({ invocationId: details.invocationId });
    }
}
exports.ViewAppLogsCommand = ViewAppLogsCommand;
