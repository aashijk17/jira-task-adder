import {
  VirtualAgentIntentQuestionAriResourceOwner,
  VirtualAgentIntentQuestionAriResourceType
} from "./chunk-5BAWUP2G.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/virtual-agent/intent-question/manifest.ts
var virtualAgentIntentQuestionAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: VirtualAgentIntentQuestionAriResourceOwner,
  resourceType: VirtualAgentIntentQuestionAriResourceType,
  resourceIdSlug: "{activationId}/{intentQuestionId}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    intentQuestionId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/virtual-agent/intent-question/index.ts
var VirtualAgentIntentQuestionAri = class _VirtualAgentIntentQuestionAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._activationId = opts.resourceIdSegmentValues.activationId, this._intentQuestionId = opts.resourceIdSegmentValues.intentQuestionId;
  }
  get activationId() {
    return this._activationId;
  }
  get intentQuestionId() {
    return this._intentQuestionId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: virtualAgentIntentQuestionAriStaticOpts.qualifier,
      platformQualifier: virtualAgentIntentQuestionAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: virtualAgentIntentQuestionAriStaticOpts.resourceOwner,
      resourceType: virtualAgentIntentQuestionAriStaticOpts.resourceType,
      resourceId: `${opts.activationId}/${opts.intentQuestionId}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        intentQuestionId: opts.intentQuestionId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, virtualAgentIntentQuestionAriStaticOpts);
    return new _VirtualAgentIntentQuestionAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, virtualAgentIntentQuestionAriStaticOpts);
    return new _VirtualAgentIntentQuestionAri(opts);
  }
  getVariables() {
    return {
      activationId: this.activationId,
      intentQuestionId: this.intentQuestionId
    };
  }
};

export {
  VirtualAgentIntentQuestionAri
};
