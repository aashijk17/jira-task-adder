"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWorkspaceAriByProduct = exports.parseInstallationContext = exports.UnknownWorkspaceWithoutResourceIdError = exports.UnknownSiteWithoutResourceIdError = exports.encodeContext = exports.buildExtensionAri = exports.buildContextAri = exports.appIdToAriString = exports.BITBUCKET_RESOURCE_OWNER = exports.TRELLO_RESOURCE_OWNER = exports.WORKSPACE_RESOURCE_TYPE = exports.SITE_RESOURCE_TYPE = void 0;
const ari_1 = require("@forge/util/packages/ari");
const shared_1 = require("../shared");
const ui_1 = require("../ui");
exports.SITE_RESOURCE_TYPE = 'site';
exports.WORKSPACE_RESOURCE_TYPE = 'workspace';
exports.TRELLO_RESOURCE_OWNER = 'trello';
exports.BITBUCKET_RESOURCE_OWNER = 'bitbucket';
function appIdToAriString(appId) {
    return `ari:cloud:ecosystem::app/${appId}`;
}
exports.appIdToAriString = appIdToAriString;
function buildContextAri(cloudId, product) {
    return ari_1.AnyAri.create({
        resourceOwner: (0, shared_1.ariResourceOwner)(product),
        resourceType: exports.SITE_RESOURCE_TYPE,
        resourceId: cloudId
    });
}
exports.buildContextAri = buildContextAri;
function buildExtensionAri(appId, environmentId, functionKey) {
    return ari_1.AnyAri.create({
        resourceOwner: 'ecosystem',
        resourceType: 'extension',
        resourceId: `${appId}/${environmentId}/static/${functionKey}`
    });
}
exports.buildExtensionAri = buildExtensionAri;
function encodeContext(context, extension) {
    const serialised = JSON.stringify({ ctx: context.toString(), ext: extension.toString() });
    return Buffer.from(serialised, 'utf-8').toString('base64').replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
}
exports.encodeContext = encodeContext;
class UnknownSiteWithoutResourceIdError extends Error {
    constructor() {
        super(ui_1.Text.installList.noResourceId);
    }
}
exports.UnknownSiteWithoutResourceIdError = UnknownSiteWithoutResourceIdError;
class UnknownWorkspaceWithoutResourceIdError extends Error {
    constructor() {
        super(ui_1.Text.installList.noResourceIdInWorkspace);
    }
}
exports.UnknownWorkspaceWithoutResourceIdError = UnknownWorkspaceWithoutResourceIdError;
function parseInstallationContext(installationContext) {
    const context = ari_1.AnyAri.parse(installationContext);
    switch (context.resourceType) {
        case exports.SITE_RESOURCE_TYPE:
            if (!context.resourceId) {
                throw new UnknownSiteWithoutResourceIdError();
            }
            break;
        case exports.WORKSPACE_RESOURCE_TYPE:
            if (!context.resourceId) {
                throw new UnknownWorkspaceWithoutResourceIdError();
            }
            break;
        default:
            throw new Error('Unknown resource type');
    }
    return context;
}
exports.parseInstallationContext = parseInstallationContext;
exports.createWorkspaceAriByProduct = {
    jira: (siteId, activationId) => ari_1.JiraWorkspaceAri.create({ siteId, activationId }),
    confluence: (siteId, activationId) => ari_1.ConfluenceWorkspaceAri.create({ siteId, activationId }),
    compass: (siteId, workspaceId) => ari_1.CompassWorkspaceAri.create({ siteId, workspaceId }),
    graph: (_siteId, activationId) => ari_1.GraphWorkspaceAri.create({ workspaceId: activationId })
};
