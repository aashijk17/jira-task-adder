/// <reference types="node" />
import { Configuration as WebpackConfig, ModuleOptions } from 'webpack';
import { Translations } from '@forge/manifest';
import { BundlerArgs } from '../types';
export declare const resolveModulePath: (moduleName: string) => string;
export declare function resolveStubPath(stubName: string): string;
export declare const getDevToolConfig: ({ watchMode }: Pick<BundlerArgs, 'watchMode'>) => string;
export declare type RequiredFields<T, F extends keyof T> = T & Required<Pick<T, F>>;
export declare type CommonOutputOptions = RequiredFields<Required<WebpackConfig>['output'], 'path'>;
declare type CommonModuleOptions = RequiredFields<ModuleOptions, 'rules'>;
export declare type WebpackEntries = Record<string, string>;
export declare type CommonWebpackConfig = RequiredFields<WebpackConfig, 'module' | 'plugins'> & Record<'output', CommonOutputOptions> & Record<'module', CommonModuleOptions> & Record<'entry', WebpackEntries>;
export declare const geti18nRule: (i18nConfig: Translations) => {
    test: RegExp;
    include: string[];
    type: string;
    generator: {
        filename: ({ module: { resource: i18nResourcePath } }: {
            module: {
                resource: string;
            };
        }) => string;
    };
};
export declare const getCommonWebpackConfig: (args: BundlerArgs) => CommonWebpackConfig;
export {};
//# sourceMappingURL=common.d.ts.map