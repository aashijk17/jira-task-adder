import {
  GithubGithubRepositoryAriResourceOwner,
  GithubGithubRepositoryAriResourceType
} from "./chunk-PLNY4YWF.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/github.github/repository/manifest.ts
var githubGithubRepositoryAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: GithubGithubRepositoryAriResourceOwner,
  resourceType: GithubGithubRepositoryAriResourceType,
  resourceIdSlug: "{repositoryId}",
  resourceIdSegmentFormats: {
    repositoryId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/github.github/repository/index.ts
var GithubGithubRepositoryAri = class _GithubGithubRepositoryAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._repositoryId = opts.resourceIdSegmentValues.repositoryId;
  }
  get repositoryId() {
    return this._repositoryId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: githubGithubRepositoryAriStaticOpts.qualifier,
      platformQualifier: githubGithubRepositoryAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: githubGithubRepositoryAriStaticOpts.resourceOwner,
      resourceType: githubGithubRepositoryAriStaticOpts.resourceType,
      resourceId: `${opts.repositoryId}`,
      resourceIdSegmentValues: {
        repositoryId: opts.repositoryId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, githubGithubRepositoryAriStaticOpts);
    return new _GithubGithubRepositoryAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, githubGithubRepositoryAriStaticOpts);
    return new _GithubGithubRepositoryAri(opts);
  }
  getVariables() {
    return {
      repositoryId: this.repositoryId
    };
  }
};

export {
  GithubGithubRepositoryAri
};
