import {
  GithubGithubBranchAriResourceOwner,
  GithubGithubBranchAriResourceType
} from "./chunk-4XWMIRSM.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/github.github/branch/manifest.ts
var githubGithubBranchAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: GithubGithubBranchAriResourceOwner,
  resourceType: GithubGithubBranchAriResourceType,
  resourceIdSlug: "repositoryId/{repositoryId}/branchId/{branchId}",
  resourceIdSegmentFormats: {
    repositoryId: /[0-9]+/,
    // eslint-disable-line no-useless-escape
    branchId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/github.github/branch/index.ts
var GithubGithubBranchAri = class _GithubGithubBranchAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._repositoryId = opts.resourceIdSegmentValues.repositoryId, this._branchId = opts.resourceIdSegmentValues.branchId;
  }
  get repositoryId() {
    return this._repositoryId;
  }
  get branchId() {
    return this._branchId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: githubGithubBranchAriStaticOpts.qualifier,
      platformQualifier: githubGithubBranchAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: githubGithubBranchAriStaticOpts.resourceOwner,
      resourceType: githubGithubBranchAriStaticOpts.resourceType,
      resourceId: `repositoryId/${opts.repositoryId}/branchId/${opts.branchId}`,
      resourceIdSegmentValues: {
        repositoryId: opts.repositoryId,
        branchId: opts.branchId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, githubGithubBranchAriStaticOpts);
    return new _GithubGithubBranchAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, githubGithubBranchAriStaticOpts);
    return new _GithubGithubBranchAri(opts);
  }
  getVariables() {
    return {
      repositoryId: this.repositoryId,
      branchId: this.branchId
    };
  }
};

export {
  GithubGithubBranchAri
};
