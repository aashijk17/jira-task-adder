"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrameComponentVisitor = void 0;
const typescript_estree_1 = require("@typescript-eslint/typescript-estree");
const ensureResourceKeyValue = (raw) => {
    const value = raw?.trim() ?? '';
    return value.length > 0 ? value : undefined;
};
const resolveStringAttributeValue = (node) => {
    const value = node.value;
    if (value && value.type === typescript_estree_1.AST_NODE_TYPES.Literal && typeof value.value === 'string') {
        return ensureResourceKeyValue(value.value);
    }
    else if (value && value.type === typescript_estree_1.AST_NODE_TYPES.JSXExpressionContainer) {
        const expression = value.expression;
        if (expression.type === typescript_estree_1.AST_NODE_TYPES.Literal && typeof expression.value === 'string') {
            return ensureResourceKeyValue(expression.value);
        }
        else if (expression.type === typescript_estree_1.AST_NODE_TYPES.TemplateLiteral) {
            const { quasis } = expression;
            if (quasis.length === 1) {
                return ensureResourceKeyValue(quasis[0].value.raw);
            }
        }
    }
    return false;
};
class FrameComponentVisitor {
    visit(node, _parent, callback) {
        const frameComponentNode = this.getFrameComponentNode(node);
        if (!frameComponentNode) {
            return undefined;
        }
        const frameResourceInfo = this.getFrameComponentResourceInfo(frameComponentNode);
        if (frameResourceInfo) {
            callback(frameResourceInfo);
        }
    }
    getFrameComponentNode(node) {
        if (node.type !== typescript_estree_1.AST_NODE_TYPES.JSXOpeningElement) {
            return undefined;
        }
        const { name: nameNode } = node;
        if (nameNode.type === typescript_estree_1.AST_NODE_TYPES.JSXIdentifier && nameNode.name === 'Frame') {
            return node;
        }
        return undefined;
    }
    getFrameComponentResourceInfo(node) {
        const { attributes } = node;
        const resourceNode = attributes.find((attribute) => {
            return attribute.type === typescript_estree_1.AST_NODE_TYPES.JSXAttribute && attribute.name.name === 'resource';
        });
        if (!resourceNode) {
            return {
                resource: undefined,
                line: node.loc.start.line,
                column: node.loc.start.column
            };
        }
        else if (resourceNode.type === typescript_estree_1.AST_NODE_TYPES.JSXAttribute) {
            const resourceKey = resolveStringAttributeValue(resourceNode);
            if (resourceKey !== false && resourceNode.value) {
                const { loc: { start: { line, column } } } = resourceNode.value;
                return {
                    resource: resourceKey,
                    line,
                    column
                };
            }
        }
        return undefined;
    }
}
exports.FrameComponentVisitor = FrameComponentVisitor;
