interface Remote {
    baseUrl: string;
    key: string;
}
interface ExternalAuthMetaDataAccount {
    id: string;
    externalAccountId: string;
    displayName: string;
    scopes: string[];
    avatarUrl?: string;
}
interface ExternalAuthMetaData {
    service: string;
    remotes: Remote[];
    accounts: ExternalAuthMetaDataAccount[];
}
interface XisRequestTokenType {
    id: string;
    service: string;
    token: string;
    externalAccountId?: string;
    displayName?: string;
    avatarUrl?: string;
    scopes?: string[];
}
export interface License {
    isActive: boolean;
    billingPeriod?: string | null;
    capabilitySet?: string | null;
    ccpEntitlementId?: string | null;
    ccpEntitlementSlug?: string | null;
    isEvaluation?: boolean | null;
    subscriptionEndDate?: string | null;
    supportEntitlementNumber?: string | null;
    trialEndDate?: string | null;
    type?: string | null;
}
interface AppContext {
    appId: string;
    appVersion: string;
    environmentId: string;
    environmentType: string;
    invocationId: string;
    installationId: string;
    functionKey: string;
    moduleType: string;
    moduleKey: string;
    license?: License;
    permissions?: Permissions;
}
interface Realtime {
    contextToken?: string;
}
export interface Metadata {
    apiAuth: {
        env: string;
        objects: string;
    };
    clientId: string;
    contextAri: string;
    tokens: XisRequestTokenType[];
    appContext: AppContext;
    tracing: {
        traceId: string;
        spanId: string;
    };
    realtime: Realtime;
    aaid?: string;
    featureFlags?: string[];
    appToken?: string;
    proxy?: {
        token: string;
        url: string;
        host?: string;
    };
    timeout?: number;
    rms?: {
        url: string;
        host: string;
    };
    limits?: Record<string, number>;
    license?: License;
    externalAuth?: ExternalAuthMetaData[];
}
export declare type Permissions = {
    scopes: string[];
    external: {
        fetch?: {
            backend?: string[];
            frontend?: string[];
        };
        fonts?: string[];
        frames?: string[];
        navigation?: string[];
        images?: string[];
        media?: string[];
        scripts?: string[];
        styles?: string[];
    };
};
export interface ExternalRequestVariable {
    secure: boolean;
    key: string;
    value: string | undefined;
}
export interface ExternalRequestBody {
    _meta: Metadata;
    body: Record<string, unknown>;
    handler: string;
    variables?: ExternalRequestVariable[];
}
export {};
//# sourceMappingURL=request.d.ts.map