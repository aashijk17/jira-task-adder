import {
  EcosystemInstallationAriResourceOwner,
  EcosystemInstallationAriResourceType
} from "./chunk-NRRB37M2.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/ecosystem/installation/manifest.ts
var ecosystemInstallationAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: EcosystemInstallationAriResourceOwner,
  resourceType: EcosystemInstallationAriResourceType,
  resourceIdSlug: "{installationId}",
  resourceIdSegmentFormats: {
    installationId: /[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}/
    // eslint-disable-line no-useless-escape
  }
};

// src/ecosystem/installation/index.ts
var EcosystemInstallationAri = class _EcosystemInstallationAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._installationId = opts.resourceIdSegmentValues.installationId;
  }
  get installationId() {
    return this._installationId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: ecosystemInstallationAriStaticOpts.qualifier,
      platformQualifier: ecosystemInstallationAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: ecosystemInstallationAriStaticOpts.resourceOwner,
      resourceType: ecosystemInstallationAriStaticOpts.resourceType,
      resourceId: `${opts.installationId}`,
      resourceIdSegmentValues: {
        installationId: opts.installationId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, ecosystemInstallationAriStaticOpts);
    return new _EcosystemInstallationAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, ecosystemInstallationAriStaticOpts);
    return new _EcosystemInstallationAri(opts);
  }
  getVariables() {
    return {
      installationId: this.installationId
    };
  }
};

export {
  EcosystemInstallationAri
};
