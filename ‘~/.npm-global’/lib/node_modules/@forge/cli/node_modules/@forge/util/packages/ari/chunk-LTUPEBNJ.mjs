import {
  SlackSlackMessageAriResourceOwner,
  SlackSlackMessageAriResourceType
} from "./chunk-RMAZFETB.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/slack.slack/message/manifest.ts
var slackSlackMessageAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: SlackSlackMessageAriResourceOwner,
  resourceType: SlackSlackMessageAriResourceType,
  resourceIdSlug: "workspaceId/{workspaceId}/channelId/{channelId}/messageId/{messageId}",
  resourceIdSegmentFormats: {
    workspaceId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/,
    // eslint-disable-line no-useless-escape
    channelId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/,
    // eslint-disable-line no-useless-escape
    messageId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/slack.slack/message/index.ts
var SlackSlackMessageAri = class _SlackSlackMessageAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._channelId = opts.resourceIdSegmentValues.channelId, this._messageId = opts.resourceIdSegmentValues.messageId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get channelId() {
    return this._channelId;
  }
  get messageId() {
    return this._messageId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: slackSlackMessageAriStaticOpts.qualifier,
      platformQualifier: slackSlackMessageAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: slackSlackMessageAriStaticOpts.resourceOwner,
      resourceType: slackSlackMessageAriStaticOpts.resourceType,
      resourceId: `workspaceId/${opts.workspaceId}/channelId/${opts.channelId}/messageId/${opts.messageId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId,
        channelId: opts.channelId,
        messageId: opts.messageId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, slackSlackMessageAriStaticOpts);
    return new _SlackSlackMessageAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, slackSlackMessageAriStaticOpts);
    return new _SlackSlackMessageAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      channelId: this.channelId,
      messageId: this.messageId
    };
  }
};

export {
  SlackSlackMessageAri
};
