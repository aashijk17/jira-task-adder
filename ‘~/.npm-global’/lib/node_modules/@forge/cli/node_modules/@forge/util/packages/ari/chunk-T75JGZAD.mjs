import {
  ServicenowServicenowWorkItemAriResourceOwner,
  ServicenowServicenowWorkItemAriResourceType
} from "./chunk-KJ5FM7F5.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/servicenow.servicenow/work-item/manifest.ts
var servicenowServicenowWorkItemAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: ServicenowServicenowWorkItemAriResourceOwner,
  resourceType: ServicenowServicenowWorkItemAriResourceType,
  resourceIdSlug: "domain/{domain}/{type}/{id}",
  resourceIdSegmentFormats: {
    domain: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    type: /(?:incident|catalogrequest)/,
    // eslint-disable-line no-useless-escape
    id: /[0-9a-fA-F]{32}/
    // eslint-disable-line no-useless-escape
  }
};

// src/servicenow.servicenow/work-item/index.ts
var ServicenowServicenowWorkItemAri = class _ServicenowServicenowWorkItemAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._domain = opts.resourceIdSegmentValues.domain, this._type = opts.resourceIdSegmentValues.type, this._id = opts.resourceIdSegmentValues.id;
  }
  get domain() {
    return this._domain;
  }
  get type() {
    return this._type;
  }
  get id() {
    return this._id;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: servicenowServicenowWorkItemAriStaticOpts.qualifier,
      platformQualifier: servicenowServicenowWorkItemAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: servicenowServicenowWorkItemAriStaticOpts.resourceOwner,
      resourceType: servicenowServicenowWorkItemAriStaticOpts.resourceType,
      resourceId: `domain/${opts.domain}/${opts.type}/${opts.id}`,
      resourceIdSegmentValues: {
        domain: opts.domain || "",
        type: opts.type,
        id: opts.id
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, servicenowServicenowWorkItemAriStaticOpts);
    return new _ServicenowServicenowWorkItemAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, servicenowServicenowWorkItemAriStaticOpts);
    return new _ServicenowServicenowWorkItemAri(opts);
  }
  getVariables() {
    return {
      domain: this.domain,
      type: this.type,
      id: this.id
    };
  }
};

export {
  ServicenowServicenowWorkItemAri
};
