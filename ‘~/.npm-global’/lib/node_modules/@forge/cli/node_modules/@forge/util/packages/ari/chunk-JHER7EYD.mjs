import {
  ConfluenceDcConfluenceDcDocumentAriResourceOwner,
  ConfluenceDcConfluenceDcDocumentAriResourceType
} from "./chunk-4G32XNOY.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/confluence-dc.confluence-dc/document/manifest.ts
var confluenceDcConfluenceDcDocumentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: ConfluenceDcConfluenceDcDocumentAriResourceOwner,
  resourceType: ConfluenceDcConfluenceDcDocumentAriResourceType,
  resourceIdSlug: "{siteId}/type/{docType}/{docId}",
  resourceIdSegmentFormats: {
    siteId: /[a-zA-Z0-9_\-.]{1,255}/,
    // eslint-disable-line no-useless-escape
    docType: /(?:page|blogpost|attachment)/,
    // eslint-disable-line no-useless-escape
    docId: /[0-9]+/
    // eslint-disable-line no-useless-escape
  }
};

// src/confluence-dc.confluence-dc/document/index.ts
var ConfluenceDcConfluenceDcDocumentAri = class _ConfluenceDcConfluenceDcDocumentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.resourceIdSegmentValues.siteId, this._docType = opts.resourceIdSegmentValues.docType, this._docId = opts.resourceIdSegmentValues.docId;
  }
  get siteId() {
    return this._siteId;
  }
  get docType() {
    return this._docType;
  }
  get docId() {
    return this._docId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: confluenceDcConfluenceDcDocumentAriStaticOpts.qualifier,
      platformQualifier: confluenceDcConfluenceDcDocumentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: confluenceDcConfluenceDcDocumentAriStaticOpts.resourceOwner,
      resourceType: confluenceDcConfluenceDcDocumentAriStaticOpts.resourceType,
      resourceId: `${opts.siteId}/type/${opts.docType}/${opts.docId}`,
      resourceIdSegmentValues: {
        siteId: opts.siteId,
        docType: opts.docType,
        docId: opts.docId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, confluenceDcConfluenceDcDocumentAriStaticOpts);
    return new _ConfluenceDcConfluenceDcDocumentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, confluenceDcConfluenceDcDocumentAriStaticOpts);
    return new _ConfluenceDcConfluenceDcDocumentAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      docType: this.docType,
      docId: this.docId
    };
  }
};

export {
  ConfluenceDcConfluenceDcDocumentAri
};
