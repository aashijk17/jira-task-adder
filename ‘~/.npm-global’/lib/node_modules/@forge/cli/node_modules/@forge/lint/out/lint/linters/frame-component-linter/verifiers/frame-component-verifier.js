"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FrameComponentVerifier = void 0;
const linter_interface_1 = require("../../../linter-interface");
const verifier_interface_1 = require("../../verifier-interface");
const text_1 = require("../../../text");
class FrameComponentVerifier extends verifier_interface_1.BaseLintIssueVerifier {
    possibleFrameResourceKeys;
    constructor(environment, manifest) {
        super(environment, manifest);
        this.possibleFrameResourceKeys = this.getPossibleFrameResourceKeysFromManifest();
    }
    getLintClass() {
        return linter_interface_1.LintClass.Error;
    }
    async process(frameResources) {
        return frameResources
            .filter(({ resource }) => !this.isValidFrameResourceKey(resource))
            .map(({ resource, column, line }) => {
            const linterMessages = text_1.messages.verifiers.frameComponentResource;
            return {
                class: this.getLintClass(),
                column,
                line,
                message: resource ? linterMessages.invalid.message(resource) : linterMessages.missing.message(),
                reference: resource ? linterMessages.invalid.reference : linterMessages.missing.reference
            };
        });
    }
    isValidFrameResourceKey(resourceKey) {
        if (!resourceKey) {
            return false;
        }
        return this.possibleFrameResourceKeys.has(resourceKey);
    }
    getPossibleFrameResourceKeysFromManifest() {
        const resources = this.manifest?.resources ?? [];
        return new Set(resources.map(({ key }) => key));
    }
}
exports.FrameComponentVerifier = FrameComponentVerifier;
