import {
  LucidLucidchartRemoteLinkAriResourceOwner,
  LucidLucidchartRemoteLinkAriResourceType
} from "./chunk-SCXWFMLG.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/lucid.lucidchart/remote-link/manifest.ts
var lucidLucidchartRemoteLinkAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "third-party",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: LucidLucidchartRemoteLinkAriResourceOwner,
  resourceType: LucidLucidchartRemoteLinkAriResourceType,
  resourceIdSlug: "chart/{chartId}",
  resourceIdSegmentFormats: {
    chartId: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/lucid.lucidchart/remote-link/index.ts
var LucidLucidchartRemoteLinkAri = class _LucidLucidchartRemoteLinkAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._chartId = opts.resourceIdSegmentValues.chartId;
  }
  get chartId() {
    return this._chartId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: lucidLucidchartRemoteLinkAriStaticOpts.qualifier,
      platformQualifier: lucidLucidchartRemoteLinkAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: lucidLucidchartRemoteLinkAriStaticOpts.resourceOwner,
      resourceType: lucidLucidchartRemoteLinkAriStaticOpts.resourceType,
      resourceId: `chart/${opts.chartId}`,
      resourceIdSegmentValues: {
        chartId: opts.chartId
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, lucidLucidchartRemoteLinkAriStaticOpts);
    return new _LucidLucidchartRemoteLinkAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, lucidLucidchartRemoteLinkAriStaticOpts);
    return new _LucidLucidchartRemoteLinkAri(opts);
  }
  getVariables() {
    return {
      chartId: this.chartId
    };
  }
};

export {
  LucidLucidchartRemoteLinkAri
};
