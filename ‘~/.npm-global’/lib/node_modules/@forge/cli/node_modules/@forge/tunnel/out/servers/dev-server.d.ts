/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import http from 'http';
import { URL } from 'url';
import express from 'express';
import { BundlerWatch, BundlerOutput } from '@forge/bundler';
import { AppEnvironmentsGraphqlClient, ConfigFile, FileSystemReader, I18nResourceBundlingService, Logger, StatsigService, TunnelOptions, UserError } from '@forge/cli-shared';
import { ExternalRequestBody } from '@forge/runtime';
import { Permissions, Remotes } from '@forge/manifest';
export interface ProxyServerError extends Error {
    code?: string;
}
export declare class TunnelInvocationValidationError extends UserError {
}
export interface DevelopmentServer {
    start(port?: number, permissions?: Permissions, remotes?: Remotes): Promise<StartDevServerResult>;
    stop(): Promise<void>;
    compileAndWatch(hooks: BundlerWatch, tunnelOptions?: TunnelOptions): Promise<BundlerOutput>;
    setErrorHandler?: (handler: (err: Error) => Promise<void>) => void;
}
export interface StartDevServerResult {
    port: number;
    devServer: DevelopmentServer;
    resourceKey?: string;
    tunnelUrl?: URL;
}
export interface InvocationService {
    invoke(handler: string, request: ExternalRequestBody): Promise<any>;
}
export declare function stopServer(server: http.Server | undefined): Promise<void>;
export declare class LocalDevelopmentServer implements DevelopmentServer {
    private readonly invocationService;
    private readonly logger;
    private readonly configFile;
    private readonly fileSystemReader;
    private readonly statsigService;
    private readonly i18nResourceBundlingService;
    private readonly appEnvironmentClient;
    private app;
    private httpServer;
    private tunnelOptions;
    private environmentId;
    private appId;
    onFatalError?: (err: Error) => Promise<void>;
    constructor(invocationService: InvocationService, logger: Logger, configFile: ConfigFile, fileSystemReader: FileSystemReader, statsigService: StatsigService, i18nResourceBundlingService: I18nResourceBundlingService, appEnvironmentClient: AppEnvironmentsGraphqlClient);
    start(port?: number, _permissions?: Permissions, _remotes?: Remotes): Promise<StartDevServerResult>;
    stop(): Promise<void>;
    compileAndWatch(watch: BundlerWatch, tunnelOptions?: TunnelOptions): Promise<BundlerOutput>;
    getApp(): express.Application;
    setErrorHandler(handler: (err: Error) => Promise<void>): void;
    handleInvocation: express.Handler;
    configureProxyMiddleware: express.Handler;
    validateApp(request: ExternalRequestBody): Promise<void>;
    private setEnvironmentAndAppId;
}
//# sourceMappingURL=dev-server.d.ts.map