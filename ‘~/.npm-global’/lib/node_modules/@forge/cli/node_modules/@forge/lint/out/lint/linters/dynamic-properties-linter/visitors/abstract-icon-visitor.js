"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractIconVisitor = void 0;
const typescript_estree_1 = require("@typescript-eslint/typescript-estree");
class AbstractIconVisitor {
    visit(node, parent, callback) {
        switch (node.type) {
            case typescript_estree_1.AST_NODE_TYPES.ArrowFunctionExpression:
                if (node.body?.type === typescript_estree_1.AST_NODE_TYPES.ObjectExpression) {
                    const iconDefinitionNode = this.getIconDefinitionNode(node.body);
                    this.handleIconNode(iconDefinitionNode?.value, callback);
                }
                break;
            case typescript_estree_1.AST_NODE_TYPES.ReturnStatement:
                if (node.argument?.type === typescript_estree_1.AST_NODE_TYPES.ObjectExpression) {
                    const iconDefinitionNode = this.getIconDefinitionNode(node.argument);
                    this.handleIconNode(iconDefinitionNode?.value, callback);
                }
                break;
        }
    }
    isBundledUri = (iconUri) => iconUri.startsWith('resource:') || iconUri.startsWith('data:image');
    handleIconNode = (iconNode, callback) => {
        if (iconNode?.type === typescript_estree_1.AST_NODE_TYPES.Literal && typeof iconNode?.value === 'string') {
            if (iconNode.value.trim() !== '' && !this.isBundledUri(iconNode.value.trim())) {
                const iconUrl = this.transformArgsToIconUrl(iconNode);
                callback(iconUrl);
            }
        }
    };
    transformArgsToIconUrl = (iconNode) => ({
        type: 'DYNAMIC_PROPERTIES_ICON',
        url: iconNode.value,
        line: iconNode.loc.start.line,
        column: iconNode.loc.start.column
    });
}
exports.AbstractIconVisitor = AbstractIconVisitor;
