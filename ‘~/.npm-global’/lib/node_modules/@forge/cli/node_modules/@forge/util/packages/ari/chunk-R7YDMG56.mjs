import {
  JiraNavigationMenuAriResourceOwner,
  JiraNavigationMenuAriResourceType
} from "./chunk-N67HXPHT.mjs";
import {
  RegisteredAri
} from "./chunk-AB4PPISI.mjs";
import {
  AriParser
} from "./chunk-S7RIZVFI.mjs";

// src/jira/navigation-menu/manifest.ts
var jiraNavigationMenuAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^[a-zA-Z0-9_\\-.]{1,255}$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: JiraNavigationMenuAriResourceOwner,
  resourceType: JiraNavigationMenuAriResourceType,
  resourceIdSlug: "activation/{activationId}/{navigationItemScope}",
  resourceIdSegmentFormats: {
    activationId: /[a-zA-Z0-9\-]+/,
    // eslint-disable-line no-useless-escape
    navigationItemScope: /[!a-zA-Z0-9\-_.~@:;{}=]+(\/[!a-zA-Z0-9\-_.~@:;{}=]+)*/
    // eslint-disable-line no-useless-escape
  }
};

// src/jira/navigation-menu/index.ts
var JiraNavigationMenuAri = class _JiraNavigationMenuAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._siteId = opts.cloudId || "", this._activationId = opts.resourceIdSegmentValues.activationId, this._navigationItemScope = opts.resourceIdSegmentValues.navigationItemScope;
  }
  get siteId() {
    return this._siteId;
  }
  get activationId() {
    return this._activationId;
  }
  get navigationItemScope() {
    return this._navigationItemScope;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: jiraNavigationMenuAriStaticOpts.qualifier,
      platformQualifier: jiraNavigationMenuAriStaticOpts.platformQualifier,
      cloudId: opts.siteId,
      resourceOwner: jiraNavigationMenuAriStaticOpts.resourceOwner,
      resourceType: jiraNavigationMenuAriStaticOpts.resourceType,
      resourceId: `activation/${opts.activationId}/${opts.navigationItemScope}`,
      resourceIdSegmentValues: {
        activationId: opts.activationId,
        navigationItemScope: opts.navigationItemScope
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, jiraNavigationMenuAriStaticOpts);
    return new _JiraNavigationMenuAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, jiraNavigationMenuAriStaticOpts);
    return new _JiraNavigationMenuAri(opts);
  }
  getVariables() {
    return {
      siteId: this.siteId,
      activationId: this.activationId,
      navigationItemScope: this.navigationItemScope
    };
  }
};

export {
  JiraNavigationMenuAri
};
