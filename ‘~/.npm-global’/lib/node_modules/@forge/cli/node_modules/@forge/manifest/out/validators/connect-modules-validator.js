"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectModulesValidator = void 0;
const types_1 = require("../types");
const utils_1 = require("../utils");
const text_1 = require("../text");
class ConnectModulesValidator {
    async validate(manifest) {
        if (!manifest || !manifest.typedContent || !manifest.filePath) {
            return {
                success: false,
                manifestObject: manifest
            };
        }
        const validationErrors = [];
        if (manifest.typedContent.connectModules) {
            const { typedContent: { connectModules }, yamlContentByLine } = manifest;
            const connectModuleNames = Object.keys(connectModules);
            const validconnectModuleNames = types_1.SUPPORTED_MODULES.filter((moduleName) => moduleName.startsWith('connect-')).map((name) => name.replace(/connect-/g, ''));
            connectModuleNames
                .filter((name) => !validconnectModuleNames.includes(name))
                .forEach((invalidName) => {
                validationErrors.push({
                    message: text_1.errors.connectModules.invalidConnectModule(invalidName),
                    reference: text_1.References.ConnectModules,
                    level: 'error',
                    ...(0, utils_1.findPosition)(invalidName, yamlContentByLine, 'connectModules')
                });
            });
            const lifecycleModules = connectModuleNames.filter((m) => m.endsWith(':lifecycle'));
            if (lifecycleModules) {
                lifecycleModules.forEach((lifecycle) => {
                    const lifecycleModule = connectModules[lifecycle];
                    if (Array.isArray(lifecycleModule) && lifecycleModule.length > 1) {
                        validationErrors.push({
                            message: text_1.errors.connectModules.duplicateLifecycleFound(lifecycle),
                            reference: text_1.References.ConnectModules,
                            level: 'error',
                            ...(0, utils_1.findPosition)(lifecycle, yamlContentByLine)
                        });
                    }
                });
            }
        }
        return {
            success: validationErrors.length === 0,
            manifestObject: manifest,
            errors: validationErrors
        };
    }
}
exports.ConnectModulesValidator = ConnectModulesValidator;
