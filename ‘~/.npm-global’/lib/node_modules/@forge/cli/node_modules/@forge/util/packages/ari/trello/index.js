"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);

// src/trello/index.ts
var trello_exports = {};
__export(trello_exports, {
  TrelloAttachmentAri: () => TrelloAttachmentAri,
  TrelloAvatarAri: () => TrelloAvatarAri,
  TrelloBackgroundAri: () => TrelloBackgroundAri,
  TrelloBoardAri: () => TrelloBoardAri,
  TrelloCardAri: () => TrelloCardAri,
  TrelloCheckItemAri: () => TrelloCheckItemAri,
  TrelloChecklistAri: () => TrelloChecklistAri,
  TrelloCustomFieldAri: () => TrelloCustomFieldAri,
  TrelloEmojiAri: () => TrelloEmojiAri,
  TrelloEnterpriseAri: () => TrelloEnterpriseAri,
  TrelloLabelAri: () => TrelloLabelAri,
  TrelloListAri: () => TrelloListAri,
  TrelloLogoAri: () => TrelloLogoAri,
  TrelloPlannerAri: () => TrelloPlannerAri,
  TrelloPlannerCalendarAri: () => TrelloPlannerCalendarAri,
  TrelloPlannerEventCardAri: () => TrelloPlannerEventCardAri,
  TrelloRoleAri: () => TrelloRoleAri,
  TrelloSiteAri: () => TrelloSiteAri,
  TrelloStickerAri: () => TrelloStickerAri,
  TrelloUserAri: () => TrelloUserAri,
  TrelloWorkspaceAri: () => TrelloWorkspaceAri
});
module.exports = __toCommonJS(trello_exports);

// src/errors.ts
var ValidationError = class extends Error {
};

// src/core/rules/cloud-id.ts
function validateCloudId(cloudId, format = new RegExp("^[a-zA-Z0-9_\\-.]{0,255}$")) {
  if (!cloudId.match(format))
    throw new ValidationError(`Invalid cloud ID, expected ID of format ${format}.`);
}

// src/core/rules/platform-qualifier.ts
function validatePlatformQualifier(qualifier) {
  if (qualifier !== "cloud" && qualifier !== "third-party")
    throw new ValidationError(`Identifier must have a qualifier of 'cloud' or 'third-party'. Received: ${qualifier}`);
}

// src/core/rules/qualifier.ts
function validateAtiQualifier(qualifier) {
  if (qualifier !== "ati")
    throw new ValidationError(`ATI must have a qualifier of 'ati'. Received: ${qualifier}`);
}
function validateAriQualifier(qualifier) {
  if (qualifier !== "ari")
    throw new ValidationError(`ARI must have a qualifier of 'ari'. Received: ${qualifier}`);
}

// src/core/rules/resource-id.ts
function validateResourceId(id, format = new RegExp("[!a-zA-Z0-9\\-_.~@:;{}=]+(/[!a-zA-Z0-9\\-_.~@:;{}=]+)*" /* ANY_RESOURCE_ID */), key = "resourceId") {
  let formatWithCarets = new RegExp(`^${format.source}$`);
  if (!id.match(formatWithCarets))
    throw new ValidationError(`Invalid ${key} - ${id}, expected ID of format ${formatWithCarets}.`);
}

// src/core/rules/resource-id-segments.ts
function validateResourceIdSegments(resourceIdSegmentValues, resourceIdSegmentFormats) {
  Object.entries(resourceIdSegmentValues).forEach(([resourceIdKey, resourceIdValue]) => {
    validateResourceId(resourceIdValue, resourceIdSegmentFormats == null ? void 0 : resourceIdSegmentFormats[resourceIdKey], resourceIdKey);
  });
}

// src/core/rules/resource-owner.ts
function validateResourceOwner(owner, expectedResourceOwner) {
  if (expectedResourceOwner && owner !== expectedResourceOwner)
    throw new ValidationError(`Invalid resource owner - ${owner}, expected ${expectedResourceOwner}.`);
}

// src/core/rules/resource-type.ts
function validateResourceType(type, expectedResourceType) {
  if (expectedResourceType && type !== expectedResourceType)
    throw new ValidationError(`Invalid resource type - ${type}, expected ${expectedResourceType}.`);
}

// src/core/parser/base.ts
var NUMBER_OF_BASE_SEGMENTS = 5, SEGMENT_SEPARATOR = ":", BaseParser = class {
  static getIdentifierSegments(inputStr, numberOfSegmentsRequired) {
    let allSegments = inputStr.split(SEGMENT_SEPARATOR);
    if (allSegments.length < numberOfSegmentsRequired)
      throw new ValidationError(`Input string must have ${numberOfSegmentsRequired} segments.`);
    if (allSegments.length > numberOfSegmentsRequired) {
      let segments = allSegments.slice(0, NUMBER_OF_BASE_SEGMENTS - 1), segmentsForResourceId = allSegments.slice(NUMBER_OF_BASE_SEGMENTS - 1, allSegments.length);
      return [...segments, segmentsForResourceId.join(SEGMENT_SEPARATOR)];
    }
    return allSegments;
  }
};

// src/core/parser/ari.ts
var NUMBER_OF_ARI_SEGMENTS = 5, AriParser = class extends BaseParser {
  static fromString(maybeAri, ariProperties) {
    let segments = this.getIdentifierSegments(maybeAri, NUMBER_OF_ARI_SEGMENTS), [qualifier, platformQualifier, resourceOwner, cloudId, resourceTypeAndId] = segments, [resourceType, ...resourceIdSegments] = resourceTypeAndId.split("/"), maybeAriDerivedProperties = {
      qualifier,
      platformQualifier,
      cloudId,
      resourceOwner,
      resourceType,
      resourceId: resourceIdSegments.join("/"),
      resourceIdSegmentValues: ariProperties != null && ariProperties.resourceIdSlug ? this.ariSegmentValuesFromSlug(
        ariProperties.resourceIdSlug,
        resourceIdSegments.join("/"),
        Object.keys(ariProperties.resourceIdSegmentFormats)
      ) : {}
    };
    return this.fromOpts(maybeAriDerivedProperties, ariProperties);
  }
  static fromOpts(maybeAriOpts, ariProperties) {
    let {
      qualifier = "ari",
      platformQualifier = "cloud",
      resourceOwner,
      cloudId,
      resourceId,
      resourceIdSegmentValues,
      resourceType
    } = maybeAriOpts;
    return validateAriQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateCloudId(maybeAriOpts.cloudId || "", ariProperties == null ? void 0 : ariProperties.cloudId), validateResourceOwner(resourceOwner, ariProperties == null ? void 0 : ariProperties.resourceOwner), validateResourceType(resourceType, ariProperties == null ? void 0 : ariProperties.resourceType), validateResourceIdSegments(resourceIdSegmentValues, ariProperties == null ? void 0 : ariProperties.resourceIdSegmentFormats), {
      qualifier,
      resourceOwner,
      resourceType,
      platformQualifier,
      cloudId,
      resourceId,
      resourceIdSegmentValues
    };
  }
  static ariSegmentValuesFromSlug(slug, incomingSegments, expectedKeys) {
    let regexpResult = new RegExp("^" + slug.replace(/\{(.*?)\}/g, "(?<$1>.*?)") + "$").exec(incomingSegments);
    if (!regexpResult)
      throw new ValidationError(`Segment '${incomingSegments}' don't match expected slug: ${slug}`);
    return expectedKeys.forEach((expectedKey) => {
      var _a;
      if (!((_a = regexpResult.groups) != null && _a[expectedKey]))
        throw new ValidationError(`No value supplied for '${expectedKey}' based on slug ${slug}`);
    }), regexpResult.groups || {};
  }
};

// src/core/parser/ati.ts
var NUMBER_OF_ATI_SEGMENTS = 4, AtiParser = class extends BaseParser {
  static fromString(inputStr, atiOpts) {
    let segments = this.getIdentifierSegments(inputStr, NUMBER_OF_ATI_SEGMENTS), [qualifier = "ati", platformQualifier = "cloud", resourceOwner, resourceType] = segments;
    return validateAtiQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateResourceOwner(resourceOwner, atiOpts == null ? void 0 : atiOpts.resourceOwner), validateResourceType(resourceType, atiOpts == null ? void 0 : atiOpts.resourceType), { platformQualifier, resourceOwner, resourceType };
  }
  static fromOpts(maybeAtiOpts, atiOpts) {
    let { qualifier, platformQualifier, resourceOwner, resourceType } = maybeAtiOpts;
    return validateAtiQualifier(qualifier), validatePlatformQualifier(platformQualifier), validateResourceOwner(resourceOwner, atiOpts == null ? void 0 : atiOpts.resourceOwner), validateResourceType(resourceType, atiOpts == null ? void 0 : atiOpts.resourceType), {
      platformQualifier,
      resourceOwner,
      resourceType
    };
  }
};

// src/ati.ts
var Ati = class _Ati {
  constructor(platformQualifier, resourceOwner, resourceType) {
    this._platformQualifier = platformQualifier, this._resourceOwner = resourceOwner, this._resourceType = resourceType;
  }
  get platformQualifier() {
    return this._platformQualifier;
  }
  get resourceOwner() {
    return this._resourceOwner;
  }
  get resourceType() {
    return this._resourceType;
  }
  static create(opts) {
    return new _Ati(opts.platformQualifier || "cloud", opts.resourceOwner, opts.resourceType);
  }
  static parse(maybeAti, atiOpts) {
    let opts = AtiParser.fromString(maybeAti, atiOpts);
    return new _Ati(opts.platformQualifier, opts.resourceOwner, opts.resourceType);
  }
  toString() {
    return `ati:${this.platformQualifier}:${this.resourceOwner}:${this.resourceType}`;
  }
  toJSON() {
    return this.toString();
  }
  toOpts() {
    return {
      platformQualifier: this._platformQualifier,
      resourceOwner: this._resourceOwner,
      resourceType: this._resourceType
    };
  }
};

// src/core/ari.ts
var Ari = class {
  constructor(opts) {
    this._ati = Ati.create({
      platformQualifier: opts.platformQualifier || "cloud",
      resourceOwner: opts.resourceOwner,
      resourceType: opts.resourceType
    }), this._cloudId = opts.cloudId !== "" ? opts.cloudId : void 0, this._resourceId = opts.resourceId;
  }
  get platformQualifier() {
    return this._ati.platformQualifier;
  }
  get cloudId() {
    return this._cloudId;
  }
  get resourceOwner() {
    return this._ati.resourceOwner;
  }
  get resourceType() {
    return this._ati.resourceType;
  }
  get resourceId() {
    return this._resourceId;
  }
  get ati() {
    return this._ati;
  }
  equals(other) {
    return this.toString() === other.toString();
  }
  toString() {
    return `ari:${this.platformQualifier}:${this.resourceOwner}:${this.cloudId || ""}:${this.resourceType}/${this.resourceId}`;
  }
  toJSON() {
    return this.toString();
  }
  toOpts() {
    return {
      platformQualifier: this.platformQualifier,
      resourceOwner: this.resourceOwner,
      cloudId: this.cloudId,
      resourceType: this.resourceType,
      resourceId: this.resourceId
    };
  }
};

// src/any-ari.ts
var AnyAri = class _AnyAri extends Ari {
  constructor(opts) {
    super(opts);
  }
  static create(ariOpts, ariStaticOpts) {
    let ariOptsWithDefaults = { ...ariOpts, resourceIdSegmentValues: {} }, validatedOpts = AriParser.fromOpts(ariOptsWithDefaults, ariStaticOpts);
    return new _AnyAri(validatedOpts);
  }
  static parse(maybeAri, ariStaticOpts) {
    let validatedOpts = AriParser.fromString(maybeAri, ariStaticOpts);
    return new _AnyAri(validatedOpts);
  }
  static check(maybeAri) {
    try {
      return _AnyAri.parse(maybeAri.toString()), !0;
    } catch (err) {
      return !1;
    }
  }
  asAnyAri() {
    return this;
  }
};

// src/core/registered-ari.ts
var RegisteredAri = class extends Ari {
  static check(maybeAri) {
    try {
      return this.parse(maybeAri.toString()), !0;
    } catch (err) {
      return !1;
    }
  }
  asAnyAri() {
    return AnyAri.parse(this.toString());
  }
};

// src/trello/attachment/types.ts
var TrelloAttachmentAriResourceOwner = "trello", TrelloAttachmentAriResourceType = "attachment";

// src/trello/attachment/manifest.ts
var trelloAttachmentAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloAttachmentAriResourceOwner,
  resourceType: TrelloAttachmentAriResourceType,
  resourceIdSlug: "card/workspace/{workspaceId}/{cardId}/{attachmentId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    cardId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    attachmentId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/attachment/index.ts
var TrelloAttachmentAri = class _TrelloAttachmentAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._cardId = opts.resourceIdSegmentValues.cardId, this._attachmentId = opts.resourceIdSegmentValues.attachmentId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get cardId() {
    return this._cardId;
  }
  get attachmentId() {
    return this._attachmentId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloAttachmentAriStaticOpts.qualifier,
      platformQualifier: trelloAttachmentAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloAttachmentAriStaticOpts.resourceOwner,
      resourceType: trelloAttachmentAriStaticOpts.resourceType,
      resourceId: `card/workspace/${opts.workspaceId}/${opts.cardId}/${opts.attachmentId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || "",
        cardId: opts.cardId || "",
        attachmentId: opts.attachmentId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloAttachmentAriStaticOpts);
    return new _TrelloAttachmentAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloAttachmentAriStaticOpts);
    return new _TrelloAttachmentAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      cardId: this.cardId,
      attachmentId: this.attachmentId
    };
  }
};

// src/trello/avatar/types.ts
var TrelloAvatarAriResourceOwner = "trello", TrelloAvatarAriResourceType = "avatar";

// src/trello/avatar/manifest.ts
var trelloAvatarAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloAvatarAriResourceOwner,
  resourceType: TrelloAvatarAriResourceType,
  resourceIdSlug: "member/{memberId}/{avatarHash}",
  resourceIdSegmentFormats: {
    memberId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    avatarHash: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/avatar/index.ts
var TrelloAvatarAri = class _TrelloAvatarAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._memberId = opts.resourceIdSegmentValues.memberId, this._avatarHash = opts.resourceIdSegmentValues.avatarHash;
  }
  get memberId() {
    return this._memberId;
  }
  get avatarHash() {
    return this._avatarHash;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloAvatarAriStaticOpts.qualifier,
      platformQualifier: trelloAvatarAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloAvatarAriStaticOpts.resourceOwner,
      resourceType: trelloAvatarAriStaticOpts.resourceType,
      resourceId: `member/${opts.memberId}/${opts.avatarHash}`,
      resourceIdSegmentValues: {
        memberId: opts.memberId || "",
        avatarHash: opts.avatarHash || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloAvatarAriStaticOpts);
    return new _TrelloAvatarAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloAvatarAriStaticOpts);
    return new _TrelloAvatarAri(opts);
  }
  getVariables() {
    return {
      memberId: this.memberId,
      avatarHash: this.avatarHash
    };
  }
};

// src/trello/background/types.ts
var TrelloBackgroundAriResourceOwner = "trello", TrelloBackgroundAriResourceType = "background";

// src/trello/background/manifest.ts
var trelloBackgroundAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloBackgroundAriResourceOwner,
  resourceType: TrelloBackgroundAriResourceType,
  resourceIdSlug: "type-id/background-type/{backgroundType}/{typeId}/{backgroundId}",
  resourceIdSegmentFormats: {
    backgroundType: /(?:member|board|shared)/,
    // eslint-disable-line no-useless-escape
    typeId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    backgroundId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/background/index.ts
var TrelloBackgroundAri = class _TrelloBackgroundAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._backgroundType = opts.resourceIdSegmentValues.backgroundType, this._typeId = opts.resourceIdSegmentValues.typeId, this._backgroundId = opts.resourceIdSegmentValues.backgroundId;
  }
  get backgroundType() {
    return this._backgroundType;
  }
  get typeId() {
    return this._typeId;
  }
  get backgroundId() {
    return this._backgroundId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloBackgroundAriStaticOpts.qualifier,
      platformQualifier: trelloBackgroundAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloBackgroundAriStaticOpts.resourceOwner,
      resourceType: trelloBackgroundAriStaticOpts.resourceType,
      resourceId: `type-id/background-type/${opts.backgroundType}/${opts.typeId}/${opts.backgroundId}`,
      resourceIdSegmentValues: {
        backgroundType: opts.backgroundType,
        typeId: opts.typeId || "",
        backgroundId: opts.backgroundId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloBackgroundAriStaticOpts);
    return new _TrelloBackgroundAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloBackgroundAriStaticOpts);
    return new _TrelloBackgroundAri(opts);
  }
  getVariables() {
    return {
      backgroundType: this.backgroundType,
      typeId: this.typeId,
      backgroundId: this.backgroundId
    };
  }
};

// src/trello/board/types.ts
var TrelloBoardAriResourceOwner = "trello", TrelloBoardAriResourceType = "board";

// src/trello/board/manifest.ts
var trelloBoardAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloBoardAriResourceOwner,
  resourceType: TrelloBoardAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{boardId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    boardId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/board/index.ts
var TrelloBoardAri = class _TrelloBoardAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._boardId = opts.resourceIdSegmentValues.boardId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get boardId() {
    return this._boardId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloBoardAriStaticOpts.qualifier,
      platformQualifier: trelloBoardAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloBoardAriStaticOpts.resourceOwner,
      resourceType: trelloBoardAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.boardId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || "",
        boardId: opts.boardId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloBoardAriStaticOpts);
    return new _TrelloBoardAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloBoardAriStaticOpts);
    return new _TrelloBoardAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      boardId: this.boardId
    };
  }
};

// src/trello/card/types.ts
var TrelloCardAriResourceOwner = "trello", TrelloCardAriResourceType = "card";

// src/trello/card/manifest.ts
var trelloCardAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloCardAriResourceOwner,
  resourceType: TrelloCardAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{cardId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    cardId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/card/index.ts
var TrelloCardAri = class _TrelloCardAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._cardId = opts.resourceIdSegmentValues.cardId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get cardId() {
    return this._cardId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloCardAriStaticOpts.qualifier,
      platformQualifier: trelloCardAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloCardAriStaticOpts.resourceOwner,
      resourceType: trelloCardAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.cardId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || "",
        cardId: opts.cardId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloCardAriStaticOpts);
    return new _TrelloCardAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloCardAriStaticOpts);
    return new _TrelloCardAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      cardId: this.cardId
    };
  }
};

// src/trello/check-item/types.ts
var TrelloCheckItemAriResourceOwner = "trello", TrelloCheckItemAriResourceType = "check-item";

// src/trello/check-item/manifest.ts
var trelloCheckItemAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloCheckItemAriResourceOwner,
  resourceType: TrelloCheckItemAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{checkItemId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    checkItemId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/check-item/index.ts
var TrelloCheckItemAri = class _TrelloCheckItemAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._checkItemId = opts.resourceIdSegmentValues.checkItemId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get checkItemId() {
    return this._checkItemId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloCheckItemAriStaticOpts.qualifier,
      platformQualifier: trelloCheckItemAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloCheckItemAriStaticOpts.resourceOwner,
      resourceType: trelloCheckItemAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.checkItemId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || "",
        checkItemId: opts.checkItemId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloCheckItemAriStaticOpts);
    return new _TrelloCheckItemAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloCheckItemAriStaticOpts);
    return new _TrelloCheckItemAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      checkItemId: this.checkItemId
    };
  }
};

// src/trello/checklist/types.ts
var TrelloChecklistAriResourceOwner = "trello", TrelloChecklistAriResourceType = "checklist";

// src/trello/checklist/manifest.ts
var trelloChecklistAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloChecklistAriResourceOwner,
  resourceType: TrelloChecklistAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{checklistId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    checklistId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/checklist/index.ts
var TrelloChecklistAri = class _TrelloChecklistAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._checklistId = opts.resourceIdSegmentValues.checklistId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get checklistId() {
    return this._checklistId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloChecklistAriStaticOpts.qualifier,
      platformQualifier: trelloChecklistAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloChecklistAriStaticOpts.resourceOwner,
      resourceType: trelloChecklistAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.checklistId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || "",
        checklistId: opts.checklistId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloChecklistAriStaticOpts);
    return new _TrelloChecklistAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloChecklistAriStaticOpts);
    return new _TrelloChecklistAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      checklistId: this.checklistId
    };
  }
};

// src/trello/custom-field/types.ts
var TrelloCustomFieldAriResourceOwner = "trello", TrelloCustomFieldAriResourceType = "custom-field";

// src/trello/custom-field/manifest.ts
var trelloCustomFieldAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloCustomFieldAriResourceOwner,
  resourceType: TrelloCustomFieldAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{customFieldId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    customFieldId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/custom-field/index.ts
var TrelloCustomFieldAri = class _TrelloCustomFieldAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._customFieldId = opts.resourceIdSegmentValues.customFieldId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get customFieldId() {
    return this._customFieldId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloCustomFieldAriStaticOpts.qualifier,
      platformQualifier: trelloCustomFieldAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloCustomFieldAriStaticOpts.resourceOwner,
      resourceType: trelloCustomFieldAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.customFieldId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || "",
        customFieldId: opts.customFieldId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloCustomFieldAriStaticOpts);
    return new _TrelloCustomFieldAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloCustomFieldAriStaticOpts);
    return new _TrelloCustomFieldAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      customFieldId: this.customFieldId
    };
  }
};

// src/trello/emoji/types.ts
var TrelloEmojiAriResourceOwner = "trello", TrelloEmojiAriResourceType = "emoji";

// src/trello/emoji/manifest.ts
var trelloEmojiAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloEmojiAriResourceOwner,
  resourceType: TrelloEmojiAriResourceType,
  resourceIdSlug: "{customEmojiId}",
  resourceIdSegmentFormats: {
    customEmojiId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/emoji/index.ts
var TrelloEmojiAri = class _TrelloEmojiAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._customEmojiId = opts.resourceIdSegmentValues.customEmojiId;
  }
  get customEmojiId() {
    return this._customEmojiId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloEmojiAriStaticOpts.qualifier,
      platformQualifier: trelloEmojiAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloEmojiAriStaticOpts.resourceOwner,
      resourceType: trelloEmojiAriStaticOpts.resourceType,
      resourceId: `${opts.customEmojiId}`,
      resourceIdSegmentValues: {
        customEmojiId: opts.customEmojiId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloEmojiAriStaticOpts);
    return new _TrelloEmojiAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloEmojiAriStaticOpts);
    return new _TrelloEmojiAri(opts);
  }
  getVariables() {
    return {
      customEmojiId: this.customEmojiId
    };
  }
};

// src/trello/enterprise/types.ts
var TrelloEnterpriseAriResourceOwner = "trello", TrelloEnterpriseAriResourceType = "enterprise";

// src/trello/enterprise/manifest.ts
var trelloEnterpriseAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloEnterpriseAriResourceOwner,
  resourceType: TrelloEnterpriseAriResourceType,
  resourceIdSlug: "{enterpriseId}",
  resourceIdSegmentFormats: {
    enterpriseId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/enterprise/index.ts
var TrelloEnterpriseAri = class _TrelloEnterpriseAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._enterpriseId = opts.resourceIdSegmentValues.enterpriseId;
  }
  get enterpriseId() {
    return this._enterpriseId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloEnterpriseAriStaticOpts.qualifier,
      platformQualifier: trelloEnterpriseAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloEnterpriseAriStaticOpts.resourceOwner,
      resourceType: trelloEnterpriseAriStaticOpts.resourceType,
      resourceId: `${opts.enterpriseId}`,
      resourceIdSegmentValues: {
        enterpriseId: opts.enterpriseId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloEnterpriseAriStaticOpts);
    return new _TrelloEnterpriseAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloEnterpriseAriStaticOpts);
    return new _TrelloEnterpriseAri(opts);
  }
  getVariables() {
    return {
      enterpriseId: this.enterpriseId
    };
  }
};

// src/trello/label/types.ts
var TrelloLabelAriResourceOwner = "trello", TrelloLabelAriResourceType = "label";

// src/trello/label/manifest.ts
var trelloLabelAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloLabelAriResourceOwner,
  resourceType: TrelloLabelAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{labelId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    labelId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/label/index.ts
var TrelloLabelAri = class _TrelloLabelAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._labelId = opts.resourceIdSegmentValues.labelId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get labelId() {
    return this._labelId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloLabelAriStaticOpts.qualifier,
      platformQualifier: trelloLabelAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloLabelAriStaticOpts.resourceOwner,
      resourceType: trelloLabelAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.labelId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || "",
        labelId: opts.labelId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloLabelAriStaticOpts);
    return new _TrelloLabelAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloLabelAriStaticOpts);
    return new _TrelloLabelAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      labelId: this.labelId
    };
  }
};

// src/trello/list/types.ts
var TrelloListAriResourceOwner = "trello", TrelloListAriResourceType = "list";

// src/trello/list/manifest.ts
var trelloListAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloListAriResourceOwner,
  resourceType: TrelloListAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{listId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    listId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/list/index.ts
var TrelloListAri = class _TrelloListAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._listId = opts.resourceIdSegmentValues.listId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get listId() {
    return this._listId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloListAriStaticOpts.qualifier,
      platformQualifier: trelloListAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloListAriStaticOpts.resourceOwner,
      resourceType: trelloListAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.listId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || "",
        listId: opts.listId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloListAriStaticOpts);
    return new _TrelloListAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloListAriStaticOpts);
    return new _TrelloListAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      listId: this.listId
    };
  }
};

// src/trello/logo/types.ts
var TrelloLogoAriResourceOwner = "trello", TrelloLogoAriResourceType = "logo";

// src/trello/logo/manifest.ts
var trelloLogoAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloLogoAriResourceOwner,
  resourceType: TrelloLogoAriResourceType,
  resourceIdSlug: "type-id/logo-type/{logoType}/{typeId}/{logoHash}",
  resourceIdSegmentFormats: {
    logoType: /(?:organization|enterprise)/,
    // eslint-disable-line no-useless-escape
    typeId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    logoHash: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/logo/index.ts
var TrelloLogoAri = class _TrelloLogoAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._logoType = opts.resourceIdSegmentValues.logoType, this._typeId = opts.resourceIdSegmentValues.typeId, this._logoHash = opts.resourceIdSegmentValues.logoHash;
  }
  get logoType() {
    return this._logoType;
  }
  get typeId() {
    return this._typeId;
  }
  get logoHash() {
    return this._logoHash;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloLogoAriStaticOpts.qualifier,
      platformQualifier: trelloLogoAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloLogoAriStaticOpts.resourceOwner,
      resourceType: trelloLogoAriStaticOpts.resourceType,
      resourceId: `type-id/logo-type/${opts.logoType}/${opts.typeId}/${opts.logoHash}`,
      resourceIdSegmentValues: {
        logoType: opts.logoType,
        typeId: opts.typeId || "",
        logoHash: opts.logoHash || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloLogoAriStaticOpts);
    return new _TrelloLogoAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloLogoAriStaticOpts);
    return new _TrelloLogoAri(opts);
  }
  getVariables() {
    return {
      logoType: this.logoType,
      typeId: this.typeId,
      logoHash: this.logoHash
    };
  }
};

// src/trello/planner/types.ts
var TrelloPlannerAriResourceOwner = "trello", TrelloPlannerAriResourceType = "planner";

// src/trello/planner/manifest.ts
var trelloPlannerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloPlannerAriResourceOwner,
  resourceType: TrelloPlannerAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{plannerId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    plannerId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/planner/index.ts
var TrelloPlannerAri = class _TrelloPlannerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._plannerId = opts.resourceIdSegmentValues.plannerId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get plannerId() {
    return this._plannerId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloPlannerAriStaticOpts.qualifier,
      platformQualifier: trelloPlannerAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloPlannerAriStaticOpts.resourceOwner,
      resourceType: trelloPlannerAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.plannerId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || "",
        plannerId: opts.plannerId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloPlannerAriStaticOpts);
    return new _TrelloPlannerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloPlannerAriStaticOpts);
    return new _TrelloPlannerAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      plannerId: this.plannerId
    };
  }
};

// src/trello/planner-calendar/types.ts
var TrelloPlannerCalendarAriResourceOwner = "trello", TrelloPlannerCalendarAriResourceType = "planner-calendar";

// src/trello/planner-calendar/manifest.ts
var trelloPlannerCalendarAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloPlannerCalendarAriResourceOwner,
  resourceType: TrelloPlannerCalendarAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{plannerCalendarId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    plannerCalendarId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/planner-calendar/index.ts
var TrelloPlannerCalendarAri = class _TrelloPlannerCalendarAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._plannerCalendarId = opts.resourceIdSegmentValues.plannerCalendarId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get plannerCalendarId() {
    return this._plannerCalendarId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloPlannerCalendarAriStaticOpts.qualifier,
      platformQualifier: trelloPlannerCalendarAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloPlannerCalendarAriStaticOpts.resourceOwner,
      resourceType: trelloPlannerCalendarAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.plannerCalendarId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || "",
        plannerCalendarId: opts.plannerCalendarId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloPlannerCalendarAriStaticOpts);
    return new _TrelloPlannerCalendarAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloPlannerCalendarAriStaticOpts);
    return new _TrelloPlannerCalendarAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      plannerCalendarId: this.plannerCalendarId
    };
  }
};

// src/trello/planner-event-card/types.ts
var TrelloPlannerEventCardAriResourceOwner = "trello", TrelloPlannerEventCardAriResourceType = "planner-event-card";

// src/trello/planner-event-card/manifest.ts
var trelloPlannerEventCardAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloPlannerEventCardAriResourceOwner,
  resourceType: TrelloPlannerEventCardAriResourceType,
  resourceIdSlug: "workspace/{workspaceId}/{plannerEventCardId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/,
    // eslint-disable-line no-useless-escape
    plannerEventCardId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/planner-event-card/index.ts
var TrelloPlannerEventCardAri = class _TrelloPlannerEventCardAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId, this._plannerEventCardId = opts.resourceIdSegmentValues.plannerEventCardId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  get plannerEventCardId() {
    return this._plannerEventCardId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloPlannerEventCardAriStaticOpts.qualifier,
      platformQualifier: trelloPlannerEventCardAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloPlannerEventCardAriStaticOpts.resourceOwner,
      resourceType: trelloPlannerEventCardAriStaticOpts.resourceType,
      resourceId: `workspace/${opts.workspaceId}/${opts.plannerEventCardId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || "",
        plannerEventCardId: opts.plannerEventCardId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloPlannerEventCardAriStaticOpts);
    return new _TrelloPlannerEventCardAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloPlannerEventCardAriStaticOpts);
    return new _TrelloPlannerEventCardAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId,
      plannerEventCardId: this.plannerEventCardId
    };
  }
};

// src/trello/role/types.ts
var TrelloRoleAriResourceOwner = "trello", TrelloRoleAriResourceType = "role";

// src/trello/role/manifest.ts
var trelloRoleAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloRoleAriResourceOwner,
  resourceType: TrelloRoleAriResourceType,
  resourceIdSlug: "{roleGroup}/{roleType}",
  resourceIdSegmentFormats: {
    roleGroup: /(?:workspace|enterprise|product)/,
    // eslint-disable-line no-useless-escape
    roleType: /(?:member|admin)/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/role/index.ts
var TrelloRoleAri = class _TrelloRoleAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._roleGroup = opts.resourceIdSegmentValues.roleGroup, this._roleType = opts.resourceIdSegmentValues.roleType;
  }
  get roleGroup() {
    return this._roleGroup;
  }
  get roleType() {
    return this._roleType;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloRoleAriStaticOpts.qualifier,
      platformQualifier: trelloRoleAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloRoleAriStaticOpts.resourceOwner,
      resourceType: trelloRoleAriStaticOpts.resourceType,
      resourceId: `${opts.roleGroup}/${opts.roleType}`,
      resourceIdSegmentValues: {
        roleGroup: opts.roleGroup,
        roleType: opts.roleType
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloRoleAriStaticOpts);
    return new _TrelloRoleAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloRoleAriStaticOpts);
    return new _TrelloRoleAri(opts);
  }
  getVariables() {
    return {
      roleGroup: this.roleGroup,
      roleType: this.roleType
    };
  }
};

// src/trello/site/types.ts
var TrelloSiteAriResourceOwner = "trello", TrelloSiteAriResourceType = "site";

// src/trello/site/manifest.ts
var trelloSiteAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloSiteAriResourceOwner,
  resourceType: TrelloSiteAriResourceType,
  resourceIdSlug: "trello",
  resourceIdSegmentFormats: {}
};

// src/trello/site/index.ts
var TrelloSiteAri = class _TrelloSiteAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloSiteAriStaticOpts.qualifier,
      platformQualifier: trelloSiteAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloSiteAriStaticOpts.resourceOwner,
      resourceType: trelloSiteAriStaticOpts.resourceType,
      resourceId: "trello",
      resourceIdSegmentValues: {}
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloSiteAriStaticOpts);
    return new _TrelloSiteAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloSiteAriStaticOpts);
    return new _TrelloSiteAri(opts);
  }
  getVariables() {
    return {};
  }
};

// src/trello/sticker/types.ts
var TrelloStickerAriResourceOwner = "trello", TrelloStickerAriResourceType = "sticker";

// src/trello/sticker/manifest.ts
var trelloStickerAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloStickerAriResourceOwner,
  resourceType: TrelloStickerAriResourceType,
  resourceIdSlug: "{customStickerId}",
  resourceIdSegmentFormats: {
    customStickerId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/sticker/index.ts
var TrelloStickerAri = class _TrelloStickerAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._customStickerId = opts.resourceIdSegmentValues.customStickerId;
  }
  get customStickerId() {
    return this._customStickerId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloStickerAriStaticOpts.qualifier,
      platformQualifier: trelloStickerAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloStickerAriStaticOpts.resourceOwner,
      resourceType: trelloStickerAriStaticOpts.resourceType,
      resourceId: `${opts.customStickerId}`,
      resourceIdSegmentValues: {
        customStickerId: opts.customStickerId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloStickerAriStaticOpts);
    return new _TrelloStickerAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloStickerAriStaticOpts);
    return new _TrelloStickerAri(opts);
  }
  getVariables() {
    return {
      customStickerId: this.customStickerId
    };
  }
};

// src/trello/user/types.ts
var TrelloUserAriResourceOwner = "trello", TrelloUserAriResourceType = "user";

// src/trello/user/manifest.ts
var trelloUserAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloUserAriResourceOwner,
  resourceType: TrelloUserAriResourceType,
  resourceIdSlug: "{userId}",
  resourceIdSegmentFormats: {
    userId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/user/index.ts
var TrelloUserAri = class _TrelloUserAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._userId = opts.resourceIdSegmentValues.userId;
  }
  get userId() {
    return this._userId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloUserAriStaticOpts.qualifier,
      platformQualifier: trelloUserAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloUserAriStaticOpts.resourceOwner,
      resourceType: trelloUserAriStaticOpts.resourceType,
      resourceId: `${opts.userId}`,
      resourceIdSegmentValues: {
        userId: opts.userId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloUserAriStaticOpts);
    return new _TrelloUserAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloUserAriStaticOpts);
    return new _TrelloUserAri(opts);
  }
  getVariables() {
    return {
      userId: this.userId
    };
  }
};

// src/trello/workspace/types.ts
var TrelloWorkspaceAriResourceOwner = "trello", TrelloWorkspaceAriResourceType = "workspace";

// src/trello/workspace/manifest.ts
var trelloWorkspaceAriStaticOpts = {
  qualifier: "ari",
  platformQualifier: "cloud",
  cloudId: new RegExp("^$"),
  // eslint-disable-line no-useless-escape
  resourceOwner: TrelloWorkspaceAriResourceOwner,
  resourceType: TrelloWorkspaceAriResourceType,
  resourceIdSlug: "{workspaceId}",
  resourceIdSegmentFormats: {
    workspaceId: /[a-zA-Z0-9\-_.]*/
    // eslint-disable-line no-useless-escape
  }
};

// src/trello/workspace/index.ts
var TrelloWorkspaceAri = class _TrelloWorkspaceAri extends RegisteredAri {
  constructor(opts) {
    super(opts);
    this._workspaceId = opts.resourceIdSegmentValues.workspaceId;
  }
  get workspaceId() {
    return this._workspaceId;
  }
  static create(opts) {
    let derivedOpts = {
      qualifier: trelloWorkspaceAriStaticOpts.qualifier,
      platformQualifier: trelloWorkspaceAriStaticOpts.platformQualifier,
      cloudId: void 0,
      resourceOwner: trelloWorkspaceAriStaticOpts.resourceOwner,
      resourceType: trelloWorkspaceAriStaticOpts.resourceType,
      resourceId: `${opts.workspaceId}`,
      resourceIdSegmentValues: {
        workspaceId: opts.workspaceId || ""
      }
    }, ariOpts = AriParser.fromOpts(derivedOpts, trelloWorkspaceAriStaticOpts);
    return new _TrelloWorkspaceAri(ariOpts);
  }
  static parse(maybeAri) {
    let opts = AriParser.fromString(maybeAri, trelloWorkspaceAriStaticOpts);
    return new _TrelloWorkspaceAri(opts);
  }
  getVariables() {
    return {
      workspaceId: this.workspaceId
    };
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  TrelloAttachmentAri,
  TrelloAvatarAri,
  TrelloBackgroundAri,
  TrelloBoardAri,
  TrelloCardAri,
  TrelloCheckItemAri,
  TrelloChecklistAri,
  TrelloCustomFieldAri,
  TrelloEmojiAri,
  TrelloEnterpriseAri,
  TrelloLabelAri,
  TrelloListAri,
  TrelloLogoAri,
  TrelloPlannerAri,
  TrelloPlannerCalendarAri,
  TrelloPlannerEventCardAri,
  TrelloRoleAri,
  TrelloSiteAri,
  TrelloStickerAri,
  TrelloUserAri,
  TrelloWorkspaceAri
});
