"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceTunnelServer = void 0;
const cli_shared_1 = require("@forge/cli-shared");
const csp_1 = require("@forge/csp");
const express_intercept_1 = require("express-intercept");
const cheerio_1 = require("cheerio");
class ResourceTunnelServer {
    port;
    key;
    path;
    logger;
    cspReporterServerPort;
    constructor({ port, key, path, cspReporterServerPort, logger }) {
        this.port = port;
        this.key = key;
        this.path = path;
        this.logger = logger;
        this.cspReporterServerPort = cspReporterServerPort;
    }
    static transformPermissionsWithRemotes(permissions, remotes) {
        const client = permissions.external?.fetch?.client
            ?.map((item) => {
            if (typeof item === 'string')
                return item;
            if ('address' in item)
                return item.address;
            return remotes?.find((remote) => remote.key === item.remote)?.baseUrl;
        })
            .filter((item) => typeof item === 'string') ?? undefined;
        return { ...permissions, external: { ...permissions.external, fetch: { ...permissions.external?.fetch, client } } };
    }
    logFileServed(reqUrl, textDecorator) {
        if (reqUrl !== '/' && reqUrl !== '/index.html')
            return;
        this.logger.info(cli_shared_1.LogColor.trace(textDecorator('index.html')));
    }
    getCspHeader = (existingCsp, hostname) => new csp_1.CSPInjectionService()
        .getInjectableCSP({
        existingCSPDetails: existingCsp,
        microsEnv: (0, cli_shared_1.getEnvironmentConfig)(cli_shared_1.CDNEnvironments),
        tunnelCSPReporterUri: `http://localhost:${this.cspReporterServerPort}`,
        hostname
    })
        .join('; ');
    injectGlobalBridgeScript = (htmlContent) => new cli_shared_1.BridgeScriptService().injectBridgeCore(htmlContent, () => {
        throw new Error('Malformed HTML document');
    });
    injectIframeResizerScript = (htmlContent) => new cli_shared_1.IframeResizerScriptService().injectIframeResizer(htmlContent, () => {
        throw new Error('Malformed HTML document');
    });
    getCustomUIHtmlTransformMiddleware = (permissions, remotes) => (0, express_intercept_1.responseHandler)()
        .if((res) => /html/i.test(res.get('content-type')))
        .replaceBuffer((body, req, res) => {
        if (!res || !req)
            return body;
        const htmlContentWithIframeResizerScript = this.injectIframeResizerScript(body);
        const htmlContentWithBridgeScript = this.injectGlobalBridgeScript(htmlContentWithIframeResizerScript);
        const cspDetails = new csp_1.CSPProcessingService({ info: () => { } }, cheerio_1.load).getCspDetails(htmlContentWithBridgeScript, ResourceTunnelServer.transformPermissionsWithRemotes(permissions, remotes));
        const hostname = req.query.hostname;
        res.setHeader('Content-Security-Policy', this.getCspHeader(cspDetails, hostname));
        return htmlContentWithBridgeScript;
    });
    getI18nResourcesMiddleware = (i18nConfig) => {
        const i18nResourcesPathRegex = /^\/__LOCALES__\/(.+)\.json$/i;
        const i18nResourceFileAccessor = new cli_shared_1.I18nResourceBundlingService().createFileAccessor(i18nConfig);
        return async (req, resp, next) => {
            const locale = i18nResourcesPathRegex.exec(req.path)?.[1];
            if (!locale)
                return next();
            const file = await i18nResourceFileAccessor(locale);
            if (!file)
                return next();
            resp.setHeader('Content-Type', 'application/json');
            resp.status(200).send(file);
        };
    };
}
exports.ResourceTunnelServer = ResourceTunnelServer;
